
STM32_F407G_MISKA_Gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088c4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08008a4c  08008a4c  00018a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008aa0  08008aa0  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  08008aa0  08008aa0  00018aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008aa8  08008aa8  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008aa8  08008aa8  00018aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008aac  08008aac  00018aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08008ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002011c  2**0
                  CONTENTS
 10 .bss          00000adc  2000011c  2000011c  0002011c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bf8  20000bf8  0002011c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129d0  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000347b  00000000  00000000  00032b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef8  00000000  00000000  00035f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d60  00000000  00000000  00036e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f5f  00000000  00000000  00037bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000165ef  00000000  00000000  0005bb4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7eb2  00000000  00000000  0007213e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139ff0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cdc  00000000  00000000  0013a040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000011c 	.word	0x2000011c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008a34 	.word	0x08008a34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000120 	.word	0x20000120
 80001c4:	08008a34 	.word	0x08008a34

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b974 	b.w	8000cb4 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468e      	mov	lr, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14d      	bne.n	8000a8e <__udivmoddi4+0xaa>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4694      	mov	ip, r2
 80009f6:	d969      	bls.n	8000acc <__udivmoddi4+0xe8>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b152      	cbz	r2, 8000a14 <__udivmoddi4+0x30>
 80009fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000a02:	f1c2 0120 	rsb	r1, r2, #32
 8000a06:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a12:	4094      	lsls	r4, r2
 8000a14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a18:	0c21      	lsrs	r1, r4, #16
 8000a1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a1e:	fa1f f78c 	uxth.w	r7, ip
 8000a22:	fb08 e316 	mls	r3, r8, r6, lr
 8000a26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a2a:	fb06 f107 	mul.w	r1, r6, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x64>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a3a:	f080 811f 	bcs.w	8000c7c <__udivmoddi4+0x298>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 811c 	bls.w	8000c7c <__udivmoddi4+0x298>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	4463      	add	r3, ip
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a50:	fb08 3310 	mls	r3, r8, r0, r3
 8000a54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a58:	fb00 f707 	mul.w	r7, r0, r7
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	d90a      	bls.n	8000a76 <__udivmoddi4+0x92>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a68:	f080 810a 	bcs.w	8000c80 <__udivmoddi4+0x29c>
 8000a6c:	42a7      	cmp	r7, r4
 8000a6e:	f240 8107 	bls.w	8000c80 <__udivmoddi4+0x29c>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a7a:	1be4      	subs	r4, r4, r7
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	b11d      	cbz	r5, 8000a88 <__udivmoddi4+0xa4>
 8000a80:	40d4      	lsrs	r4, r2
 8000a82:	2300      	movs	r3, #0
 8000a84:	e9c5 4300 	strd	r4, r3, [r5]
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d909      	bls.n	8000aa6 <__udivmoddi4+0xc2>
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f000 80ef 	beq.w	8000c76 <__udivmoddi4+0x292>
 8000a98:	2600      	movs	r6, #0
 8000a9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	fab3 f683 	clz	r6, r3
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d14a      	bne.n	8000b44 <__udivmoddi4+0x160>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xd4>
 8000ab2:	4282      	cmp	r2, r0
 8000ab4:	f200 80f9 	bhi.w	8000caa <__udivmoddi4+0x2c6>
 8000ab8:	1a84      	subs	r4, r0, r2
 8000aba:	eb61 0303 	sbc.w	r3, r1, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	469e      	mov	lr, r3
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d0e0      	beq.n	8000a88 <__udivmoddi4+0xa4>
 8000ac6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aca:	e7dd      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000acc:	b902      	cbnz	r2, 8000ad0 <__udivmoddi4+0xec>
 8000ace:	deff      	udf	#255	; 0xff
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	2a00      	cmp	r2, #0
 8000ad6:	f040 8092 	bne.w	8000bfe <__udivmoddi4+0x21a>
 8000ada:	eba1 010c 	sub.w	r1, r1, ip
 8000ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae2:	fa1f fe8c 	uxth.w	lr, ip
 8000ae6:	2601      	movs	r6, #1
 8000ae8:	0c20      	lsrs	r0, r4, #16
 8000aea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aee:	fb07 1113 	mls	r1, r7, r3, r1
 8000af2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af6:	fb0e f003 	mul.w	r0, lr, r3
 8000afa:	4288      	cmp	r0, r1
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x12c>
 8000afe:	eb1c 0101 	adds.w	r1, ip, r1
 8000b02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x12a>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f200 80cb 	bhi.w	8000ca4 <__udivmoddi4+0x2c0>
 8000b0e:	4643      	mov	r3, r8
 8000b10:	1a09      	subs	r1, r1, r0
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b18:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b20:	fb0e fe00 	mul.w	lr, lr, r0
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x156>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x154>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f200 80bb 	bhi.w	8000cae <__udivmoddi4+0x2ca>
 8000b38:	4608      	mov	r0, r1
 8000b3a:	eba4 040e 	sub.w	r4, r4, lr
 8000b3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b42:	e79c      	b.n	8000a7e <__udivmoddi4+0x9a>
 8000b44:	f1c6 0720 	rsb	r7, r6, #32
 8000b48:	40b3      	lsls	r3, r6
 8000b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa20 f407 	lsr.w	r4, r0, r7
 8000b56:	fa01 f306 	lsl.w	r3, r1, r6
 8000b5a:	431c      	orrs	r4, r3
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b62:	fa00 f306 	lsl.w	r3, r0, r6
 8000b66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b6a:	0c20      	lsrs	r0, r4, #16
 8000b6c:	fa1f fe8c 	uxth.w	lr, ip
 8000b70:	fb09 1118 	mls	r1, r9, r8, r1
 8000b74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b78:	fb08 f00e 	mul.w	r0, r8, lr
 8000b7c:	4288      	cmp	r0, r1
 8000b7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b8>
 8000b84:	eb1c 0101 	adds.w	r1, ip, r1
 8000b88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b90:	4288      	cmp	r0, r1
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b96:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9a:	4461      	add	r1, ip
 8000b9c:	1a09      	subs	r1, r1, r0
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ba4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ba8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb0:	458e      	cmp	lr, r1
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1e2>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bbc:	d26c      	bcs.n	8000c98 <__udivmoddi4+0x2b4>
 8000bbe:	458e      	cmp	lr, r1
 8000bc0:	d96a      	bls.n	8000c98 <__udivmoddi4+0x2b4>
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	4461      	add	r1, ip
 8000bc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bca:	fba0 9402 	umull	r9, r4, r0, r2
 8000bce:	eba1 010e 	sub.w	r1, r1, lr
 8000bd2:	42a1      	cmp	r1, r4
 8000bd4:	46c8      	mov	r8, r9
 8000bd6:	46a6      	mov	lr, r4
 8000bd8:	d356      	bcc.n	8000c88 <__udivmoddi4+0x2a4>
 8000bda:	d053      	beq.n	8000c84 <__udivmoddi4+0x2a0>
 8000bdc:	b15d      	cbz	r5, 8000bf6 <__udivmoddi4+0x212>
 8000bde:	ebb3 0208 	subs.w	r2, r3, r8
 8000be2:	eb61 010e 	sbc.w	r1, r1, lr
 8000be6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bea:	fa22 f306 	lsr.w	r3, r2, r6
 8000bee:	40f1      	lsrs	r1, r6
 8000bf0:	431f      	orrs	r7, r3
 8000bf2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bf6:	2600      	movs	r6, #0
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	40d8      	lsrs	r0, r3
 8000c04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c08:	fa21 f303 	lsr.w	r3, r1, r3
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4301      	orrs	r1, r0
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c20:	0c0b      	lsrs	r3, r1, #16
 8000c22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c26:	fb00 f60e 	mul.w	r6, r0, lr
 8000c2a:	429e      	cmp	r6, r3
 8000c2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x260>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c3a:	d22f      	bcs.n	8000c9c <__udivmoddi4+0x2b8>
 8000c3c:	429e      	cmp	r6, r3
 8000c3e:	d92d      	bls.n	8000c9c <__udivmoddi4+0x2b8>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	b289      	uxth	r1, r1
 8000c48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c54:	fb06 f30e 	mul.w	r3, r6, lr
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x28a>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c64:	d216      	bcs.n	8000c94 <__udivmoddi4+0x2b0>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d914      	bls.n	8000c94 <__udivmoddi4+0x2b0>
 8000c6a:	3e02      	subs	r6, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	1ac9      	subs	r1, r1, r3
 8000c70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c74:	e738      	b.n	8000ae8 <__udivmoddi4+0x104>
 8000c76:	462e      	mov	r6, r5
 8000c78:	4628      	mov	r0, r5
 8000c7a:	e705      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	e6e3      	b.n	8000a48 <__udivmoddi4+0x64>
 8000c80:	4618      	mov	r0, r3
 8000c82:	e6f8      	b.n	8000a76 <__udivmoddi4+0x92>
 8000c84:	454b      	cmp	r3, r9
 8000c86:	d2a9      	bcs.n	8000bdc <__udivmoddi4+0x1f8>
 8000c88:	ebb9 0802 	subs.w	r8, r9, r2
 8000c8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c90:	3801      	subs	r0, #1
 8000c92:	e7a3      	b.n	8000bdc <__udivmoddi4+0x1f8>
 8000c94:	4646      	mov	r6, r8
 8000c96:	e7ea      	b.n	8000c6e <__udivmoddi4+0x28a>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	e794      	b.n	8000bc6 <__udivmoddi4+0x1e2>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	e7d1      	b.n	8000c44 <__udivmoddi4+0x260>
 8000ca0:	46d0      	mov	r8, sl
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b8>
 8000ca4:	3b02      	subs	r3, #2
 8000ca6:	4461      	add	r1, ip
 8000ca8:	e732      	b.n	8000b10 <__udivmoddi4+0x12c>
 8000caa:	4630      	mov	r0, r6
 8000cac:	e709      	b.n	8000ac2 <__udivmoddi4+0xde>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e742      	b.n	8000b3a <__udivmoddi4+0x156>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	; 0x30
 8000cbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
 8000cd2:	4b7e      	ldr	r3, [pc, #504]	; (8000ecc <MX_GPIO_Init+0x214>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a7d      	ldr	r2, [pc, #500]	; (8000ecc <MX_GPIO_Init+0x214>)
 8000cd8:	f043 0310 	orr.w	r3, r3, #16
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b7b      	ldr	r3, [pc, #492]	; (8000ecc <MX_GPIO_Init+0x214>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0310 	and.w	r3, r3, #16
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	4b77      	ldr	r3, [pc, #476]	; (8000ecc <MX_GPIO_Init+0x214>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a76      	ldr	r2, [pc, #472]	; (8000ecc <MX_GPIO_Init+0x214>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b74      	ldr	r3, [pc, #464]	; (8000ecc <MX_GPIO_Init+0x214>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b70      	ldr	r3, [pc, #448]	; (8000ecc <MX_GPIO_Init+0x214>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a6f      	ldr	r2, [pc, #444]	; (8000ecc <MX_GPIO_Init+0x214>)
 8000d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b6d      	ldr	r3, [pc, #436]	; (8000ecc <MX_GPIO_Init+0x214>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b69      	ldr	r3, [pc, #420]	; (8000ecc <MX_GPIO_Init+0x214>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a68      	ldr	r2, [pc, #416]	; (8000ecc <MX_GPIO_Init+0x214>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b66      	ldr	r3, [pc, #408]	; (8000ecc <MX_GPIO_Init+0x214>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	4b62      	ldr	r3, [pc, #392]	; (8000ecc <MX_GPIO_Init+0x214>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a61      	ldr	r2, [pc, #388]	; (8000ecc <MX_GPIO_Init+0x214>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b5f      	ldr	r3, [pc, #380]	; (8000ecc <MX_GPIO_Init+0x214>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b5b      	ldr	r3, [pc, #364]	; (8000ecc <MX_GPIO_Init+0x214>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a5a      	ldr	r2, [pc, #360]	; (8000ecc <MX_GPIO_Init+0x214>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b58      	ldr	r3, [pc, #352]	; (8000ecc <MX_GPIO_Init+0x214>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	210c      	movs	r1, #12
 8000d7a:	4855      	ldr	r0, [pc, #340]	; (8000ed0 <MX_GPIO_Init+0x218>)
 8000d7c:	f001 f88c 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	f242 0101 	movw	r1, #8193	; 0x2001
 8000d86:	4853      	ldr	r0, [pc, #332]	; (8000ed4 <MX_GPIO_Init+0x21c>)
 8000d88:	f001 f886 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000d92:	4851      	ldr	r0, [pc, #324]	; (8000ed8 <MX_GPIO_Init+0x220>)
 8000d94:	f001 f880 	bl	8001e98 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da4:	2302      	movs	r3, #2
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	4848      	ldr	r0, [pc, #288]	; (8000ed0 <MX_GPIO_Init+0x218>)
 8000db0:	f000 febe 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000db4:	2308      	movs	r3, #8
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4841      	ldr	r0, [pc, #260]	; (8000ed0 <MX_GPIO_Init+0x218>)
 8000dcc:	f000 feb0 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|OTG_FS_PowerSwitchOn_Pin;
 8000dd0:	f242 0301 	movw	r3, #8193	; 0x2001
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	4619      	mov	r1, r3
 8000de8:	483a      	ldr	r0, [pc, #232]	; (8000ed4 <MX_GPIO_Init+0x21c>)
 8000dea:	f000 fea1 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000dee:	2308      	movs	r3, #8
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dfe:	2305      	movs	r3, #5
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	4832      	ldr	r0, [pc, #200]	; (8000ed4 <MX_GPIO_Init+0x21c>)
 8000e0a:	f000 fe91 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e12:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	482e      	ldr	r0, [pc, #184]	; (8000edc <MX_GPIO_Init+0x224>)
 8000e24:	f000 fe84 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4829      	ldr	r0, [pc, #164]	; (8000ee0 <MX_GPIO_Init+0x228>)
 8000e3c:	f000 fe78 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e52:	2305      	movs	r3, #5
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4820      	ldr	r0, [pc, #128]	; (8000ee0 <MX_GPIO_Init+0x228>)
 8000e5e:	f000 fe67 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e62:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000e66:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4817      	ldr	r0, [pc, #92]	; (8000ed8 <MX_GPIO_Init+0x220>)
 8000e7c:	f000 fe58 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e80:	2320      	movs	r3, #32
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	4811      	ldr	r0, [pc, #68]	; (8000ed8 <MX_GPIO_Init+0x220>)
 8000e94:	f000 fe4c 	bl	8001b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e9c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4808      	ldr	r0, [pc, #32]	; (8000ed0 <MX_GPIO_Init+0x218>)
 8000eae:	f000 fe3f 	bl	8001b30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2006      	movs	r0, #6
 8000eb8:	f000 fe03 	bl	8001ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ebc:	2006      	movs	r0, #6
 8000ebe:	f000 fe1c 	bl	8001afa <HAL_NVIC_EnableIRQ>

}
 8000ec2:	bf00      	nop
 8000ec4:	3730      	adds	r7, #48	; 0x30
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	40020c00 	.word	0x40020c00
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020400 	.word	0x40020400

08000ee4 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000eea:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <MX_I2S3_Init+0x58>)
 8000eec:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f08:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000f0c:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <MX_I2S3_Init+0x5c>)
 8000f0e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_I2S3_Init+0x54>)
 8000f24:	f000 ffea 	bl	8001efc <HAL_I2S_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000f2e:	f000 fb33 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000138 	.word	0x20000138
 8000f3c:	40003c00 	.word	0x40003c00
 8000f40:	00017700 	.word	0x00017700

08000f44 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08e      	sub	sp, #56	; 0x38
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a31      	ldr	r2, [pc, #196]	; (8001034 <HAL_I2S_MspInit+0xf0>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d15a      	bne.n	800102a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f74:	2301      	movs	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000f78:	23c0      	movs	r3, #192	; 0xc0
 8000f7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4618      	mov	r0, r3
 8000f86:	f003 fb2f 	bl	80045e8 <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000f90:	f000 fb02 	bl	8001598 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	4b27      	ldr	r3, [pc, #156]	; (8001038 <HAL_I2S_MspInit+0xf4>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	4a26      	ldr	r2, [pc, #152]	; (8001038 <HAL_I2S_MspInit+0xf4>)
 8000f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa4:	4b24      	ldr	r3, [pc, #144]	; (8001038 <HAL_I2S_MspInit+0xf4>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <HAL_I2S_MspInit+0xf4>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	4a1f      	ldr	r2, [pc, #124]	; (8001038 <HAL_I2S_MspInit+0xf4>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <HAL_I2S_MspInit+0xf4>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <HAL_I2S_MspInit+0xf4>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	4a18      	ldr	r2, [pc, #96]	; (8001038 <HAL_I2S_MspInit+0xf4>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	6313      	str	r3, [r2, #48]	; 0x30
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_I2S_MspInit+0xf4>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000fe8:	2310      	movs	r3, #16
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ff8:	2306      	movs	r3, #6
 8000ffa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001000:	4619      	mov	r1, r3
 8001002:	480e      	ldr	r0, [pc, #56]	; (800103c <HAL_I2S_MspInit+0xf8>)
 8001004:	f000 fd94 	bl	8001b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001008:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800101a:	2306      	movs	r3, #6
 800101c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001022:	4619      	mov	r1, r3
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <HAL_I2S_MspInit+0xfc>)
 8001026:	f000 fd83 	bl	8001b30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800102a:	bf00      	nop
 800102c:	3738      	adds	r7, #56	; 0x38
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40003c00 	.word	0x40003c00
 8001038:	40023800 	.word	0x40023800
 800103c:	40020000 	.word	0x40020000
 8001040:	40020800 	.word	0x40020800

08001044 <HAL_GPIO_EXTI_Callback>:


// EXTI -> external interrupt for when the USER button on the STM32 is pressed

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) //Check if the blue USER button is pressed; GPIOA, GPIO_PIN_0
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d107      	bne.n	8001064 <HAL_GPIO_EXTI_Callback+0x20>
	{
		//button_flag = 1;
		button_flag = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001054:	2101      	movs	r1, #1
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <HAL_GPIO_EXTI_Callback+0x28>)
 8001058:	f000 ff06 	bl	8001e68 <HAL_GPIO_ReadPin>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001062:	701a      	strb	r2, [r3, #0]
	}
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40020000 	.word	0x40020000
 8001070:	2000018d 	.word	0x2000018d
 8001074:	00000000 	.word	0x00000000

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b5b0      	push	{r4, r5, r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107e:	f000 fbaf 	bl	80017e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001082:	f000 fa1f 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001086:	f7ff fe17 	bl	8000cb8 <MX_GPIO_Init>
  MX_I2S3_Init();
 800108a:	f7ff ff2b 	bl	8000ee4 <MX_I2S3_Init>
  MX_SPI1_Init();
 800108e:	f000 fa89 	bl	80015a4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001092:	f007 f85d 	bl	8008150 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  // read WHOAMI register
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	2104      	movs	r1, #4
 800109a:	48a3      	ldr	r0, [pc, #652]	; (8001328 <main+0x2b0>)
 800109c:	f000 fefc 	bl	8001e98 <HAL_GPIO_WritePin>
  outdata[0] = 0x0f | 0x80 ; // read whoami
 80010a0:	4ba2      	ldr	r3, [pc, #648]	; (800132c <main+0x2b4>)
 80010a2:	228f      	movs	r2, #143	; 0x8f
 80010a4:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2302      	movs	r3, #2
 80010ae:	4aa0      	ldr	r2, [pc, #640]	; (8001330 <main+0x2b8>)
 80010b0:	499e      	ldr	r1, [pc, #632]	; (800132c <main+0x2b4>)
 80010b2:	48a0      	ldr	r0, [pc, #640]	; (8001334 <main+0x2bc>)
 80010b4:	f003 fc61 	bl	800497a <HAL_SPI_TransmitReceive>
  lis_id = indata[1];
 80010b8:	4b9d      	ldr	r3, [pc, #628]	; (8001330 <main+0x2b8>)
 80010ba:	785a      	ldrb	r2, [r3, #1]
 80010bc:	4b9e      	ldr	r3, [pc, #632]	; (8001338 <main+0x2c0>)
 80010be:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2104      	movs	r1, #4
 80010c4:	4898      	ldr	r0, [pc, #608]	; (8001328 <main+0x2b0>)
 80010c6:	f000 fee7 	bl	8001e98 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80010ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ce:	f000 fbf9 	bl	80018c4 <HAL_Delay>



  // sensor setup (activation and setting frequency)
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2104      	movs	r1, #4
 80010d6:	4894      	ldr	r0, [pc, #592]	; (8001328 <main+0x2b0>)
 80010d8:	f000 fede 	bl	8001e98 <HAL_GPIO_WritePin>

  outdata[0] = 0x10 ; // register used for setting up the accelerometer
 80010dc:	4b93      	ldr	r3, [pc, #588]	; (800132c <main+0x2b4>)
 80010de:	2210      	movs	r2, #16
 80010e0:	701a      	strb	r2, [r3, #0]
  outdata[1] = 0x20 ; // set frequency to 26Hz
 80010e2:	4b92      	ldr	r3, [pc, #584]	; (800132c <main+0x2b4>)
 80010e4:	2220      	movs	r2, #32
 80010e6:	705a      	strb	r2, [r3, #1]
  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2302      	movs	r3, #2
 80010f0:	4a8f      	ldr	r2, [pc, #572]	; (8001330 <main+0x2b8>)
 80010f2:	498e      	ldr	r1, [pc, #568]	; (800132c <main+0x2b4>)
 80010f4:	488f      	ldr	r0, [pc, #572]	; (8001334 <main+0x2bc>)
 80010f6:	f003 fc40 	bl	800497a <HAL_SPI_TransmitReceive>


  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2104      	movs	r1, #4
 80010fe:	488a      	ldr	r0, [pc, #552]	; (8001328 <main+0x2b0>)
 8001100:	f000 feca 	bl	8001e98 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001104:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001108:	f000 fbdc 	bl	80018c4 <HAL_Delay>
  outdata[1] = 0x00 ;
 800110c:	4b87      	ldr	r3, [pc, #540]	; (800132c <main+0x2b4>)
 800110e:	2200      	movs	r2, #0
 8001110:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2104      	movs	r1, #4
 8001116:	4884      	ldr	r0, [pc, #528]	; (8001328 <main+0x2b0>)
 8001118:	f000 febe 	bl	8001e98 <HAL_GPIO_WritePin>


  outdata[0] = 0x11 ; // register used for setting up the gyroscope
 800111c:	4b83      	ldr	r3, [pc, #524]	; (800132c <main+0x2b4>)
 800111e:	2211      	movs	r2, #17
 8001120:	701a      	strb	r2, [r3, #0]
  outdata[1] = 0x20 ; // set frequency to 26Hz
 8001122:	4b82      	ldr	r3, [pc, #520]	; (800132c <main+0x2b4>)
 8001124:	2220      	movs	r2, #32
 8001126:	705a      	strb	r2, [r3, #1]
  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2302      	movs	r3, #2
 8001130:	4a7f      	ldr	r2, [pc, #508]	; (8001330 <main+0x2b8>)
 8001132:	497e      	ldr	r1, [pc, #504]	; (800132c <main+0x2b4>)
 8001134:	487f      	ldr	r0, [pc, #508]	; (8001334 <main+0x2bc>)
 8001136:	f003 fc20 	bl	800497a <HAL_SPI_TransmitReceive>


  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	2104      	movs	r1, #4
 800113e:	487a      	ldr	r0, [pc, #488]	; (8001328 <main+0x2b0>)
 8001140:	f000 feaa 	bl	8001e98 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001144:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001148:	f000 fbbc 	bl	80018c4 <HAL_Delay>
  outdata[1] = 0x00 ;
 800114c:	4b77      	ldr	r3, [pc, #476]	; (800132c <main+0x2b4>)
 800114e:	2200      	movs	r2, #0
 8001150:	705a      	strb	r2, [r3, #1]
  {



	  //Read gyroscope measurements
	  outdata[0] = 0x23 | 0x80 ; // read x (pitch), 0x4B
 8001152:	4b76      	ldr	r3, [pc, #472]	; (800132c <main+0x2b4>)
 8001154:	22a3      	movs	r2, #163	; 0xa3
 8001156:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2104      	movs	r1, #4
 800115c:	4872      	ldr	r0, [pc, #456]	; (8001328 <main+0x2b0>)
 800115e:	f000 fe9b 	bl	8001e98 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2302      	movs	r3, #2
 800116a:	4a71      	ldr	r2, [pc, #452]	; (8001330 <main+0x2b8>)
 800116c:	496f      	ldr	r1, [pc, #444]	; (800132c <main+0x2b4>)
 800116e:	4871      	ldr	r0, [pc, #452]	; (8001334 <main+0x2bc>)
 8001170:	f003 fc03 	bl	800497a <HAL_SPI_TransmitReceive>
	   	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	2104      	movs	r1, #4
 8001178:	486b      	ldr	r0, [pc, #428]	; (8001328 <main+0x2b0>)
 800117a:	f000 fe8d 	bl	8001e98 <HAL_GPIO_WritePin>
	  GyroX = indata[1];
 800117e:	4b6c      	ldr	r3, [pc, #432]	; (8001330 <main+0x2b8>)
 8001180:	785b      	ldrb	r3, [r3, #1]
 8001182:	b25a      	sxtb	r2, r3
 8001184:	4b6d      	ldr	r3, [pc, #436]	; (800133c <main+0x2c4>)
 8001186:	701a      	strb	r2, [r3, #0]

	  outdata[0] = 0x25 | 0x80 ; // read y (roll), 0x4D
 8001188:	4b68      	ldr	r3, [pc, #416]	; (800132c <main+0x2b4>)
 800118a:	22a5      	movs	r2, #165	; 0xa5
 800118c:	701a      	strb	r2, [r3, #0]
	   	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2104      	movs	r1, #4
 8001192:	4865      	ldr	r0, [pc, #404]	; (8001328 <main+0x2b0>)
 8001194:	f000 fe80 	bl	8001e98 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2302      	movs	r3, #2
 80011a0:	4a63      	ldr	r2, [pc, #396]	; (8001330 <main+0x2b8>)
 80011a2:	4962      	ldr	r1, [pc, #392]	; (800132c <main+0x2b4>)
 80011a4:	4863      	ldr	r0, [pc, #396]	; (8001334 <main+0x2bc>)
 80011a6:	f003 fbe8 	bl	800497a <HAL_SPI_TransmitReceive>
	   	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2104      	movs	r1, #4
 80011ae:	485e      	ldr	r0, [pc, #376]	; (8001328 <main+0x2b0>)
 80011b0:	f000 fe72 	bl	8001e98 <HAL_GPIO_WritePin>
	  GyroY = indata[1];
 80011b4:	4b5e      	ldr	r3, [pc, #376]	; (8001330 <main+0x2b8>)
 80011b6:	785b      	ldrb	r3, [r3, #1]
 80011b8:	b25a      	sxtb	r2, r3
 80011ba:	4b61      	ldr	r3, [pc, #388]	; (8001340 <main+0x2c8>)
 80011bc:	701a      	strb	r2, [r3, #0]

	  outdata[0] = 0x27 | 0x80 ; // read z (yaw), 0x4F
 80011be:	4b5b      	ldr	r3, [pc, #364]	; (800132c <main+0x2b4>)
 80011c0:	22a7      	movs	r2, #167	; 0xa7
 80011c2:	701a      	strb	r2, [r3, #0]
	   	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2104      	movs	r1, #4
 80011c8:	4857      	ldr	r0, [pc, #348]	; (8001328 <main+0x2b0>)
 80011ca:	f000 fe65 	bl	8001e98 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2302      	movs	r3, #2
 80011d6:	4a56      	ldr	r2, [pc, #344]	; (8001330 <main+0x2b8>)
 80011d8:	4954      	ldr	r1, [pc, #336]	; (800132c <main+0x2b4>)
 80011da:	4856      	ldr	r0, [pc, #344]	; (8001334 <main+0x2bc>)
 80011dc:	f003 fbcd 	bl	800497a <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2104      	movs	r1, #4
 80011e4:	4850      	ldr	r0, [pc, #320]	; (8001328 <main+0x2b0>)
 80011e6:	f000 fe57 	bl	8001e98 <HAL_GPIO_WritePin>
	  GyroZ = indata[1];
 80011ea:	4b51      	ldr	r3, [pc, #324]	; (8001330 <main+0x2b8>)
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	b25a      	sxtb	r2, r3
 80011f0:	4b54      	ldr	r3, [pc, #336]	; (8001344 <main+0x2cc>)
 80011f2:	701a      	strb	r2, [r3, #0]



	  //Read accelerometer measurements
	  outdata[0] = 0x29 | 0x80 ; // read x, 0x51
 80011f4:	4b4d      	ldr	r3, [pc, #308]	; (800132c <main+0x2b4>)
 80011f6:	22a9      	movs	r2, #169	; 0xa9
 80011f8:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2104      	movs	r1, #4
 80011fe:	484a      	ldr	r0, [pc, #296]	; (8001328 <main+0x2b0>)
 8001200:	f000 fe4a 	bl	8001e98 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2302      	movs	r3, #2
 800120c:	4a48      	ldr	r2, [pc, #288]	; (8001330 <main+0x2b8>)
 800120e:	4947      	ldr	r1, [pc, #284]	; (800132c <main+0x2b4>)
 8001210:	4848      	ldr	r0, [pc, #288]	; (8001334 <main+0x2bc>)
 8001212:	f003 fbb2 	bl	800497a <HAL_SPI_TransmitReceive>
	   	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8001216:	2201      	movs	r2, #1
 8001218:	2104      	movs	r1, #4
 800121a:	4843      	ldr	r0, [pc, #268]	; (8001328 <main+0x2b0>)
 800121c:	f000 fe3c 	bl	8001e98 <HAL_GPIO_WritePin>
	  AccelX = indata[1];
 8001220:	4b43      	ldr	r3, [pc, #268]	; (8001330 <main+0x2b8>)
 8001222:	785b      	ldrb	r3, [r3, #1]
 8001224:	b25a      	sxtb	r2, r3
 8001226:	4b48      	ldr	r3, [pc, #288]	; (8001348 <main+0x2d0>)
 8001228:	701a      	strb	r2, [r3, #0]
	  outdata[0] = 0x2B | 0x80 ; // read y, 0x53
 800122a:	4b40      	ldr	r3, [pc, #256]	; (800132c <main+0x2b4>)
 800122c:	22ab      	movs	r2, #171	; 0xab
 800122e:	701a      	strb	r2, [r3, #0]
	   	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	2104      	movs	r1, #4
 8001234:	483c      	ldr	r0, [pc, #240]	; (8001328 <main+0x2b0>)
 8001236:	f000 fe2f 	bl	8001e98 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2302      	movs	r3, #2
 8001242:	4a3b      	ldr	r2, [pc, #236]	; (8001330 <main+0x2b8>)
 8001244:	4939      	ldr	r1, [pc, #228]	; (800132c <main+0x2b4>)
 8001246:	483b      	ldr	r0, [pc, #236]	; (8001334 <main+0x2bc>)
 8001248:	f003 fb97 	bl	800497a <HAL_SPI_TransmitReceive>
	   	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	2104      	movs	r1, #4
 8001250:	4835      	ldr	r0, [pc, #212]	; (8001328 <main+0x2b0>)
 8001252:	f000 fe21 	bl	8001e98 <HAL_GPIO_WritePin>
	  AccelY = indata[1];
 8001256:	4b36      	ldr	r3, [pc, #216]	; (8001330 <main+0x2b8>)
 8001258:	785b      	ldrb	r3, [r3, #1]
 800125a:	b25a      	sxtb	r2, r3
 800125c:	4b3b      	ldr	r3, [pc, #236]	; (800134c <main+0x2d4>)
 800125e:	701a      	strb	r2, [r3, #0]
	  outdata[0] = 0x2D | 0x80 ; // read z, 0x55
 8001260:	4b32      	ldr	r3, [pc, #200]	; (800132c <main+0x2b4>)
 8001262:	22ad      	movs	r2, #173	; 0xad
 8001264:	701a      	strb	r2, [r3, #0]
	   	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2104      	movs	r1, #4
 800126a:	482f      	ldr	r0, [pc, #188]	; (8001328 <main+0x2b0>)
 800126c:	f000 fe14 	bl	8001e98 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2302      	movs	r3, #2
 8001278:	4a2d      	ldr	r2, [pc, #180]	; (8001330 <main+0x2b8>)
 800127a:	492c      	ldr	r1, [pc, #176]	; (800132c <main+0x2b4>)
 800127c:	482d      	ldr	r0, [pc, #180]	; (8001334 <main+0x2bc>)
 800127e:	f003 fb7c 	bl	800497a <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8001282:	2201      	movs	r2, #1
 8001284:	2104      	movs	r1, #4
 8001286:	4828      	ldr	r0, [pc, #160]	; (8001328 <main+0x2b0>)
 8001288:	f000 fe06 	bl	8001e98 <HAL_GPIO_WritePin>
	  AccelZ = indata[1];
 800128c:	4b28      	ldr	r3, [pc, #160]	; (8001330 <main+0x2b8>)
 800128e:	785b      	ldrb	r3, [r3, #1]
 8001290:	b25a      	sxtb	r2, r3
 8001292:	4b2f      	ldr	r3, [pc, #188]	; (8001350 <main+0x2d8>)
 8001294:	701a      	strb	r2, [r3, #0]
    /* USER CODE BEGIN 3 */
	  //HAL_Delay(1000);



	vertValue = GyroY; // / 3.142857 * 180; /*- vertZero;*/
 8001296:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <main+0x2c8>)
 8001298:	f993 3000 	ldrsb.w	r3, [r3]
 800129c:	b21a      	sxth	r2, r3
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <main+0x2dc>)
 80012a0:	801a      	strh	r2, [r3, #0]
	horzValue = GyroX; // / 3.142857 * 180; /*- horzZero;*/
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <main+0x2c4>)
 80012a4:	f993 3000 	ldrsb.w	r3, [r3]
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <main+0x2e0>)
 80012ac:	801a      	strh	r2, [r3, #0]
	vertZero = GyroY;
 80012ae:	4b24      	ldr	r3, [pc, #144]	; (8001340 <main+0x2c8>)
 80012b0:	f993 3000 	ldrsb.w	r3, [r3]
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <main+0x2e4>)
 80012b8:	801a      	strh	r2, [r3, #0]
	horzZero = GyroX;
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <main+0x2c4>)
 80012bc:	f993 3000 	ldrsb.w	r3, [r3]
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	4b27      	ldr	r3, [pc, #156]	; (8001360 <main+0x2e8>)
 80012c4:	801a      	strh	r2, [r3, #0]


	if ((AccelZ < 16 && vertValue > 2) || (vertValue < -2 && AccelZ > -36)) { // goes up when vertval is negative and down when positive; Accelerometer is used to limit the angle of usage to not have to use the air-mouse in a unpleasant position
 80012c6:	4b22      	ldr	r3, [pc, #136]	; (8001350 <main+0x2d8>)
 80012c8:	f993 3000 	ldrsb.w	r3, [r3]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	dc04      	bgt.n	80012da <main+0x262>
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <main+0x2dc>)
 80012d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	dc0b      	bgt.n	80012f2 <main+0x27a>
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <main+0x2dc>)
 80012dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e0:	f113 0f02 	cmn.w	r3, #2
 80012e4:	da40      	bge.n	8001368 <main+0x2f0>
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <main+0x2d8>)
 80012e8:	f993 3000 	ldrsb.w	r3, [r3]
 80012ec:	f113 0f23 	cmn.w	r3, #35	; 0x23
 80012f0:	db3a      	blt.n	8001368 <main+0x2f0>
		mousehid.mouse_y = (vertValue / 1.3 /* * sensitivity*/);    // move mouse on y axis
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <main+0x2dc>)
 80012f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f8b7 	bl	800046c <__aeabi_i2d>
 80012fe:	a308      	add	r3, pc, #32	; (adr r3, 8001320 <main+0x2a8>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7ff fa46 	bl	8000794 <__aeabi_ddiv>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff fb28 	bl	8000964 <__aeabi_d2iz>
 8001314:	4603      	mov	r3, r0
 8001316:	b25a      	sxtb	r2, r3
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <main+0x2ec>)
 800131a:	709a      	strb	r2, [r3, #2]
 800131c:	e027      	b.n	800136e <main+0x2f6>
 800131e:	bf00      	nop
 8001320:	cccccccd 	.word	0xcccccccd
 8001324:	3ff4cccc 	.word	0x3ff4cccc
 8001328:	40021000 	.word	0x40021000
 800132c:	20000184 	.word	0x20000184
 8001330:	20000180 	.word	0x20000180
 8001334:	2000019c 	.word	0x2000019c
 8001338:	20000186 	.word	0x20000186
 800133c:	2000018a 	.word	0x2000018a
 8001340:	2000018b 	.word	0x2000018b
 8001344:	2000018c 	.word	0x2000018c
 8001348:	20000187 	.word	0x20000187
 800134c:	20000188 	.word	0x20000188
 8001350:	20000189 	.word	0x20000189
 8001354:	20000192 	.word	0x20000192
 8001358:	20000194 	.word	0x20000194
 800135c:	2000018e 	.word	0x2000018e
 8001360:	20000190 	.word	0x20000190
 8001364:	20000198 	.word	0x20000198
	}
	else
		mousehid.mouse_y = 0;
 8001368:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <main+0x438>)
 800136a:	2200      	movs	r2, #0
 800136c:	709a      	strb	r2, [r3, #2]

	if ((summ_horz > -1050 && horzValue > 2) || (summ_horz < 1050 && horzValue < -2)) { // limiting the angle of usage with a sum of gyroscope measurements does not work very well especially with quick larger movements -> it can limit the cursors area of movement!!!
 800136e:	4b51      	ldr	r3, [pc, #324]	; (80014b4 <main+0x43c>)
 8001370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001374:	f46f 6283 	mvn.w	r2, #1048	; 0x418
 8001378:	4293      	cmp	r3, r2
 800137a:	db04      	blt.n	8001386 <main+0x30e>
 800137c:	4b4e      	ldr	r3, [pc, #312]	; (80014b8 <main+0x440>)
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	2b02      	cmp	r3, #2
 8001384:	dc0c      	bgt.n	80013a0 <main+0x328>
 8001386:	4b4b      	ldr	r3, [pc, #300]	; (80014b4 <main+0x43c>)
 8001388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138c:	f240 4219 	movw	r2, #1049	; 0x419
 8001390:	4293      	cmp	r3, r2
 8001392:	dc3e      	bgt.n	8001412 <main+0x39a>
 8001394:	4b48      	ldr	r3, [pc, #288]	; (80014b8 <main+0x440>)
 8001396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139a:	f113 0f02 	cmn.w	r3, #2
 800139e:	da38      	bge.n	8001412 <main+0x39a>
		mousehid.mouse_x= (horzValue / 1.3 /* * sensitivity*/); // move mouse on x axis
 80013a0:	4b45      	ldr	r3, [pc, #276]	; (80014b8 <main+0x440>)
 80013a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f860 	bl	800046c <__aeabi_i2d>
 80013ac:	a33e      	add	r3, pc, #248	; (adr r3, 80014a8 <main+0x430>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7ff f9ef 	bl	8000794 <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff fad1 	bl	8000964 <__aeabi_d2iz>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b25a      	sxtb	r2, r3
 80013c6:	4b3a      	ldr	r3, [pc, #232]	; (80014b0 <main+0x438>)
 80013c8:	705a      	strb	r2, [r3, #1]
		summ_horz = summ_horz + (horzValue / 1.3);
 80013ca:	4b3a      	ldr	r3, [pc, #232]	; (80014b4 <main+0x43c>)
 80013cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f84b 	bl	800046c <__aeabi_i2d>
 80013d6:	4604      	mov	r4, r0
 80013d8:	460d      	mov	r5, r1
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <main+0x440>)
 80013dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f843 	bl	800046c <__aeabi_i2d>
 80013e6:	a330      	add	r3, pc, #192	; (adr r3, 80014a8 <main+0x430>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	f7ff f9d2 	bl	8000794 <__aeabi_ddiv>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4620      	mov	r0, r4
 80013f6:	4629      	mov	r1, r5
 80013f8:	f7fe feec 	bl	80001d4 <__adddf3>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff faae 	bl	8000964 <__aeabi_d2iz>
 8001408:	4603      	mov	r3, r0
 800140a:	b21a      	sxth	r2, r3
 800140c:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <main+0x43c>)
 800140e:	801a      	strh	r2, [r3, #0]
 8001410:	e025      	b.n	800145e <main+0x3e6>
    }
	else {
		mousehid.mouse_x= 0;
 8001412:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <main+0x438>)
 8001414:	2200      	movs	r2, #0
 8001416:	705a      	strb	r2, [r3, #1]
		//if (horzValue > 2 || horzValue < -2)
		summ_horz = summ_horz + (horzValue / 1.3);
 8001418:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <main+0x43c>)
 800141a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f824 	bl	800046c <__aeabi_i2d>
 8001424:	4604      	mov	r4, r0
 8001426:	460d      	mov	r5, r1
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <main+0x440>)
 800142a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f81c 	bl	800046c <__aeabi_i2d>
 8001434:	a31c      	add	r3, pc, #112	; (adr r3, 80014a8 <main+0x430>)
 8001436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143a:	f7ff f9ab 	bl	8000794 <__aeabi_ddiv>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4620      	mov	r0, r4
 8001444:	4629      	mov	r1, r5
 8001446:	f7fe fec5 	bl	80001d4 <__adddf3>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fa87 	bl	8000964 <__aeabi_d2iz>
 8001456:	4603      	mov	r3, r0
 8001458:	b21a      	sxth	r2, r3
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <main+0x43c>)
 800145c:	801a      	strh	r2, [r3, #0]
	}

	if (button_flag==1)
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <main+0x444>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d108      	bne.n	8001478 <main+0x400>
	{
		mousehid.button = 1; //left click = 1; right click = 2
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <main+0x438>)
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
		USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid)); //Hold mouse button
 800146c:	2204      	movs	r2, #4
 800146e:	4910      	ldr	r1, [pc, #64]	; (80014b0 <main+0x438>)
 8001470:	4813      	ldr	r0, [pc, #76]	; (80014c0 <main+0x448>)
 8001472:	f005 faf3 	bl	8006a5c <USBD_HID_SendReport>
 8001476:	e00b      	b.n	8001490 <main+0x418>
	}
	else if (button_flag==0) {
 8001478:	4b10      	ldr	r3, [pc, #64]	; (80014bc <main+0x444>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d107      	bne.n	8001490 <main+0x418>
		mousehid.button = 0; //left click = 1; right click = 2
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <main+0x438>)
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
		USBD_HID_SendReport(&hUsbDeviceFS, &mousehid, sizeof (mousehid));
 8001486:	2204      	movs	r2, #4
 8001488:	4909      	ldr	r1, [pc, #36]	; (80014b0 <main+0x438>)
 800148a:	480d      	ldr	r0, [pc, #52]	; (80014c0 <main+0x448>)
 800148c:	f005 fae6 	bl	8006a5c <USBD_HID_SendReport>
	}

	USBD_HID_SendReport(&hUsbDeviceFS,&mousehid, sizeof (mousehid)); //Send data to USB
 8001490:	2204      	movs	r2, #4
 8001492:	4907      	ldr	r1, [pc, #28]	; (80014b0 <main+0x438>)
 8001494:	480a      	ldr	r0, [pc, #40]	; (80014c0 <main+0x448>)
 8001496:	f005 fae1 	bl	8006a5c <USBD_HID_SendReport>


	HAL_Delay(10);
 800149a:	200a      	movs	r0, #10
 800149c:	f000 fa12 	bl	80018c4 <HAL_Delay>
	  outdata[0] = 0x23 | 0x80 ; // read x (pitch), 0x4B
 80014a0:	e657      	b.n	8001152 <main+0xda>
 80014a2:	bf00      	nop
 80014a4:	f3af 8000 	nop.w
 80014a8:	cccccccd 	.word	0xcccccccd
 80014ac:	3ff4cccc 	.word	0x3ff4cccc
 80014b0:	20000198 	.word	0x20000198
 80014b4:	20000196 	.word	0x20000196
 80014b8:	20000194 	.word	0x20000194
 80014bc:	2000018d 	.word	0x2000018d
 80014c0:	200001fc 	.word	0x200001fc

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b094      	sub	sp, #80	; 0x50
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	2230      	movs	r2, #48	; 0x30
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f007 faa6 	bl	8008a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <SystemClock_Config+0xcc>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	4a27      	ldr	r2, [pc, #156]	; (8001590 <SystemClock_Config+0xcc>)
 80014f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f6:	6413      	str	r3, [r2, #64]	; 0x40
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <SystemClock_Config+0xcc>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001504:	2300      	movs	r3, #0
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	4b22      	ldr	r3, [pc, #136]	; (8001594 <SystemClock_Config+0xd0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a21      	ldr	r2, [pc, #132]	; (8001594 <SystemClock_Config+0xd0>)
 800150e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <SystemClock_Config+0xd0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001520:	2301      	movs	r3, #1
 8001522:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001524:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152a:	2302      	movs	r3, #2
 800152c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001532:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001534:	2308      	movs	r3, #8
 8001536:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001538:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800153c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800153e:	2302      	movs	r3, #2
 8001540:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001542:	2307      	movs	r3, #7
 8001544:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001546:	f107 0320 	add.w	r3, r7, #32
 800154a:	4618      	mov	r0, r3
 800154c:	f002 fbdc 	bl	8003d08 <HAL_RCC_OscConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001556:	f000 f81f 	bl	8001598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155a:	230f      	movs	r3, #15
 800155c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155e:	2302      	movs	r3, #2
 8001560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001566:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800156a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800156c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001570:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	2105      	movs	r1, #5
 8001578:	4618      	mov	r0, r3
 800157a:	f002 fe3d 	bl	80041f8 <HAL_RCC_ClockConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001584:	f000 f808 	bl	8001598 <Error_Handler>
  }
}
 8001588:	bf00      	nop
 800158a:	3750      	adds	r7, #80	; 0x50
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800
 8001594:	40007000 	.word	0x40007000

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159c:	b672      	cpsid	i
}
 800159e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <Error_Handler+0x8>
	...

080015a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <MX_SPI1_Init+0x64>)
 80015aa:	4a18      	ldr	r2, [pc, #96]	; (800160c <MX_SPI1_Init+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <MX_SPI1_Init+0x64>)
 80015b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_SPI1_Init+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <MX_SPI1_Init+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_SPI1_Init+0x64>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_SPI1_Init+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_SPI1_Init+0x64>)
 80015d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_SPI1_Init+0x64>)
 80015d8:	2238      	movs	r2, #56	; 0x38
 80015da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <MX_SPI1_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_SPI1_Init+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <MX_SPI1_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <MX_SPI1_Init+0x64>)
 80015f0:	220a      	movs	r2, #10
 80015f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015f4:	4804      	ldr	r0, [pc, #16]	; (8001608 <MX_SPI1_Init+0x64>)
 80015f6:	f003 f937 	bl	8004868 <HAL_SPI_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001600:	f7ff ffca 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000019c 	.word	0x2000019c
 800160c:	40013000 	.word	0x40013000

08001610 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a19      	ldr	r2, [pc, #100]	; (8001694 <HAL_SPI_MspInit+0x84>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d12b      	bne.n	800168a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_SPI_MspInit+0x88>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	4a17      	ldr	r2, [pc, #92]	; (8001698 <HAL_SPI_MspInit+0x88>)
 800163c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001640:	6453      	str	r3, [r2, #68]	; 0x44
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_SPI_MspInit+0x88>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_SPI_MspInit+0x88>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a10      	ldr	r2, [pc, #64]	; (8001698 <HAL_SPI_MspInit+0x88>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_SPI_MspInit+0x88>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800166a:	2338      	movs	r3, #56	; 0x38
 800166c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166e:	2302      	movs	r3, #2
 8001670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001676:	2302      	movs	r3, #2
 8001678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800167a:	2305      	movs	r3, #5
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <HAL_SPI_MspInit+0x8c>)
 8001686:	f000 fa53 	bl	8001b30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800168a:	bf00      	nop
 800168c:	3728      	adds	r7, #40	; 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40013000 	.word	0x40013000
 8001698:	40023800 	.word	0x40023800
 800169c:	40020400 	.word	0x40020400

080016a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_MspInit+0x4c>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <HAL_MspInit+0x4c>)
 80016b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b4:	6453      	str	r3, [r2, #68]	; 0x44
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <HAL_MspInit+0x4c>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_MspInit+0x4c>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a08      	ldr	r2, [pc, #32]	; (80016ec <HAL_MspInit+0x4c>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_MspInit+0x4c>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016de:	2007      	movs	r0, #7
 80016e0:	f000 f9e4 	bl	8001aac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40023800 	.word	0x40023800

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <NMI_Handler+0x4>

080016f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <MemManage_Handler+0x4>

08001702 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <BusFault_Handler+0x4>

08001708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <UsageFault_Handler+0x4>

0800170e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173c:	f000 f8a2 	bl	8001884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001748:	2001      	movs	r0, #1
 800174a:	f000 fbbf 	bl	8001ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <OTG_FS_IRQHandler+0x10>)
 800175a:	f001 f9bf 	bl	8002adc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200006d8 	.word	0x200006d8

08001768 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <SystemInit+0x20>)
 800176e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <SystemInit+0x20>)
 8001774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800178c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001790:	480d      	ldr	r0, [pc, #52]	; (80017c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001792:	490e      	ldr	r1, [pc, #56]	; (80017cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001794:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001798:	e002      	b.n	80017a0 <LoopCopyDataInit>

0800179a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800179c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179e:	3304      	adds	r3, #4

080017a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a4:	d3f9      	bcc.n	800179a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a6:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017a8:	4c0b      	ldr	r4, [pc, #44]	; (80017d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ac:	e001      	b.n	80017b2 <LoopFillZerobss>

080017ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b0:	3204      	adds	r2, #4

080017b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b4:	d3fb      	bcc.n	80017ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017b6:	f7ff ffd7 	bl	8001768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ba:	f007 f90f 	bl	80089dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017be:	f7ff fc5b 	bl	8001078 <main>
  bx  lr    
 80017c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017cc:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 80017d0:	08008ab0 	.word	0x08008ab0
  ldr r2, =_sbss
 80017d4:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 80017d8:	20000bf8 	.word	0x20000bf8

080017dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC_IRQHandler>
	...

080017e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <HAL_Init+0x40>)
 80017ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <HAL_Init+0x40>)
 80017f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a07      	ldr	r2, [pc, #28]	; (8001820 <HAL_Init+0x40>)
 8001802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001808:	2003      	movs	r0, #3
 800180a:	f000 f94f 	bl	8001aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800180e:	2000      	movs	r0, #0
 8001810:	f000 f808 	bl	8001824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001814:	f7ff ff44 	bl	80016a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023c00 	.word	0x40023c00

08001824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_InitTick+0x54>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_InitTick+0x58>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183a:	fbb3 f3f1 	udiv	r3, r3, r1
 800183e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f967 	bl	8001b16 <HAL_SYSTICK_Config>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e00e      	b.n	8001870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b0f      	cmp	r3, #15
 8001856:	d80a      	bhi.n	800186e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001858:	2200      	movs	r2, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f000 f92f 	bl	8001ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001864:	4a06      	ldr	r2, [pc, #24]	; (8001880 <HAL_InitTick+0x5c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	e000      	b.n	8001870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000000 	.word	0x20000000
 800187c:	20000008 	.word	0x20000008
 8001880:	20000004 	.word	0x20000004

08001884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_IncTick+0x20>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x24>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <HAL_IncTick+0x24>)
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000008 	.word	0x20000008
 80018a8:	200001f4 	.word	0x200001f4

080018ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return uwTick;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <HAL_GetTick+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	200001f4 	.word	0x200001f4

080018c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018cc:	f7ff ffee 	bl	80018ac <HAL_GetTick>
 80018d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018dc:	d005      	beq.n	80018ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_Delay+0x44>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4413      	add	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ea:	bf00      	nop
 80018ec:	f7ff ffde 	bl	80018ac <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d8f7      	bhi.n	80018ec <HAL_Delay+0x28>
  {
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000008 	.word	0x20000008

0800190c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001928:	4013      	ands	r3, r2
 800192a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193e:	4a04      	ldr	r2, [pc, #16]	; (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	60d3      	str	r3, [r2, #12]
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <__NVIC_GetPriorityGrouping+0x18>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	0a1b      	lsrs	r3, r3, #8
 800195e:	f003 0307 	and.w	r3, r3, #7
}
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	2b00      	cmp	r3, #0
 8001980:	db0b      	blt.n	800199a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	f003 021f 	and.w	r2, r3, #31
 8001988:	4907      	ldr	r1, [pc, #28]	; (80019a8 <__NVIC_EnableIRQ+0x38>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	095b      	lsrs	r3, r3, #5
 8001990:	2001      	movs	r0, #1
 8001992:	fa00 f202 	lsl.w	r2, r0, r2
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000e100 	.word	0xe000e100

080019ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	db0a      	blt.n	80019d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	490c      	ldr	r1, [pc, #48]	; (80019f8 <__NVIC_SetPriority+0x4c>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	0112      	lsls	r2, r2, #4
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	440b      	add	r3, r1
 80019d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d4:	e00a      	b.n	80019ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4908      	ldr	r1, [pc, #32]	; (80019fc <__NVIC_SetPriority+0x50>)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	3b04      	subs	r3, #4
 80019e4:	0112      	lsls	r2, r2, #4
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	440b      	add	r3, r1
 80019ea:	761a      	strb	r2, [r3, #24]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f1c3 0307 	rsb	r3, r3, #7
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	bf28      	it	cs
 8001a1e:	2304      	movcs	r3, #4
 8001a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3304      	adds	r3, #4
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d902      	bls.n	8001a30 <NVIC_EncodePriority+0x30>
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3b03      	subs	r3, #3
 8001a2e:	e000      	b.n	8001a32 <NVIC_EncodePriority+0x32>
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	f04f 32ff 	mov.w	r2, #4294967295
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	401a      	ands	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a48:	f04f 31ff 	mov.w	r1, #4294967295
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	43d9      	mvns	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	4313      	orrs	r3, r2
         );
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3724      	adds	r7, #36	; 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a78:	d301      	bcc.n	8001a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00f      	b.n	8001a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <SysTick_Config+0x40>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a86:	210f      	movs	r1, #15
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f7ff ff8e 	bl	80019ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <SysTick_Config+0x40>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a96:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <SysTick_Config+0x40>)
 8001a98:	2207      	movs	r2, #7
 8001a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	e000e010 	.word	0xe000e010

08001aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff29 	bl	800190c <__NVIC_SetPriorityGrouping>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
 8001ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad4:	f7ff ff3e 	bl	8001954 <__NVIC_GetPriorityGrouping>
 8001ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f7ff ff8e 	bl	8001a00 <NVIC_EncodePriority>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff5d 	bl	80019ac <__NVIC_SetPriority>
}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff31 	bl	8001970 <__NVIC_EnableIRQ>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ffa2 	bl	8001a68 <SysTick_Config>
 8001b24:	4603      	mov	r3, r0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	; 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
 8001b4a:	e16b      	b.n	8001e24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	f040 815a 	bne.w	8001e1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d005      	beq.n	8001b82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d130      	bne.n	8001be4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb8:	2201      	movs	r2, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 0201 	and.w	r2, r3, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d017      	beq.n	8001c20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d123      	bne.n	8001c74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	08da      	lsrs	r2, r3, #3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3208      	adds	r2, #8
 8001c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	220f      	movs	r2, #15
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	08da      	lsrs	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3208      	adds	r2, #8
 8001c6e:	69b9      	ldr	r1, [r7, #24]
 8001c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	2203      	movs	r2, #3
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0203 	and.w	r2, r3, #3
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 80b4 	beq.w	8001e1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	4b60      	ldr	r3, [pc, #384]	; (8001e3c <HAL_GPIO_Init+0x30c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	4a5f      	ldr	r2, [pc, #380]	; (8001e3c <HAL_GPIO_Init+0x30c>)
 8001cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc6:	4b5d      	ldr	r3, [pc, #372]	; (8001e3c <HAL_GPIO_Init+0x30c>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd2:	4a5b      	ldr	r2, [pc, #364]	; (8001e40 <HAL_GPIO_Init+0x310>)
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	3302      	adds	r3, #2
 8001cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	220f      	movs	r2, #15
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a52      	ldr	r2, [pc, #328]	; (8001e44 <HAL_GPIO_Init+0x314>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d02b      	beq.n	8001d56 <HAL_GPIO_Init+0x226>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a51      	ldr	r2, [pc, #324]	; (8001e48 <HAL_GPIO_Init+0x318>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d025      	beq.n	8001d52 <HAL_GPIO_Init+0x222>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a50      	ldr	r2, [pc, #320]	; (8001e4c <HAL_GPIO_Init+0x31c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d01f      	beq.n	8001d4e <HAL_GPIO_Init+0x21e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a4f      	ldr	r2, [pc, #316]	; (8001e50 <HAL_GPIO_Init+0x320>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d019      	beq.n	8001d4a <HAL_GPIO_Init+0x21a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a4e      	ldr	r2, [pc, #312]	; (8001e54 <HAL_GPIO_Init+0x324>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d013      	beq.n	8001d46 <HAL_GPIO_Init+0x216>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a4d      	ldr	r2, [pc, #308]	; (8001e58 <HAL_GPIO_Init+0x328>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00d      	beq.n	8001d42 <HAL_GPIO_Init+0x212>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4c      	ldr	r2, [pc, #304]	; (8001e5c <HAL_GPIO_Init+0x32c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d007      	beq.n	8001d3e <HAL_GPIO_Init+0x20e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4b      	ldr	r2, [pc, #300]	; (8001e60 <HAL_GPIO_Init+0x330>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d101      	bne.n	8001d3a <HAL_GPIO_Init+0x20a>
 8001d36:	2307      	movs	r3, #7
 8001d38:	e00e      	b.n	8001d58 <HAL_GPIO_Init+0x228>
 8001d3a:	2308      	movs	r3, #8
 8001d3c:	e00c      	b.n	8001d58 <HAL_GPIO_Init+0x228>
 8001d3e:	2306      	movs	r3, #6
 8001d40:	e00a      	b.n	8001d58 <HAL_GPIO_Init+0x228>
 8001d42:	2305      	movs	r3, #5
 8001d44:	e008      	b.n	8001d58 <HAL_GPIO_Init+0x228>
 8001d46:	2304      	movs	r3, #4
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x228>
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e004      	b.n	8001d58 <HAL_GPIO_Init+0x228>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e002      	b.n	8001d58 <HAL_GPIO_Init+0x228>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_GPIO_Init+0x228>
 8001d56:	2300      	movs	r3, #0
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	f002 0203 	and.w	r2, r2, #3
 8001d5e:	0092      	lsls	r2, r2, #2
 8001d60:	4093      	lsls	r3, r2
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d68:	4935      	ldr	r1, [pc, #212]	; (8001e40 <HAL_GPIO_Init+0x310>)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	3302      	adds	r3, #2
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d76:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <HAL_GPIO_Init+0x334>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d9a:	4a32      	ldr	r2, [pc, #200]	; (8001e64 <HAL_GPIO_Init+0x334>)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da0:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <HAL_GPIO_Init+0x334>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc4:	4a27      	ldr	r2, [pc, #156]	; (8001e64 <HAL_GPIO_Init+0x334>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dca:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <HAL_GPIO_Init+0x334>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dee:	4a1d      	ldr	r2, [pc, #116]	; (8001e64 <HAL_GPIO_Init+0x334>)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_GPIO_Init+0x334>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e18:	4a12      	ldr	r2, [pc, #72]	; (8001e64 <HAL_GPIO_Init+0x334>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3301      	adds	r3, #1
 8001e22:	61fb      	str	r3, [r7, #28]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	2b0f      	cmp	r3, #15
 8001e28:	f67f ae90 	bls.w	8001b4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40013800 	.word	0x40013800
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40020800 	.word	0x40020800
 8001e50:	40020c00 	.word	0x40020c00
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40021400 	.word	0x40021400
 8001e5c:	40021800 	.word	0x40021800
 8001e60:	40021c00 	.word	0x40021c00
 8001e64:	40013c00 	.word	0x40013c00

08001e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	887b      	ldrh	r3, [r7, #2]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e001      	b.n	8001e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea8:	787b      	ldrb	r3, [r7, #1]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb4:	e003      	b.n	8001ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eb6:	887b      	ldrh	r3, [r7, #2]
 8001eb8:	041a      	lsls	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	619a      	str	r2, [r3, #24]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d006      	beq.n	8001ef0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ee2:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f8aa 	bl	8001044 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40013c00 	.word	0x40013c00

08001efc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e128      	b.n	8002160 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d109      	bne.n	8001f2e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a90      	ldr	r2, [pc, #576]	; (8002168 <HAL_I2S_Init+0x26c>)
 8001f26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff f80b 	bl	8000f44 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2202      	movs	r2, #2
 8001f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f44:	f023 030f 	bic.w	r3, r3, #15
 8001f48:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d060      	beq.n	800201c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d102      	bne.n	8001f68 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001f62:	2310      	movs	r3, #16
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e001      	b.n	8001f6c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001f68:	2320      	movs	r3, #32
 8001f6a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b20      	cmp	r3, #32
 8001f72:	d802      	bhi.n	8001f7a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f002 fc16 	bl	80047ac <HAL_RCCEx_GetPeriphCLKFreq>
 8001f80:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f8a:	d125      	bne.n	8001fd8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d010      	beq.n	8001fb6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb0:	3305      	adds	r3, #5
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	e01f      	b.n	8001ff6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	461a      	mov	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd2:	3305      	adds	r3, #5
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	e00e      	b.n	8001ff6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	461a      	mov	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	3305      	adds	r3, #5
 8001ff4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4a5c      	ldr	r2, [pc, #368]	; (800216c <HAL_I2S_Init+0x270>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	08db      	lsrs	r3, r3, #3
 8002000:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	085b      	lsrs	r3, r3, #1
 8002012:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	e003      	b.n	8002024 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800201c:	2302      	movs	r3, #2
 800201e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d902      	bls.n	8002030 <HAL_I2S_Init+0x134>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	2bff      	cmp	r3, #255	; 0xff
 800202e:	d907      	bls.n	8002040 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002034:	f043 0210 	orr.w	r2, r3, #16
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e08f      	b.n	8002160 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	ea42 0103 	orr.w	r1, r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69fa      	ldr	r2, [r7, #28]
 8002050:	430a      	orrs	r2, r1
 8002052:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800205e:	f023 030f 	bic.w	r3, r3, #15
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6851      	ldr	r1, [r2, #4]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6892      	ldr	r2, [r2, #8]
 800206a:	4311      	orrs	r1, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68d2      	ldr	r2, [r2, #12]
 8002070:	4311      	orrs	r1, r2
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6992      	ldr	r2, [r2, #24]
 8002076:	430a      	orrs	r2, r1
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002082:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d161      	bne.n	8002150 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a38      	ldr	r2, [pc, #224]	; (8002170 <HAL_I2S_Init+0x274>)
 8002090:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a37      	ldr	r2, [pc, #220]	; (8002174 <HAL_I2S_Init+0x278>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_I2S_Init+0x1a4>
 800209c:	4b36      	ldr	r3, [pc, #216]	; (8002178 <HAL_I2S_Init+0x27c>)
 800209e:	e001      	b.n	80020a4 <HAL_I2S_Init+0x1a8>
 80020a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	4932      	ldr	r1, [pc, #200]	; (8002174 <HAL_I2S_Init+0x278>)
 80020ac:	428a      	cmp	r2, r1
 80020ae:	d101      	bne.n	80020b4 <HAL_I2S_Init+0x1b8>
 80020b0:	4a31      	ldr	r2, [pc, #196]	; (8002178 <HAL_I2S_Init+0x27c>)
 80020b2:	e001      	b.n	80020b8 <HAL_I2S_Init+0x1bc>
 80020b4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80020b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80020bc:	f023 030f 	bic.w	r3, r3, #15
 80020c0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a2b      	ldr	r2, [pc, #172]	; (8002174 <HAL_I2S_Init+0x278>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d101      	bne.n	80020d0 <HAL_I2S_Init+0x1d4>
 80020cc:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <HAL_I2S_Init+0x27c>)
 80020ce:	e001      	b.n	80020d4 <HAL_I2S_Init+0x1d8>
 80020d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020d4:	2202      	movs	r2, #2
 80020d6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a25      	ldr	r2, [pc, #148]	; (8002174 <HAL_I2S_Init+0x278>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d101      	bne.n	80020e6 <HAL_I2S_Init+0x1ea>
 80020e2:	4b25      	ldr	r3, [pc, #148]	; (8002178 <HAL_I2S_Init+0x27c>)
 80020e4:	e001      	b.n	80020ea <HAL_I2S_Init+0x1ee>
 80020e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020f6:	d003      	beq.n	8002100 <HAL_I2S_Init+0x204>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d103      	bne.n	8002108 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	e001      	b.n	800210c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002116:	4313      	orrs	r3, r2
 8002118:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002120:	4313      	orrs	r3, r2
 8002122:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800212a:	4313      	orrs	r3, r2
 800212c:	b29a      	uxth	r2, r3
 800212e:	897b      	ldrh	r3, [r7, #10]
 8002130:	4313      	orrs	r3, r2
 8002132:	b29b      	uxth	r3, r3
 8002134:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002138:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a0d      	ldr	r2, [pc, #52]	; (8002174 <HAL_I2S_Init+0x278>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d101      	bne.n	8002148 <HAL_I2S_Init+0x24c>
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <HAL_I2S_Init+0x27c>)
 8002146:	e001      	b.n	800214c <HAL_I2S_Init+0x250>
 8002148:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800214c:	897a      	ldrh	r2, [r7, #10]
 800214e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3720      	adds	r7, #32
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	08002273 	.word	0x08002273
 800216c:	cccccccd 	.word	0xcccccccd
 8002170:	08002389 	.word	0x08002389
 8002174:	40003800 	.word	0x40003800
 8002178:	40003400 	.word	0x40003400

0800217c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	881a      	ldrh	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	1c9a      	adds	r2, r3, #2
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10e      	bne.n	800220c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ffb8 	bl	800217c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	b292      	uxth	r2, r2
 8002228:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	1c9a      	adds	r2, r3, #2
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002238:	b29b      	uxth	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002246:	b29b      	uxth	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10e      	bne.n	800226a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800225a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff93 	bl	8002190 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b04      	cmp	r3, #4
 800228c:	d13a      	bne.n	8002304 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b01      	cmp	r3, #1
 8002296:	d109      	bne.n	80022ac <I2S_IRQHandler+0x3a>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a2:	2b40      	cmp	r3, #64	; 0x40
 80022a4:	d102      	bne.n	80022ac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ffb4 	bl	8002214 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b2:	2b40      	cmp	r3, #64	; 0x40
 80022b4:	d126      	bne.n	8002304 <I2S_IRQHandler+0x92>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0320 	and.w	r3, r3, #32
 80022c0:	2b20      	cmp	r3, #32
 80022c2:	d11f      	bne.n	8002304 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f043 0202 	orr.w	r2, r3, #2
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ff50 	bl	80021a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b03      	cmp	r3, #3
 800230e:	d136      	bne.n	800237e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b02      	cmp	r3, #2
 8002318:	d109      	bne.n	800232e <I2S_IRQHandler+0xbc>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002324:	2b80      	cmp	r3, #128	; 0x80
 8002326:	d102      	bne.n	800232e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ff45 	bl	80021b8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b08      	cmp	r3, #8
 8002336:	d122      	bne.n	800237e <I2S_IRQHandler+0x10c>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b20      	cmp	r3, #32
 8002344:	d11b      	bne.n	800237e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002354:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	f043 0204 	orr.w	r2, r3, #4
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ff13 	bl	80021a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800237e:	bf00      	nop
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a92      	ldr	r2, [pc, #584]	; (80025e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80023a2:	4b92      	ldr	r3, [pc, #584]	; (80025ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80023a4:	e001      	b.n	80023aa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80023a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8b      	ldr	r2, [pc, #556]	; (80025e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d101      	bne.n	80023c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80023c0:	4b8a      	ldr	r3, [pc, #552]	; (80025ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80023c2:	e001      	b.n	80023c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80023c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d4:	d004      	beq.n	80023e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f040 8099 	bne.w	8002512 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d107      	bne.n	80023fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f925 	bl	8002644 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b01      	cmp	r3, #1
 8002402:	d107      	bne.n	8002414 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f9c8 	bl	80027a4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241a:	2b40      	cmp	r3, #64	; 0x40
 800241c:	d13a      	bne.n	8002494 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b00      	cmp	r3, #0
 8002426:	d035      	beq.n	8002494 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a6e      	ldr	r2, [pc, #440]	; (80025e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d101      	bne.n	8002436 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002432:	4b6e      	ldr	r3, [pc, #440]	; (80025ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002434:	e001      	b.n	800243a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002436:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4969      	ldr	r1, [pc, #420]	; (80025e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002442:	428b      	cmp	r3, r1
 8002444:	d101      	bne.n	800244a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002446:	4b69      	ldr	r3, [pc, #420]	; (80025ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002448:	e001      	b.n	800244e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800244a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800244e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002452:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002462:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f043 0202 	orr.w	r2, r3, #2
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff fe88 	bl	80021a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b08      	cmp	r3, #8
 800249c:	f040 80c3 	bne.w	8002626 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f003 0320 	and.w	r3, r3, #32
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 80bd 	beq.w	8002626 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024ba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a49      	ldr	r2, [pc, #292]	; (80025e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d101      	bne.n	80024ca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80024c6:	4b49      	ldr	r3, [pc, #292]	; (80025ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80024c8:	e001      	b.n	80024ce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80024ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4944      	ldr	r1, [pc, #272]	; (80025e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80024d6:	428b      	cmp	r3, r1
 80024d8:	d101      	bne.n	80024de <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80024da:	4b44      	ldr	r3, [pc, #272]	; (80025ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80024dc:	e001      	b.n	80024e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80024de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024e6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	f043 0204 	orr.w	r2, r3, #4
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff fe4a 	bl	80021a4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002510:	e089      	b.n	8002626 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b02      	cmp	r3, #2
 800251a:	d107      	bne.n	800252c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f8be 	bl	80026a8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b01      	cmp	r3, #1
 8002534:	d107      	bne.n	8002546 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f8fd 	bl	8002740 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254c:	2b40      	cmp	r3, #64	; 0x40
 800254e:	d12f      	bne.n	80025b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b00      	cmp	r3, #0
 8002558:	d02a      	beq.n	80025b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002568:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1e      	ldr	r2, [pc, #120]	; (80025e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d101      	bne.n	8002578 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002576:	e001      	b.n	800257c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002578:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4919      	ldr	r1, [pc, #100]	; (80025e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002584:	428b      	cmp	r3, r1
 8002586:	d101      	bne.n	800258c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002588:	4b18      	ldr	r3, [pc, #96]	; (80025ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800258a:	e001      	b.n	8002590 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800258c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002590:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002594:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f043 0202 	orr.w	r2, r3, #2
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff fdfa 	bl	80021a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d136      	bne.n	8002628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f003 0320 	and.w	r3, r3, #32
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d031      	beq.n	8002628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d101      	bne.n	80025d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80025ce:	4b07      	ldr	r3, [pc, #28]	; (80025ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80025d0:	e001      	b.n	80025d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80025d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4902      	ldr	r1, [pc, #8]	; (80025e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80025de:	428b      	cmp	r3, r1
 80025e0:	d106      	bne.n	80025f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80025e2:	4b02      	ldr	r3, [pc, #8]	; (80025ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80025e4:	e006      	b.n	80025f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80025e6:	bf00      	nop
 80025e8:	40003800 	.word	0x40003800
 80025ec:	40003400 	.word	0x40003400
 80025f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025f8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002608:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	f043 0204 	orr.w	r2, r3, #4
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff fdc0 	bl	80021a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002624:	e000      	b.n	8002628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002626:	bf00      	nop
}
 8002628:	bf00      	nop
 800262a:	3720      	adds	r7, #32
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	1c99      	adds	r1, r3, #2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6251      	str	r1, [r2, #36]	; 0x24
 8002656:	881a      	ldrh	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d113      	bne.n	800269e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002684:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d106      	bne.n	800269e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ffc9 	bl	8002630 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	1c99      	adds	r1, r3, #2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6251      	str	r1, [r2, #36]	; 0x24
 80026ba:	8819      	ldrh	r1, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <I2SEx_TxISR_I2SExt+0x90>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d101      	bne.n	80026ca <I2SEx_TxISR_I2SExt+0x22>
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <I2SEx_TxISR_I2SExt+0x94>)
 80026c8:	e001      	b.n	80026ce <I2SEx_TxISR_I2SExt+0x26>
 80026ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026ce:	460a      	mov	r2, r1
 80026d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d121      	bne.n	800272e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a12      	ldr	r2, [pc, #72]	; (8002738 <I2SEx_TxISR_I2SExt+0x90>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d101      	bne.n	80026f8 <I2SEx_TxISR_I2SExt+0x50>
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <I2SEx_TxISR_I2SExt+0x94>)
 80026f6:	e001      	b.n	80026fc <I2SEx_TxISR_I2SExt+0x54>
 80026f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	490d      	ldr	r1, [pc, #52]	; (8002738 <I2SEx_TxISR_I2SExt+0x90>)
 8002704:	428b      	cmp	r3, r1
 8002706:	d101      	bne.n	800270c <I2SEx_TxISR_I2SExt+0x64>
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <I2SEx_TxISR_I2SExt+0x94>)
 800270a:	e001      	b.n	8002710 <I2SEx_TxISR_I2SExt+0x68>
 800270c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002710:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002714:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d106      	bne.n	800272e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ff81 	bl	8002630 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40003800 	.word	0x40003800
 800273c:	40003400 	.word	0x40003400

08002740 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68d8      	ldr	r0, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	1c99      	adds	r1, r3, #2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002758:	b282      	uxth	r2, r0
 800275a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d113      	bne.n	800279c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002782:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ff4a 	bl	8002630 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a20      	ldr	r2, [pc, #128]	; (8002834 <I2SEx_RxISR_I2SExt+0x90>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d101      	bne.n	80027ba <I2SEx_RxISR_I2SExt+0x16>
 80027b6:	4b20      	ldr	r3, [pc, #128]	; (8002838 <I2SEx_RxISR_I2SExt+0x94>)
 80027b8:	e001      	b.n	80027be <I2SEx_RxISR_I2SExt+0x1a>
 80027ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027be:	68d8      	ldr	r0, [r3, #12]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	1c99      	adds	r1, r3, #2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80027ca:	b282      	uxth	r2, r0
 80027cc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d121      	bne.n	800282a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a12      	ldr	r2, [pc, #72]	; (8002834 <I2SEx_RxISR_I2SExt+0x90>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d101      	bne.n	80027f4 <I2SEx_RxISR_I2SExt+0x50>
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <I2SEx_RxISR_I2SExt+0x94>)
 80027f2:	e001      	b.n	80027f8 <I2SEx_RxISR_I2SExt+0x54>
 80027f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	490d      	ldr	r1, [pc, #52]	; (8002834 <I2SEx_RxISR_I2SExt+0x90>)
 8002800:	428b      	cmp	r3, r1
 8002802:	d101      	bne.n	8002808 <I2SEx_RxISR_I2SExt+0x64>
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <I2SEx_RxISR_I2SExt+0x94>)
 8002806:	e001      	b.n	800280c <I2SEx_RxISR_I2SExt+0x68>
 8002808:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800280c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002810:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002816:	b29b      	uxth	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d106      	bne.n	800282a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ff03 	bl	8002630 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40003800 	.word	0x40003800
 8002838:	40003400 	.word	0x40003400

0800283c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800283c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800283e:	b08f      	sub	sp, #60	; 0x3c
 8002840:	af0a      	add	r7, sp, #40	; 0x28
 8002842:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e10f      	b.n	8002a6e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d106      	bne.n	800286e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f005 fda7 	bl	80083bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2203      	movs	r2, #3
 8002872:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d102      	bne.n	8002888 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f002 fbf6 	bl	800507e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	687e      	ldr	r6, [r7, #4]
 800289a:	466d      	mov	r5, sp
 800289c:	f106 0410 	add.w	r4, r6, #16
 80028a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80028b0:	1d33      	adds	r3, r6, #4
 80028b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028b4:	6838      	ldr	r0, [r7, #0]
 80028b6:	f002 facd 	bl	8004e54 <USB_CoreInit>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0d0      	b.n	8002a6e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f002 fbe4 	bl	80050a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d8:	2300      	movs	r3, #0
 80028da:	73fb      	strb	r3, [r7, #15]
 80028dc:	e04a      	b.n	8002974 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028de:	7bfa      	ldrb	r2, [r7, #15]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	333d      	adds	r3, #61	; 0x3d
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028f2:	7bfa      	ldrb	r2, [r7, #15]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	333c      	adds	r3, #60	; 0x3c
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	b298      	uxth	r0, r3
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	3344      	adds	r3, #68	; 0x44
 800291a:	4602      	mov	r2, r0
 800291c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800291e:	7bfa      	ldrb	r2, [r7, #15]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	3340      	adds	r3, #64	; 0x40
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3348      	adds	r3, #72	; 0x48
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	334c      	adds	r3, #76	; 0x4c
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	3354      	adds	r3, #84	; 0x54
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	3301      	adds	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
 8002974:	7bfa      	ldrb	r2, [r7, #15]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	429a      	cmp	r2, r3
 800297c:	d3af      	bcc.n	80028de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800297e:	2300      	movs	r3, #0
 8002980:	73fb      	strb	r3, [r7, #15]
 8002982:	e044      	b.n	8002a0e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029b0:	7bfa      	ldrb	r2, [r7, #15]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
 8002a0e:	7bfa      	ldrb	r2, [r7, #15]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d3b5      	bcc.n	8002984 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	603b      	str	r3, [r7, #0]
 8002a1e:	687e      	ldr	r6, [r7, #4]
 8002a20:	466d      	mov	r5, sp
 8002a22:	f106 0410 	add.w	r4, r6, #16
 8002a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a32:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a36:	1d33      	adds	r3, r6, #4
 8002a38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a3a:	6838      	ldr	r0, [r7, #0]
 8002a3c:	f002 fb7c 	bl	8005138 <USB_DevInit>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d005      	beq.n	8002a52 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e00d      	b.n	8002a6e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f003 fccb 	bl	8006402 <USB_DevDisconnect>

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a76 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_PCD_Start+0x1c>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e020      	b.n	8002ad4 <HAL_PCD_Start+0x5e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d109      	bne.n	8002ab6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d005      	beq.n	8002ab6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f002 face 	bl	800505c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f003 fc7b 	bl	80063c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b08d      	sub	sp, #52	; 0x34
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f003 fd39 	bl	800656a <USB_GetMode>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f040 848a 	bne.w	8003414 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f003 fc9d 	bl	8006444 <USB_ReadInterrupts>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 8480 	beq.w	8003412 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f003 fc8a 	bl	8006444 <USB_ReadInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d107      	bne.n	8002b4a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f002 0202 	and.w	r2, r2, #2
 8002b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f003 fc78 	bl	8006444 <USB_ReadInterrupts>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b10      	cmp	r3, #16
 8002b5c:	d161      	bne.n	8002c22 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699a      	ldr	r2, [r3, #24]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0210 	bic.w	r2, r2, #16
 8002b6c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	f003 020f 	and.w	r2, r3, #15
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	4413      	add	r3, r2
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	0c5b      	lsrs	r3, r3, #17
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d124      	bne.n	8002be4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d035      	beq.n	8002c12 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	6a38      	ldr	r0, [r7, #32]
 8002bba:	f003 faaf 	bl	800611c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bca:	441a      	add	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	6a1a      	ldr	r2, [r3, #32]
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	091b      	lsrs	r3, r3, #4
 8002bd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bdc:	441a      	add	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	621a      	str	r2, [r3, #32]
 8002be2:	e016      	b.n	8002c12 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	0c5b      	lsrs	r3, r3, #17
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	2b06      	cmp	r3, #6
 8002bee:	d110      	bne.n	8002c12 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bf6:	2208      	movs	r2, #8
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6a38      	ldr	r0, [r7, #32]
 8002bfc:	f003 fa8e 	bl	800611c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	6a1a      	ldr	r2, [r3, #32]
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	091b      	lsrs	r3, r3, #4
 8002c08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c0c:	441a      	add	r2, r3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699a      	ldr	r2, [r3, #24]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0210 	orr.w	r2, r2, #16
 8002c20:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f003 fc0c 	bl	8006444 <USB_ReadInterrupts>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c36:	f040 80a7 	bne.w	8002d88 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 fc11 	bl	800646a <USB_ReadDevAllOutEpInterrupt>
 8002c48:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c4a:	e099      	b.n	8002d80 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 808e 	beq.w	8002d74 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f003 fc35 	bl	80064d2 <USB_ReadDevOutEPInterrupt>
 8002c68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00c      	beq.n	8002c8e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c80:	461a      	mov	r2, r3
 8002c82:	2301      	movs	r3, #1
 8002c84:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 feab 	bl	80039e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00c      	beq.n	8002cb2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2308      	movs	r3, #8
 8002ca8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002caa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 ff81 	bl	8003bb4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2310      	movs	r3, #16
 8002ccc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d030      	beq.n	8002d3a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce0:	2b80      	cmp	r3, #128	; 0x80
 8002ce2:	d109      	bne.n	8002cf8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	69fa      	ldr	r2, [r7, #28]
 8002cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cf6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	78db      	ldrb	r3, [r3, #3]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d108      	bne.n	8002d28 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	4619      	mov	r1, r3
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f005 fc5e 	bl	80085e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d34:	461a      	mov	r2, r3
 8002d36:	2302      	movs	r3, #2
 8002d38:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d50:	461a      	mov	r2, r3
 8002d52:	2320      	movs	r3, #32
 8002d54:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d009      	beq.n	8002d74 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	015a      	lsls	r2, r3, #5
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d72:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	3301      	adds	r3, #1
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	085b      	lsrs	r3, r3, #1
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f47f af62 	bne.w	8002c4c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f003 fb59 	bl	8006444 <USB_ReadInterrupts>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d9c:	f040 80db 	bne.w	8002f56 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f003 fb7a 	bl	800649e <USB_ReadDevAllInEpInterrupt>
 8002daa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002db0:	e0cd      	b.n	8002f4e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 80c2 	beq.w	8002f42 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f003 fba0 	bl	800650e <USB_ReadDevInEPInterrupt>
 8002dce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d057      	beq.n	8002e8a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	2201      	movs	r2, #1
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69f9      	ldr	r1, [r7, #28]
 8002df6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d132      	bne.n	8002e7e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	334c      	adds	r3, #76	; 0x4c
 8002e28:	6819      	ldr	r1, [r3, #0]
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2e:	4613      	mov	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4403      	add	r3, r0
 8002e38:	3348      	adds	r3, #72	; 0x48
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4419      	add	r1, r3
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4403      	add	r3, r0
 8002e4c:	334c      	adds	r3, #76	; 0x4c
 8002e4e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d113      	bne.n	8002e7e <HAL_PCD_IRQHandler+0x3a2>
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	440b      	add	r3, r1
 8002e64:	3354      	adds	r3, #84	; 0x54
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d108      	bne.n	8002e7e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e76:	461a      	mov	r2, r3
 8002e78:	2101      	movs	r1, #1
 8002e7a:	f003 fba7 	bl	80065cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	4619      	mov	r1, r3
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f005 fb28 	bl	80084da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2308      	movs	r3, #8
 8002ea4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	2310      	movs	r3, #16
 8002ec0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2340      	movs	r3, #64	; 0x40
 8002edc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d023      	beq.n	8002f30 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ee8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eea:	6a38      	ldr	r0, [r7, #32]
 8002eec:	f002 fa88 	bl	8005400 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	3338      	adds	r3, #56	; 0x38
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	4413      	add	r3, r2
 8002f00:	3304      	adds	r3, #4
 8002f02:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	78db      	ldrb	r3, [r3, #3]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d108      	bne.n	8002f1e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	4619      	mov	r1, r3
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f005 fb75 	bl	8008608 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 fcc3 	bl	80038c8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	3301      	adds	r3, #1
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f47f af2e 	bne.w	8002db2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f003 fa72 	bl	8006444 <USB_ReadInterrupts>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f6a:	d122      	bne.n	8002fb2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	69fa      	ldr	r2, [r7, #28]
 8002f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d108      	bne.n	8002f9c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f92:	2100      	movs	r1, #0
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 feab 	bl	8003cf0 <HAL_PCDEx_LPM_Callback>
 8002f9a:	e002      	b.n	8002fa2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f005 fb13 	bl	80085c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002fb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f003 fa44 	bl	8006444 <USB_ReadInterrupts>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fc6:	d112      	bne.n	8002fee <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d102      	bne.n	8002fde <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f005 facf 	bl	800857c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002fec:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f003 fa26 	bl	8006444 <USB_ReadInterrupts>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003002:	f040 80b7 	bne.w	8003174 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003014:	f023 0301 	bic.w	r3, r3, #1
 8003018:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2110      	movs	r1, #16
 8003020:	4618      	mov	r0, r3
 8003022:	f002 f9ed 	bl	8005400 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003026:	2300      	movs	r3, #0
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800302a:	e046      	b.n	80030ba <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	4413      	add	r3, r2
 8003034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003038:	461a      	mov	r2, r3
 800303a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800303e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	4413      	add	r3, r2
 8003048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003050:	0151      	lsls	r1, r2, #5
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	440a      	add	r2, r1
 8003056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800305a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800305e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	4413      	add	r3, r2
 8003068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306c:	461a      	mov	r2, r3
 800306e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003072:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	4413      	add	r3, r2
 800307c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003084:	0151      	lsls	r1, r2, #5
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	440a      	add	r2, r1
 800308a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800308e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003092:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030a4:	0151      	lsls	r1, r2, #5
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	440a      	add	r2, r1
 80030aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030b2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b6:	3301      	adds	r3, #1
 80030b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d3b3      	bcc.n	800302c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030d2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80030d6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d016      	beq.n	800310e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030f0:	f043 030b 	orr.w	r3, r3, #11
 80030f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003106:	f043 030b 	orr.w	r3, r3, #11
 800310a:	6453      	str	r3, [r2, #68]	; 0x44
 800310c:	e015      	b.n	800313a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003120:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003124:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003134:	f043 030b 	orr.w	r3, r3, #11
 8003138:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003148:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800314c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800315e:	461a      	mov	r2, r3
 8003160:	f003 fa34 	bl	80065cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003172:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f003 f963 	bl	8006444 <USB_ReadInterrupts>
 800317e:	4603      	mov	r3, r0
 8003180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003188:	d124      	bne.n	80031d4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f003 f9f9 	bl	8006586 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f002 f9ae 	bl	80054fa <USB_GetDevSpeed>
 800319e:	4603      	mov	r3, r0
 80031a0:	461a      	mov	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681c      	ldr	r4, [r3, #0]
 80031aa:	f001 fa11 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 80031ae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	4620      	mov	r0, r4
 80031ba:	f001 fead 	bl	8004f18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f005 f9b3 	bl	800852a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80031d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f003 f933 	bl	8006444 <USB_ReadInterrupts>
 80031de:	4603      	mov	r3, r0
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d10a      	bne.n	80031fe <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f005 f990 	bl	800850e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f002 0208 	and.w	r2, r2, #8
 80031fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f003 f91e 	bl	8006444 <USB_ReadInterrupts>
 8003208:	4603      	mov	r3, r0
 800320a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320e:	2b80      	cmp	r3, #128	; 0x80
 8003210:	d122      	bne.n	8003258 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800321e:	2301      	movs	r3, #1
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
 8003222:	e014      	b.n	800324e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d105      	bne.n	8003248 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	b2db      	uxtb	r3, r3
 8003240:	4619      	mov	r1, r3
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fb0f 	bl	8003866 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	3301      	adds	r3, #1
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003254:	429a      	cmp	r2, r3
 8003256:	d3e5      	bcc.n	8003224 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f003 f8f1 	bl	8006444 <USB_ReadInterrupts>
 8003262:	4603      	mov	r3, r0
 8003264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800326c:	d13b      	bne.n	80032e6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800326e:	2301      	movs	r3, #1
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
 8003272:	e02b      	b.n	80032cc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	3340      	adds	r3, #64	; 0x40
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d115      	bne.n	80032c6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800329a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800329c:	2b00      	cmp	r3, #0
 800329e:	da12      	bge.n	80032c6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a4:	4613      	mov	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	333f      	adds	r3, #63	; 0x3f
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	4619      	mov	r1, r3
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fad0 	bl	8003866 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	3301      	adds	r3, #1
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d3ce      	bcc.n	8003274 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695a      	ldr	r2, [r3, #20]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80032e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f003 f8aa 	bl	8006444 <USB_ReadInterrupts>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032fa:	d155      	bne.n	80033a8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032fc:	2301      	movs	r3, #1
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003300:	e045      	b.n	800338e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	4413      	add	r3, r2
 800330a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003316:	4613      	mov	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d12e      	bne.n	8003388 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800332a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800332c:	2b00      	cmp	r3, #0
 800332e:	da2b      	bge.n	8003388 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800333c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003340:	429a      	cmp	r2, r3
 8003342:	d121      	bne.n	8003388 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003348:	4613      	mov	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003356:	2201      	movs	r2, #1
 8003358:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003380:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003384:	6053      	str	r3, [r2, #4]
            break;
 8003386:	e007      	b.n	8003398 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	3301      	adds	r3, #1
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003394:	429a      	cmp	r2, r3
 8003396:	d3b4      	bcc.n	8003302 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80033a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f003 f849 	bl	8006444 <USB_ReadInterrupts>
 80033b2:	4603      	mov	r3, r0
 80033b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033bc:	d10a      	bne.n	80033d4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f005 f934 	bl	800862c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f003 f833 	bl	8006444 <USB_ReadInterrupts>
 80033de:	4603      	mov	r3, r0
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d115      	bne.n	8003414 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f005 f924 	bl	8008648 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6859      	ldr	r1, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	430a      	orrs	r2, r1
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	e000      	b.n	8003414 <HAL_PCD_IRQHandler+0x938>
      return;
 8003412:	bf00      	nop
    }
  }
}
 8003414:	3734      	adds	r7, #52	; 0x34
 8003416:	46bd      	mov	sp, r7
 8003418:	bd90      	pop	{r4, r7, pc}

0800341a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	460b      	mov	r3, r1
 8003424:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_PCD_SetAddress+0x1a>
 8003430:	2302      	movs	r3, #2
 8003432:	e013      	b.n	800345c <HAL_PCD_SetAddress+0x42>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	78fa      	ldrb	r2, [r7, #3]
 8003440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	4611      	mov	r1, r2
 800344c:	4618      	mov	r0, r3
 800344e:	f002 ff91 	bl	8006374 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	4608      	mov	r0, r1
 800346e:	4611      	mov	r1, r2
 8003470:	461a      	mov	r2, r3
 8003472:	4603      	mov	r3, r0
 8003474:	70fb      	strb	r3, [r7, #3]
 8003476:	460b      	mov	r3, r1
 8003478:	803b      	strh	r3, [r7, #0]
 800347a:	4613      	mov	r3, r2
 800347c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003482:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003486:	2b00      	cmp	r3, #0
 8003488:	da0f      	bge.n	80034aa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800348a:	78fb      	ldrb	r3, [r7, #3]
 800348c:	f003 020f 	and.w	r2, r3, #15
 8003490:	4613      	mov	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4413      	add	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	3338      	adds	r3, #56	; 0x38
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	3304      	adds	r3, #4
 80034a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2201      	movs	r2, #1
 80034a6:	705a      	strb	r2, [r3, #1]
 80034a8:	e00f      	b.n	80034ca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	f003 020f 	and.w	r2, r3, #15
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	4413      	add	r3, r2
 80034c0:	3304      	adds	r3, #4
 80034c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034d6:	883a      	ldrh	r2, [r7, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	78ba      	ldrb	r2, [r7, #2]
 80034e0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	785b      	ldrb	r3, [r3, #1]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d004      	beq.n	80034f4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034f4:	78bb      	ldrb	r3, [r7, #2]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d102      	bne.n	8003500 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_PCD_EP_Open+0xaa>
 800350a:	2302      	movs	r3, #2
 800350c:	e00e      	b.n	800352c <HAL_PCD_EP_Open+0xc8>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68f9      	ldr	r1, [r7, #12]
 800351c:	4618      	mov	r0, r3
 800351e:	f002 f811 	bl	8005544 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800352a:	7afb      	ldrb	r3, [r7, #11]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003540:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003544:	2b00      	cmp	r3, #0
 8003546:	da0f      	bge.n	8003568 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	f003 020f 	and.w	r2, r3, #15
 800354e:	4613      	mov	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	3338      	adds	r3, #56	; 0x38
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	3304      	adds	r3, #4
 800355e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	705a      	strb	r2, [r3, #1]
 8003566:	e00f      	b.n	8003588 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	f003 020f 	and.w	r2, r3, #15
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	4413      	add	r3, r2
 800357e:	3304      	adds	r3, #4
 8003580:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	b2da      	uxtb	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_PCD_EP_Close+0x6e>
 800359e:	2302      	movs	r3, #2
 80035a0:	e00e      	b.n	80035c0 <HAL_PCD_EP_Close+0x8c>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68f9      	ldr	r1, [r7, #12]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f002 f84f 	bl	8005654 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	460b      	mov	r3, r1
 80035d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035d8:	7afb      	ldrb	r3, [r7, #11]
 80035da:	f003 020f 	and.w	r2, r3, #15
 80035de:	4613      	mov	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4413      	add	r3, r2
 80035ee:	3304      	adds	r3, #4
 80035f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2200      	movs	r2, #0
 8003602:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2200      	movs	r2, #0
 8003608:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800360a:	7afb      	ldrb	r3, [r7, #11]
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	b2da      	uxtb	r2, r3
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d102      	bne.n	8003624 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003624:	7afb      	ldrb	r3, [r7, #11]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	2b00      	cmp	r3, #0
 800362c:	d109      	bne.n	8003642 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	6979      	ldr	r1, [r7, #20]
 800363c:	f002 fb2e 	bl	8005c9c <USB_EP0StartXfer>
 8003640:	e008      	b.n	8003654 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	6979      	ldr	r1, [r7, #20]
 8003650:	f002 f8dc 	bl	800580c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b086      	sub	sp, #24
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	460b      	mov	r3, r1
 800366c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800366e:	7afb      	ldrb	r3, [r7, #11]
 8003670:	f003 020f 	and.w	r2, r3, #15
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	3338      	adds	r3, #56	; 0x38
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4413      	add	r3, r2
 8003682:	3304      	adds	r3, #4
 8003684:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2200      	movs	r2, #0
 8003696:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2201      	movs	r2, #1
 800369c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800369e:	7afb      	ldrb	r3, [r7, #11]
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d102      	bne.n	80036b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036b8:	7afb      	ldrb	r3, [r7, #11]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	6979      	ldr	r1, [r7, #20]
 80036d0:	f002 fae4 	bl	8005c9c <USB_EP0StartXfer>
 80036d4:	e008      	b.n	80036e8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	6979      	ldr	r1, [r7, #20]
 80036e4:	f002 f892 	bl	800580c <USB_EPStartXfer>
  }

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	f003 020f 	and.w	r2, r3, #15
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	429a      	cmp	r2, r3
 800370a:	d901      	bls.n	8003710 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e050      	b.n	80037b2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003714:	2b00      	cmp	r3, #0
 8003716:	da0f      	bge.n	8003738 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	f003 020f 	and.w	r2, r3, #15
 800371e:	4613      	mov	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	3338      	adds	r3, #56	; 0x38
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	4413      	add	r3, r2
 800372c:	3304      	adds	r3, #4
 800372e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	705a      	strb	r2, [r3, #1]
 8003736:	e00d      	b.n	8003754 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	3304      	adds	r3, #4
 800374c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800375a:	78fb      	ldrb	r3, [r7, #3]
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	b2da      	uxtb	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_PCD_EP_SetStall+0x82>
 8003770:	2302      	movs	r3, #2
 8003772:	e01e      	b.n	80037b2 <HAL_PCD_EP_SetStall+0xc0>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68f9      	ldr	r1, [r7, #12]
 8003782:	4618      	mov	r0, r3
 8003784:	f002 fd22 	bl	80061cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003788:	78fb      	ldrb	r3, [r7, #3]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10a      	bne.n	80037a8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	b2d9      	uxtb	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037a2:	461a      	mov	r2, r3
 80037a4:	f002 ff12 	bl	80065cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	460b      	mov	r3, r1
 80037c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	f003 020f 	and.w	r2, r3, #15
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d901      	bls.n	80037d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e042      	b.n	800385e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	da0f      	bge.n	8003800 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	f003 020f 	and.w	r2, r3, #15
 80037e6:	4613      	mov	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	3338      	adds	r3, #56	; 0x38
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	4413      	add	r3, r2
 80037f4:	3304      	adds	r3, #4
 80037f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	705a      	strb	r2, [r3, #1]
 80037fe:	e00f      	b.n	8003820 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	f003 020f 	and.w	r2, r3, #15
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	4413      	add	r3, r2
 8003816:	3304      	adds	r3, #4
 8003818:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003826:	78fb      	ldrb	r3, [r7, #3]
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	b2da      	uxtb	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_PCD_EP_ClrStall+0x86>
 800383c:	2302      	movs	r3, #2
 800383e:	e00e      	b.n	800385e <HAL_PCD_EP_ClrStall+0xa4>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68f9      	ldr	r1, [r7, #12]
 800384e:	4618      	mov	r0, r3
 8003850:	f002 fd2a 	bl	80062a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b084      	sub	sp, #16
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	460b      	mov	r3, r1
 8003870:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003872:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003876:	2b00      	cmp	r3, #0
 8003878:	da0c      	bge.n	8003894 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	f003 020f 	and.w	r2, r3, #15
 8003880:	4613      	mov	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	3338      	adds	r3, #56	; 0x38
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	4413      	add	r3, r2
 800388e:	3304      	adds	r3, #4
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	e00c      	b.n	80038ae <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	f003 020f 	and.w	r2, r3, #15
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	4413      	add	r3, r2
 80038aa:	3304      	adds	r3, #4
 80038ac:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68f9      	ldr	r1, [r7, #12]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f002 fb49 	bl	8005f4c <USB_EPStopXfer>
 80038ba:	4603      	mov	r3, r0
 80038bc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80038be:	7afb      	ldrb	r3, [r7, #11]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	; 0x28
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	3338      	adds	r3, #56	; 0x38
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	4413      	add	r3, r2
 80038ec:	3304      	adds	r3, #4
 80038ee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a1a      	ldr	r2, [r3, #32]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d901      	bls.n	8003900 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e06c      	b.n	80039da <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	699a      	ldr	r2, [r3, #24]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	429a      	cmp	r2, r3
 8003914:	d902      	bls.n	800391c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	3303      	adds	r3, #3
 8003920:	089b      	lsrs	r3, r3, #2
 8003922:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003924:	e02b      	b.n	800397e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	69fa      	ldr	r2, [r7, #28]
 8003938:	429a      	cmp	r2, r3
 800393a:	d902      	bls.n	8003942 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	3303      	adds	r3, #3
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6919      	ldr	r1, [r3, #16]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800395a:	b2db      	uxtb	r3, r3
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	4603      	mov	r3, r0
 8003960:	6978      	ldr	r0, [r7, #20]
 8003962:	f002 fb9d 	bl	80060a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	441a      	add	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a1a      	ldr	r2, [r3, #32]
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	441a      	add	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	b29b      	uxth	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	429a      	cmp	r2, r3
 8003992:	d809      	bhi.n	80039a8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a1a      	ldr	r2, [r3, #32]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800399c:	429a      	cmp	r2, r3
 800399e:	d203      	bcs.n	80039a8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1be      	bne.n	8003926 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	699a      	ldr	r2, [r3, #24]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d811      	bhi.n	80039d8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	2201      	movs	r2, #1
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	43db      	mvns	r3, r3
 80039ce:	6939      	ldr	r1, [r7, #16]
 80039d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039d4:	4013      	ands	r3, r2
 80039d6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3720      	adds	r7, #32
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	333c      	adds	r3, #60	; 0x3c
 80039fc:	3304      	adds	r3, #4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d17b      	bne.n	8003b12 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d015      	beq.n	8003a50 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	4a61      	ldr	r2, [pc, #388]	; (8003bac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	f240 80b9 	bls.w	8003ba0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80b3 	beq.w	8003ba0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a46:	461a      	mov	r2, r3
 8003a48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a4c:	6093      	str	r3, [r2, #8]
 8003a4e:	e0a7      	b.n	8003ba0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d009      	beq.n	8003a6e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a66:	461a      	mov	r2, r3
 8003a68:	2320      	movs	r3, #32
 8003a6a:	6093      	str	r3, [r2, #8]
 8003a6c:	e098      	b.n	8003ba0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f040 8093 	bne.w	8003ba0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	4a4b      	ldr	r2, [pc, #300]	; (8003bac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d90f      	bls.n	8003aa2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a98:	461a      	mov	r2, r3
 8003a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a9e:	6093      	str	r3, [r2, #8]
 8003aa0:	e07e      	b.n	8003ba0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	0159      	lsls	r1, r3, #5
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	440b      	add	r3, r1
 8003ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ace:	1ad2      	subs	r2, r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d114      	bne.n	8003b04 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003aec:	461a      	mov	r2, r3
 8003aee:	2101      	movs	r1, #1
 8003af0:	f002 fd6c 	bl	80065cc <USB_EP0_OutStart>
 8003af4:	e006      	b.n	8003b04 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	441a      	add	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	4619      	mov	r1, r3
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f004 fcca 	bl	80084a4 <HAL_PCD_DataOutStageCallback>
 8003b10:	e046      	b.n	8003ba0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	4a26      	ldr	r2, [pc, #152]	; (8003bb0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d124      	bne.n	8003b64 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b30:	461a      	mov	r2, r3
 8003b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b36:	6093      	str	r3, [r2, #8]
 8003b38:	e032      	b.n	8003ba0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b50:	461a      	mov	r2, r3
 8003b52:	2320      	movs	r3, #32
 8003b54:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f004 fca1 	bl	80084a4 <HAL_PCD_DataOutStageCallback>
 8003b62:	e01d      	b.n	8003ba0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d114      	bne.n	8003b94 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d108      	bne.n	8003b94 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	2100      	movs	r1, #0
 8003b90:	f002 fd1c 	bl	80065cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	4619      	mov	r1, r3
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f004 fc82 	bl	80084a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3720      	adds	r7, #32
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	4f54300a 	.word	0x4f54300a
 8003bb0:	4f54310a 	.word	0x4f54310a

08003bb4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	333c      	adds	r3, #60	; 0x3c
 8003bcc:	3304      	adds	r3, #4
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <PCD_EP_OutSetupPacket_int+0x88>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d90e      	bls.n	8003c08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d009      	beq.n	8003c08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c00:	461a      	mov	r2, r3
 8003c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f004 fc39 	bl	8008480 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <PCD_EP_OutSetupPacket_int+0x88>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d90c      	bls.n	8003c30 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d108      	bne.n	8003c30 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	f002 fcce 	bl	80065cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	4f54300a 	.word	0x4f54300a

08003c40 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	70fb      	strb	r3, [r7, #3]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d107      	bne.n	8003c6e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c5e:	883b      	ldrh	r3, [r7, #0]
 8003c60:	0419      	lsls	r1, r3, #16
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c6c:	e028      	b.n	8003cc0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	0c1b      	lsrs	r3, r3, #16
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	4413      	add	r3, r2
 8003c7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	73fb      	strb	r3, [r7, #15]
 8003c80:	e00d      	b.n	8003c9e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	3340      	adds	r3, #64	; 0x40
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	0c1b      	lsrs	r3, r3, #16
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	4413      	add	r3, r2
 8003c96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
 8003c9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d3ec      	bcc.n	8003c82 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ca8:	883b      	ldrh	r3, [r7, #0]
 8003caa:	0418      	lsls	r0, r3, #16
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6819      	ldr	r1, [r3, #0]
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	4302      	orrs	r2, r0
 8003cb8:	3340      	adds	r3, #64	; 0x40
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	887a      	ldrh	r2, [r7, #2]
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e267      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d075      	beq.n	8003e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d26:	4b88      	ldr	r3, [pc, #544]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d00c      	beq.n	8003d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d32:	4b85      	ldr	r3, [pc, #532]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d112      	bne.n	8003d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d3e:	4b82      	ldr	r3, [pc, #520]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d4a:	d10b      	bne.n	8003d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4c:	4b7e      	ldr	r3, [pc, #504]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d05b      	beq.n	8003e10 <HAL_RCC_OscConfig+0x108>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d157      	bne.n	8003e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e242      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d6c:	d106      	bne.n	8003d7c <HAL_RCC_OscConfig+0x74>
 8003d6e:	4b76      	ldr	r3, [pc, #472]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a75      	ldr	r2, [pc, #468]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e01d      	b.n	8003db8 <HAL_RCC_OscConfig+0xb0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d84:	d10c      	bne.n	8003da0 <HAL_RCC_OscConfig+0x98>
 8003d86:	4b70      	ldr	r3, [pc, #448]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a6f      	ldr	r2, [pc, #444]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4b6d      	ldr	r3, [pc, #436]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a6c      	ldr	r2, [pc, #432]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCC_OscConfig+0xb0>
 8003da0:	4b69      	ldr	r3, [pc, #420]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a68      	ldr	r2, [pc, #416]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	4b66      	ldr	r3, [pc, #408]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a65      	ldr	r2, [pc, #404]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d013      	beq.n	8003de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7fd fd74 	bl	80018ac <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7fd fd70 	bl	80018ac <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e207      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dda:	4b5b      	ldr	r3, [pc, #364]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0xc0>
 8003de6:	e014      	b.n	8003e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fd fd60 	bl	80018ac <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df0:	f7fd fd5c 	bl	80018ac <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	; 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e1f3      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e02:	4b51      	ldr	r3, [pc, #324]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0xe8>
 8003e0e:	e000      	b.n	8003e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d063      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e1e:	4b4a      	ldr	r3, [pc, #296]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2a:	4b47      	ldr	r3, [pc, #284]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d11c      	bne.n	8003e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e36:	4b44      	ldr	r3, [pc, #272]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d116      	bne.n	8003e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e42:	4b41      	ldr	r3, [pc, #260]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_RCC_OscConfig+0x152>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d001      	beq.n	8003e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e1c7      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5a:	4b3b      	ldr	r3, [pc, #236]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4937      	ldr	r1, [pc, #220]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6e:	e03a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d020      	beq.n	8003eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e78:	4b34      	ldr	r3, [pc, #208]	; (8003f4c <HAL_RCC_OscConfig+0x244>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7e:	f7fd fd15 	bl	80018ac <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e86:	f7fd fd11 	bl	80018ac <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e1a8      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e98:	4b2b      	ldr	r3, [pc, #172]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea4:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4925      	ldr	r1, [pc, #148]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	600b      	str	r3, [r1, #0]
 8003eb8:	e015      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eba:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <HAL_RCC_OscConfig+0x244>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fd fcf4 	bl	80018ac <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec8:	f7fd fcf0 	bl	80018ac <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e187      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eda:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d036      	beq.n	8003f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d016      	beq.n	8003f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efa:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <HAL_RCC_OscConfig+0x248>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f00:	f7fd fcd4 	bl	80018ac <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f08:	f7fd fcd0 	bl	80018ac <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e167      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x200>
 8003f26:	e01b      	b.n	8003f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f28:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <HAL_RCC_OscConfig+0x248>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2e:	f7fd fcbd 	bl	80018ac <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f34:	e00e      	b.n	8003f54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f36:	f7fd fcb9 	bl	80018ac <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d907      	bls.n	8003f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e150      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	42470000 	.word	0x42470000
 8003f50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f54:	4b88      	ldr	r3, [pc, #544]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1ea      	bne.n	8003f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8097 	beq.w	800409c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f72:	4b81      	ldr	r3, [pc, #516]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10f      	bne.n	8003f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	4b7d      	ldr	r3, [pc, #500]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	4a7c      	ldr	r2, [pc, #496]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f8e:	4b7a      	ldr	r3, [pc, #488]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9e:	4b77      	ldr	r3, [pc, #476]	; (800417c <HAL_RCC_OscConfig+0x474>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d118      	bne.n	8003fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003faa:	4b74      	ldr	r3, [pc, #464]	; (800417c <HAL_RCC_OscConfig+0x474>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a73      	ldr	r2, [pc, #460]	; (800417c <HAL_RCC_OscConfig+0x474>)
 8003fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fb6:	f7fd fc79 	bl	80018ac <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbe:	f7fd fc75 	bl	80018ac <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e10c      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd0:	4b6a      	ldr	r3, [pc, #424]	; (800417c <HAL_RCC_OscConfig+0x474>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d106      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x2ea>
 8003fe4:	4b64      	ldr	r3, [pc, #400]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe8:	4a63      	ldr	r2, [pc, #396]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff0:	e01c      	b.n	800402c <HAL_RCC_OscConfig+0x324>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b05      	cmp	r3, #5
 8003ff8:	d10c      	bne.n	8004014 <HAL_RCC_OscConfig+0x30c>
 8003ffa:	4b5f      	ldr	r3, [pc, #380]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	4a5e      	ldr	r2, [pc, #376]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004000:	f043 0304 	orr.w	r3, r3, #4
 8004004:	6713      	str	r3, [r2, #112]	; 0x70
 8004006:	4b5c      	ldr	r3, [pc, #368]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400a:	4a5b      	ldr	r2, [pc, #364]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	6713      	str	r3, [r2, #112]	; 0x70
 8004012:	e00b      	b.n	800402c <HAL_RCC_OscConfig+0x324>
 8004014:	4b58      	ldr	r3, [pc, #352]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004018:	4a57      	ldr	r2, [pc, #348]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	6713      	str	r3, [r2, #112]	; 0x70
 8004020:	4b55      	ldr	r3, [pc, #340]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	4a54      	ldr	r2, [pc, #336]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004026:	f023 0304 	bic.w	r3, r3, #4
 800402a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d015      	beq.n	8004060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004034:	f7fd fc3a 	bl	80018ac <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403a:	e00a      	b.n	8004052 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800403c:	f7fd fc36 	bl	80018ac <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	; 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e0cb      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004052:	4b49      	ldr	r3, [pc, #292]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0ee      	beq.n	800403c <HAL_RCC_OscConfig+0x334>
 800405e:	e014      	b.n	800408a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004060:	f7fd fc24 	bl	80018ac <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004066:	e00a      	b.n	800407e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004068:	f7fd fc20 	bl	80018ac <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f241 3288 	movw	r2, #5000	; 0x1388
 8004076:	4293      	cmp	r3, r2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e0b5      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800407e:	4b3e      	ldr	r3, [pc, #248]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1ee      	bne.n	8004068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800408a:	7dfb      	ldrb	r3, [r7, #23]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d105      	bne.n	800409c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004090:	4b39      	ldr	r3, [pc, #228]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	4a38      	ldr	r2, [pc, #224]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 80a1 	beq.w	80041e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040a6:	4b34      	ldr	r3, [pc, #208]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d05c      	beq.n	800416c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d141      	bne.n	800413e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ba:	4b31      	ldr	r3, [pc, #196]	; (8004180 <HAL_RCC_OscConfig+0x478>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7fd fbf4 	bl	80018ac <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fd fbf0 	bl	80018ac <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e087      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	4b27      	ldr	r3, [pc, #156]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69da      	ldr	r2, [r3, #28]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	019b      	lsls	r3, r3, #6
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	085b      	lsrs	r3, r3, #1
 80040fe:	3b01      	subs	r3, #1
 8004100:	041b      	lsls	r3, r3, #16
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	061b      	lsls	r3, r3, #24
 800410a:	491b      	ldr	r1, [pc, #108]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004110:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <HAL_RCC_OscConfig+0x478>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004116:	f7fd fbc9 	bl	80018ac <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800411e:	f7fd fbc5 	bl	80018ac <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e05c      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f0      	beq.n	800411e <HAL_RCC_OscConfig+0x416>
 800413c:	e054      	b.n	80041e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413e:	4b10      	ldr	r3, [pc, #64]	; (8004180 <HAL_RCC_OscConfig+0x478>)
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004144:	f7fd fbb2 	bl	80018ac <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800414c:	f7fd fbae 	bl	80018ac <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e045      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <HAL_RCC_OscConfig+0x470>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x444>
 800416a:	e03d      	b.n	80041e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d107      	bne.n	8004184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e038      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
 8004178:	40023800 	.word	0x40023800
 800417c:	40007000 	.word	0x40007000
 8004180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004184:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <HAL_RCC_OscConfig+0x4ec>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d028      	beq.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d121      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d11a      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041b4:	4013      	ands	r3, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041bc:	4293      	cmp	r3, r2
 80041be:	d111      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	3b01      	subs	r3, #1
 80041ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d107      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40023800 	.word	0x40023800

080041f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0cc      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800420c:	4b68      	ldr	r3, [pc, #416]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d90c      	bls.n	8004234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	4b65      	ldr	r3, [pc, #404]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004222:	4b63      	ldr	r3, [pc, #396]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0b8      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d020      	beq.n	8004282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800424c:	4b59      	ldr	r3, [pc, #356]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	4a58      	ldr	r2, [pc, #352]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004264:	4b53      	ldr	r3, [pc, #332]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	4a52      	ldr	r2, [pc, #328]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800426e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004270:	4b50      	ldr	r3, [pc, #320]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	494d      	ldr	r1, [pc, #308]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d044      	beq.n	8004318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	4b47      	ldr	r3, [pc, #284]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d119      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e07f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d003      	beq.n	80042b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b6:	4b3f      	ldr	r3, [pc, #252]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e06f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c6:	4b3b      	ldr	r3, [pc, #236]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e067      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042d6:	4b37      	ldr	r3, [pc, #220]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f023 0203 	bic.w	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4934      	ldr	r1, [pc, #208]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042e8:	f7fd fae0 	bl	80018ac <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f0:	f7fd fadc 	bl	80018ac <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e04f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004306:	4b2b      	ldr	r3, [pc, #172]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 020c 	and.w	r2, r3, #12
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	429a      	cmp	r2, r3
 8004316:	d1eb      	bne.n	80042f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004318:	4b25      	ldr	r3, [pc, #148]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d20c      	bcs.n	8004340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004326:	4b22      	ldr	r3, [pc, #136]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800432e:	4b20      	ldr	r3, [pc, #128]	; (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d001      	beq.n	8004340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e032      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800434c:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4916      	ldr	r1, [pc, #88]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800436a:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	490e      	ldr	r1, [pc, #56]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800437e:	f000 f821 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 8004382:	4602      	mov	r2, r0
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	490a      	ldr	r1, [pc, #40]	; (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	5ccb      	ldrb	r3, [r1, r3]
 8004392:	fa22 f303 	lsr.w	r3, r2, r3
 8004396:	4a09      	ldr	r2, [pc, #36]	; (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800439a:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <HAL_RCC_ClockConfig+0x1c8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fd fa40 	bl	8001824 <HAL_InitTick>

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40023c00 	.word	0x40023c00
 80043b4:	40023800 	.word	0x40023800
 80043b8:	08008a90 	.word	0x08008a90
 80043bc:	20000000 	.word	0x20000000
 80043c0:	20000004 	.word	0x20000004

080043c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c8:	b094      	sub	sp, #80	; 0x50
 80043ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	647b      	str	r3, [r7, #68]	; 0x44
 80043d0:	2300      	movs	r3, #0
 80043d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d4:	2300      	movs	r3, #0
 80043d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043dc:	4b79      	ldr	r3, [pc, #484]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 030c 	and.w	r3, r3, #12
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d00d      	beq.n	8004404 <HAL_RCC_GetSysClockFreq+0x40>
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	f200 80e1 	bhi.w	80045b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x34>
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_GetSysClockFreq+0x3a>
 80043f6:	e0db      	b.n	80045b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043f8:	4b73      	ldr	r3, [pc, #460]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80043fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80043fc:	e0db      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043fe:	4b73      	ldr	r3, [pc, #460]	; (80045cc <HAL_RCC_GetSysClockFreq+0x208>)
 8004400:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004402:	e0d8      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004404:	4b6f      	ldr	r3, [pc, #444]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800440c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800440e:	4b6d      	ldr	r3, [pc, #436]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d063      	beq.n	80044e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800441a:	4b6a      	ldr	r3, [pc, #424]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	099b      	lsrs	r3, r3, #6
 8004420:	2200      	movs	r2, #0
 8004422:	63bb      	str	r3, [r7, #56]	; 0x38
 8004424:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442c:	633b      	str	r3, [r7, #48]	; 0x30
 800442e:	2300      	movs	r3, #0
 8004430:	637b      	str	r3, [r7, #52]	; 0x34
 8004432:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004436:	4622      	mov	r2, r4
 8004438:	462b      	mov	r3, r5
 800443a:	f04f 0000 	mov.w	r0, #0
 800443e:	f04f 0100 	mov.w	r1, #0
 8004442:	0159      	lsls	r1, r3, #5
 8004444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004448:	0150      	lsls	r0, r2, #5
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4621      	mov	r1, r4
 8004450:	1a51      	subs	r1, r2, r1
 8004452:	6139      	str	r1, [r7, #16]
 8004454:	4629      	mov	r1, r5
 8004456:	eb63 0301 	sbc.w	r3, r3, r1
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004468:	4659      	mov	r1, fp
 800446a:	018b      	lsls	r3, r1, #6
 800446c:	4651      	mov	r1, sl
 800446e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004472:	4651      	mov	r1, sl
 8004474:	018a      	lsls	r2, r1, #6
 8004476:	4651      	mov	r1, sl
 8004478:	ebb2 0801 	subs.w	r8, r2, r1
 800447c:	4659      	mov	r1, fp
 800447e:	eb63 0901 	sbc.w	r9, r3, r1
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800448e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004496:	4690      	mov	r8, r2
 8004498:	4699      	mov	r9, r3
 800449a:	4623      	mov	r3, r4
 800449c:	eb18 0303 	adds.w	r3, r8, r3
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	462b      	mov	r3, r5
 80044a4:	eb49 0303 	adc.w	r3, r9, r3
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044b6:	4629      	mov	r1, r5
 80044b8:	024b      	lsls	r3, r1, #9
 80044ba:	4621      	mov	r1, r4
 80044bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044c0:	4621      	mov	r1, r4
 80044c2:	024a      	lsls	r2, r1, #9
 80044c4:	4610      	mov	r0, r2
 80044c6:	4619      	mov	r1, r3
 80044c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ca:	2200      	movs	r2, #0
 80044cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044d4:	f7fc fa6e 	bl	80009b4 <__aeabi_uldivmod>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4613      	mov	r3, r2
 80044de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e0:	e058      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e2:	4b38      	ldr	r3, [pc, #224]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	2200      	movs	r2, #0
 80044ea:	4618      	mov	r0, r3
 80044ec:	4611      	mov	r1, r2
 80044ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044f2:	623b      	str	r3, [r7, #32]
 80044f4:	2300      	movs	r3, #0
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
 80044f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044fc:	4642      	mov	r2, r8
 80044fe:	464b      	mov	r3, r9
 8004500:	f04f 0000 	mov.w	r0, #0
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	0159      	lsls	r1, r3, #5
 800450a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800450e:	0150      	lsls	r0, r2, #5
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4641      	mov	r1, r8
 8004516:	ebb2 0a01 	subs.w	sl, r2, r1
 800451a:	4649      	mov	r1, r9
 800451c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800452c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004530:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004534:	ebb2 040a 	subs.w	r4, r2, sl
 8004538:	eb63 050b 	sbc.w	r5, r3, fp
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	00eb      	lsls	r3, r5, #3
 8004546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800454a:	00e2      	lsls	r2, r4, #3
 800454c:	4614      	mov	r4, r2
 800454e:	461d      	mov	r5, r3
 8004550:	4643      	mov	r3, r8
 8004552:	18e3      	adds	r3, r4, r3
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	464b      	mov	r3, r9
 8004558:	eb45 0303 	adc.w	r3, r5, r3
 800455c:	607b      	str	r3, [r7, #4]
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800456a:	4629      	mov	r1, r5
 800456c:	028b      	lsls	r3, r1, #10
 800456e:	4621      	mov	r1, r4
 8004570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004574:	4621      	mov	r1, r4
 8004576:	028a      	lsls	r2, r1, #10
 8004578:	4610      	mov	r0, r2
 800457a:	4619      	mov	r1, r3
 800457c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800457e:	2200      	movs	r2, #0
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	61fa      	str	r2, [r7, #28]
 8004584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004588:	f7fc fa14 	bl	80009b4 <__aeabi_uldivmod>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4613      	mov	r3, r2
 8004592:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004594:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	0c1b      	lsrs	r3, r3, #16
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	3301      	adds	r3, #1
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80045a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045ae:	e002      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045b0:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80045b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3750      	adds	r7, #80	; 0x50
 80045bc:	46bd      	mov	sp, r7
 80045be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800
 80045c8:	00f42400 	.word	0x00f42400
 80045cc:	007a1200 	.word	0x007a1200

080045d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d4:	4b03      	ldr	r3, [pc, #12]	; (80045e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045d6:	681b      	ldr	r3, [r3, #0]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000000 	.word	0x20000000

080045e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800460c:	2b00      	cmp	r3, #0
 800460e:	d035      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004610:	4b62      	ldr	r3, [pc, #392]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004616:	f7fd f949 	bl	80018ac <HAL_GetTick>
 800461a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800461e:	f7fd f945 	bl	80018ac <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e0b0      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004630:	4b5b      	ldr	r3, [pc, #364]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1f0      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	019a      	lsls	r2, r3, #6
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	071b      	lsls	r3, r3, #28
 8004648:	4955      	ldr	r1, [pc, #340]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004650:	4b52      	ldr	r3, [pc, #328]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004652:	2201      	movs	r2, #1
 8004654:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004656:	f7fd f929 	bl	80018ac <HAL_GetTick>
 800465a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800465c:	e008      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800465e:	f7fd f925 	bl	80018ac <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e090      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004670:	4b4b      	ldr	r3, [pc, #300]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8083 	beq.w	8004790 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	4b44      	ldr	r3, [pc, #272]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	4a43      	ldr	r2, [pc, #268]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004698:	6413      	str	r3, [r2, #64]	; 0x40
 800469a:	4b41      	ldr	r3, [pc, #260]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046a6:	4b3f      	ldr	r3, [pc, #252]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a3e      	ldr	r2, [pc, #248]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046b2:	f7fd f8fb 	bl	80018ac <HAL_GetTick>
 80046b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046b8:	e008      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046ba:	f7fd f8f7 	bl	80018ac <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e062      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046cc:	4b35      	ldr	r3, [pc, #212]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0f0      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046d8:	4b31      	ldr	r3, [pc, #196]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d02f      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d028      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046f6:	4b2a      	ldr	r3, [pc, #168]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004700:	4b29      	ldr	r3, [pc, #164]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004702:	2201      	movs	r2, #1
 8004704:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004706:	4b28      	ldr	r3, [pc, #160]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800470c:	4a24      	ldr	r2, [pc, #144]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004712:	4b23      	ldr	r3, [pc, #140]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b01      	cmp	r3, #1
 800471c:	d114      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800471e:	f7fd f8c5 	bl	80018ac <HAL_GetTick>
 8004722:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004724:	e00a      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004726:	f7fd f8c1 	bl	80018ac <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	f241 3288 	movw	r2, #5000	; 0x1388
 8004734:	4293      	cmp	r3, r2
 8004736:	d901      	bls.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e02a      	b.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473c:	4b18      	ldr	r3, [pc, #96]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0ee      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004750:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004754:	d10d      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004756:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476a:	490d      	ldr	r1, [pc, #52]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800476c:	4313      	orrs	r3, r2
 800476e:	608b      	str	r3, [r1, #8]
 8004770:	e005      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004772:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	4a0a      	ldr	r2, [pc, #40]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004778:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800477c:	6093      	str	r3, [r2, #8]
 800477e:	4b08      	ldr	r3, [pc, #32]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004780:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800478a:	4905      	ldr	r1, [pc, #20]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800478c:	4313      	orrs	r3, r2
 800478e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	42470068 	.word	0x42470068
 80047a0:	40023800 	.word	0x40023800
 80047a4:	40007000 	.word	0x40007000
 80047a8:	42470e40 	.word	0x42470e40

080047ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d13e      	bne.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80047ca:	4b23      	ldr	r3, [pc, #140]	; (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d12f      	bne.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80047e0:	4b1e      	ldr	r3, [pc, #120]	; (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047e2:	617b      	str	r3, [r7, #20]
          break;
 80047e4:	e02f      	b.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047e6:	4b1c      	ldr	r3, [pc, #112]	; (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047f2:	d108      	bne.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047f4:	4b18      	ldr	r3, [pc, #96]	; (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047fc:	4a18      	ldr	r2, [pc, #96]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	e007      	b.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004806:	4b14      	ldr	r3, [pc, #80]	; (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800480e:	4a15      	ldr	r2, [pc, #84]	; (8004864 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004810:	fbb2 f3f3 	udiv	r3, r2, r3
 8004814:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004816:	4b10      	ldr	r3, [pc, #64]	; (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800481c:	099b      	lsrs	r3, r3, #6
 800481e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	fb02 f303 	mul.w	r3, r2, r3
 8004828:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800482a:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800482c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004830:	0f1b      	lsrs	r3, r3, #28
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	617b      	str	r3, [r7, #20]
          break;
 800483e:	e002      	b.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
          break;
 8004844:	bf00      	nop
        }
      }
      break;
 8004846:	bf00      	nop
    }
  }
  return frequency;
 8004848:	697b      	ldr	r3, [r7, #20]
}
 800484a:	4618      	mov	r0, r3
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40023800 	.word	0x40023800
 800485c:	00bb8000 	.word	0x00bb8000
 8004860:	007a1200 	.word	0x007a1200
 8004864:	00f42400 	.word	0x00f42400

08004868 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e07b      	b.n	8004972 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	2b00      	cmp	r3, #0
 8004880:	d108      	bne.n	8004894 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800488a:	d009      	beq.n	80048a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	61da      	str	r2, [r3, #28]
 8004892:	e005      	b.n	80048a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fc fea8 	bl	8001610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004924:	ea42 0103 	orr.w	r1, r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	0c1b      	lsrs	r3, r3, #16
 800493e:	f003 0104 	and.w	r1, r3, #4
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	f003 0210 	and.w	r2, r3, #16
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69da      	ldr	r2, [r3, #28]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004960:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b08c      	sub	sp, #48	; 0x30
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
 8004986:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004988:	2301      	movs	r3, #1
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_SPI_TransmitReceive+0x26>
 800499c:	2302      	movs	r3, #2
 800499e:	e18a      	b.n	8004cb6 <HAL_SPI_TransmitReceive+0x33c>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049a8:	f7fc ff80 	bl	80018ac <HAL_GetTick>
 80049ac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80049be:	887b      	ldrh	r3, [r7, #2]
 80049c0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d00f      	beq.n	80049ea <HAL_SPI_TransmitReceive+0x70>
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049d0:	d107      	bne.n	80049e2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d103      	bne.n	80049e2 <HAL_SPI_TransmitReceive+0x68>
 80049da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d003      	beq.n	80049ea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80049e2:	2302      	movs	r3, #2
 80049e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049e8:	e15b      	b.n	8004ca2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <HAL_SPI_TransmitReceive+0x82>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <HAL_SPI_TransmitReceive+0x82>
 80049f6:	887b      	ldrh	r3, [r7, #2]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d103      	bne.n	8004a04 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a02:	e14e      	b.n	8004ca2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d003      	beq.n	8004a18 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2205      	movs	r2, #5
 8004a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	887a      	ldrh	r2, [r7, #2]
 8004a28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	887a      	ldrh	r2, [r7, #2]
 8004a2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	887a      	ldrh	r2, [r7, #2]
 8004a3a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	887a      	ldrh	r2, [r7, #2]
 8004a40:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a58:	2b40      	cmp	r3, #64	; 0x40
 8004a5a:	d007      	beq.n	8004a6c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a74:	d178      	bne.n	8004b68 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <HAL_SPI_TransmitReceive+0x10a>
 8004a7e:	8b7b      	ldrh	r3, [r7, #26]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d166      	bne.n	8004b52 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	881a      	ldrh	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a94:	1c9a      	adds	r2, r3, #2
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aa8:	e053      	b.n	8004b52 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d11b      	bne.n	8004af0 <HAL_SPI_TransmitReceive+0x176>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d016      	beq.n	8004af0 <HAL_SPI_TransmitReceive+0x176>
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d113      	bne.n	8004af0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	881a      	ldrh	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad8:	1c9a      	adds	r2, r3, #2
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d119      	bne.n	8004b32 <HAL_SPI_TransmitReceive+0x1b8>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d014      	beq.n	8004b32 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	b292      	uxth	r2, r2
 8004b14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1a:	1c9a      	adds	r2, r3, #2
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b32:	f7fc febb 	bl	80018ac <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d807      	bhi.n	8004b52 <HAL_SPI_TransmitReceive+0x1d8>
 8004b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b48:	d003      	beq.n	8004b52 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b50:	e0a7      	b.n	8004ca2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1a6      	bne.n	8004aaa <HAL_SPI_TransmitReceive+0x130>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1a1      	bne.n	8004aaa <HAL_SPI_TransmitReceive+0x130>
 8004b66:	e07c      	b.n	8004c62 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <HAL_SPI_TransmitReceive+0x1fc>
 8004b70:	8b7b      	ldrh	r3, [r7, #26]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d16b      	bne.n	8004c4e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	330c      	adds	r3, #12
 8004b80:	7812      	ldrb	r2, [r2, #0]
 8004b82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b9c:	e057      	b.n	8004c4e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d11c      	bne.n	8004be6 <HAL_SPI_TransmitReceive+0x26c>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d017      	beq.n	8004be6 <HAL_SPI_TransmitReceive+0x26c>
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d114      	bne.n	8004be6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	330c      	adds	r3, #12
 8004bc6:	7812      	ldrb	r2, [r2, #0]
 8004bc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004be2:	2300      	movs	r3, #0
 8004be4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d119      	bne.n	8004c28 <HAL_SPI_TransmitReceive+0x2ae>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d014      	beq.n	8004c28 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c24:	2301      	movs	r3, #1
 8004c26:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c28:	f7fc fe40 	bl	80018ac <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d803      	bhi.n	8004c40 <HAL_SPI_TransmitReceive+0x2c6>
 8004c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3e:	d102      	bne.n	8004c46 <HAL_SPI_TransmitReceive+0x2cc>
 8004c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d103      	bne.n	8004c4e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c4c:	e029      	b.n	8004ca2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1a2      	bne.n	8004b9e <HAL_SPI_TransmitReceive+0x224>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d19d      	bne.n	8004b9e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 f8b2 	bl	8004dd0 <SPI_EndRxTxTransaction>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d006      	beq.n	8004c80 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c7e:	e010      	b.n	8004ca2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10b      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	e000      	b.n	8004ca2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ca0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3730      	adds	r7, #48	; 0x30
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cd0:	f7fc fdec 	bl	80018ac <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	1a9b      	subs	r3, r3, r2
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	4413      	add	r3, r2
 8004cde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ce0:	f7fc fde4 	bl	80018ac <HAL_GetTick>
 8004ce4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ce6:	4b39      	ldr	r3, [pc, #228]	; (8004dcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	015b      	lsls	r3, r3, #5
 8004cec:	0d1b      	lsrs	r3, r3, #20
 8004cee:	69fa      	ldr	r2, [r7, #28]
 8004cf0:	fb02 f303 	mul.w	r3, r2, r3
 8004cf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cf6:	e054      	b.n	8004da2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	d050      	beq.n	8004da2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d00:	f7fc fdd4 	bl	80018ac <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	69fa      	ldr	r2, [r7, #28]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d902      	bls.n	8004d16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d13d      	bne.n	8004d92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d2e:	d111      	bne.n	8004d54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d38:	d004      	beq.n	8004d44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d42:	d107      	bne.n	8004d54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d5c:	d10f      	bne.n	8004d7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e017      	b.n	8004dc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4013      	ands	r3, r2
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	bf0c      	ite	eq
 8004db2:	2301      	moveq	r3, #1
 8004db4:	2300      	movne	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d19b      	bne.n	8004cf8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3720      	adds	r7, #32
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000000 	.word	0x20000000

08004dd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ddc:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <SPI_EndRxTxTransaction+0x7c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a1b      	ldr	r2, [pc, #108]	; (8004e50 <SPI_EndRxTxTransaction+0x80>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	0d5b      	lsrs	r3, r3, #21
 8004de8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004dec:	fb02 f303 	mul.w	r3, r2, r3
 8004df0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dfa:	d112      	bne.n	8004e22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2200      	movs	r2, #0
 8004e04:	2180      	movs	r1, #128	; 0x80
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f7ff ff5a 	bl	8004cc0 <SPI_WaitFlagStateUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d016      	beq.n	8004e40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	f043 0220 	orr.w	r2, r3, #32
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e00f      	b.n	8004e42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e38:	2b80      	cmp	r3, #128	; 0x80
 8004e3a:	d0f2      	beq.n	8004e22 <SPI_EndRxTxTransaction+0x52>
 8004e3c:	e000      	b.n	8004e40 <SPI_EndRxTxTransaction+0x70>
        break;
 8004e3e:	bf00      	nop
  }

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	20000000 	.word	0x20000000
 8004e50:	165e9f81 	.word	0x165e9f81

08004e54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e54:	b084      	sub	sp, #16
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	f107 001c 	add.w	r0, r7, #28
 8004e62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d122      	bne.n	8004eb2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d105      	bne.n	8004ea6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f001 fbee 	bl	8006688 <USB_CoreReset>
 8004eac:	4603      	mov	r3, r0
 8004eae:	73fb      	strb	r3, [r7, #15]
 8004eb0:	e01a      	b.n	8004ee8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f001 fbe2 	bl	8006688 <USB_CoreReset>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d106      	bne.n	8004edc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	639a      	str	r2, [r3, #56]	; 0x38
 8004eda:	e005      	b.n	8004ee8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d10b      	bne.n	8004f06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f043 0206 	orr.w	r2, r3, #6
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f043 0220 	orr.w	r2, r3, #32
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f12:	b004      	add	sp, #16
 8004f14:	4770      	bx	lr
	...

08004f18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d165      	bne.n	8004ff8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4a41      	ldr	r2, [pc, #260]	; (8005034 <USB_SetTurnaroundTime+0x11c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d906      	bls.n	8004f42 <USB_SetTurnaroundTime+0x2a>
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4a40      	ldr	r2, [pc, #256]	; (8005038 <USB_SetTurnaroundTime+0x120>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d202      	bcs.n	8004f42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004f3c:	230f      	movs	r3, #15
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	e062      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4a3c      	ldr	r2, [pc, #240]	; (8005038 <USB_SetTurnaroundTime+0x120>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d306      	bcc.n	8004f58 <USB_SetTurnaroundTime+0x40>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4a3b      	ldr	r2, [pc, #236]	; (800503c <USB_SetTurnaroundTime+0x124>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d202      	bcs.n	8004f58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004f52:	230e      	movs	r3, #14
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	e057      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4a38      	ldr	r2, [pc, #224]	; (800503c <USB_SetTurnaroundTime+0x124>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d306      	bcc.n	8004f6e <USB_SetTurnaroundTime+0x56>
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4a37      	ldr	r2, [pc, #220]	; (8005040 <USB_SetTurnaroundTime+0x128>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d202      	bcs.n	8004f6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f68:	230d      	movs	r3, #13
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	e04c      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4a33      	ldr	r2, [pc, #204]	; (8005040 <USB_SetTurnaroundTime+0x128>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d306      	bcc.n	8004f84 <USB_SetTurnaroundTime+0x6c>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	4a32      	ldr	r2, [pc, #200]	; (8005044 <USB_SetTurnaroundTime+0x12c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d802      	bhi.n	8004f84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f7e:	230c      	movs	r3, #12
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	e041      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4a2f      	ldr	r2, [pc, #188]	; (8005044 <USB_SetTurnaroundTime+0x12c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d906      	bls.n	8004f9a <USB_SetTurnaroundTime+0x82>
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4a2e      	ldr	r2, [pc, #184]	; (8005048 <USB_SetTurnaroundTime+0x130>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d802      	bhi.n	8004f9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f94:	230b      	movs	r3, #11
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	e036      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4a2a      	ldr	r2, [pc, #168]	; (8005048 <USB_SetTurnaroundTime+0x130>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d906      	bls.n	8004fb0 <USB_SetTurnaroundTime+0x98>
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4a29      	ldr	r2, [pc, #164]	; (800504c <USB_SetTurnaroundTime+0x134>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d802      	bhi.n	8004fb0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004faa:	230a      	movs	r3, #10
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	e02b      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4a26      	ldr	r2, [pc, #152]	; (800504c <USB_SetTurnaroundTime+0x134>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d906      	bls.n	8004fc6 <USB_SetTurnaroundTime+0xae>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4a25      	ldr	r2, [pc, #148]	; (8005050 <USB_SetTurnaroundTime+0x138>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d202      	bcs.n	8004fc6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004fc0:	2309      	movs	r3, #9
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	e020      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4a21      	ldr	r2, [pc, #132]	; (8005050 <USB_SetTurnaroundTime+0x138>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d306      	bcc.n	8004fdc <USB_SetTurnaroundTime+0xc4>
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	4a20      	ldr	r2, [pc, #128]	; (8005054 <USB_SetTurnaroundTime+0x13c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d802      	bhi.n	8004fdc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	e015      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <USB_SetTurnaroundTime+0x13c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d906      	bls.n	8004ff2 <USB_SetTurnaroundTime+0xda>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4a1c      	ldr	r2, [pc, #112]	; (8005058 <USB_SetTurnaroundTime+0x140>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d202      	bcs.n	8004ff2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004fec:	2307      	movs	r3, #7
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	e00a      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ff2:	2306      	movs	r3, #6
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	e007      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d102      	bne.n	8005004 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ffe:	2309      	movs	r3, #9
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	e001      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005004:	2309      	movs	r3, #9
 8005006:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	029b      	lsls	r3, r3, #10
 800501c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005020:	431a      	orrs	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	00d8acbf 	.word	0x00d8acbf
 8005038:	00e4e1c0 	.word	0x00e4e1c0
 800503c:	00f42400 	.word	0x00f42400
 8005040:	01067380 	.word	0x01067380
 8005044:	011a499f 	.word	0x011a499f
 8005048:	01312cff 	.word	0x01312cff
 800504c:	014ca43f 	.word	0x014ca43f
 8005050:	016e3600 	.word	0x016e3600
 8005054:	01a6ab1f 	.word	0x01a6ab1f
 8005058:	01e84800 	.word	0x01e84800

0800505c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f043 0201 	orr.w	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f023 0201 	bic.w	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d115      	bne.n	80050ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050ce:	2001      	movs	r0, #1
 80050d0:	f7fc fbf8 	bl	80018c4 <HAL_Delay>
      ms++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3301      	adds	r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f001 fa45 	bl	800656a <USB_GetMode>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d01e      	beq.n	8005124 <USB_SetCurrentMode+0x84>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b31      	cmp	r3, #49	; 0x31
 80050ea:	d9f0      	bls.n	80050ce <USB_SetCurrentMode+0x2e>
 80050ec:	e01a      	b.n	8005124 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d115      	bne.n	8005120 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005100:	2001      	movs	r0, #1
 8005102:	f7fc fbdf 	bl	80018c4 <HAL_Delay>
      ms++;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3301      	adds	r3, #1
 800510a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f001 fa2c 	bl	800656a <USB_GetMode>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <USB_SetCurrentMode+0x84>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b31      	cmp	r3, #49	; 0x31
 800511c:	d9f0      	bls.n	8005100 <USB_SetCurrentMode+0x60>
 800511e:	e001      	b.n	8005124 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e005      	b.n	8005130 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b32      	cmp	r3, #50	; 0x32
 8005128:	d101      	bne.n	800512e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005138:	b084      	sub	sp, #16
 800513a:	b580      	push	{r7, lr}
 800513c:	b086      	sub	sp, #24
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005152:	2300      	movs	r3, #0
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	e009      	b.n	800516c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	3340      	adds	r3, #64	; 0x40
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	2200      	movs	r2, #0
 8005164:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	3301      	adds	r3, #1
 800516a:	613b      	str	r3, [r7, #16]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	2b0e      	cmp	r3, #14
 8005170:	d9f2      	bls.n	8005158 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005174:	2b00      	cmp	r3, #0
 8005176:	d11c      	bne.n	80051b2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005186:	f043 0302 	orr.w	r3, r3, #2
 800518a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	639a      	str	r2, [r3, #56]	; 0x38
 80051b0:	e00b      	b.n	80051ca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051d0:	461a      	mov	r2, r3
 80051d2:	2300      	movs	r3, #0
 80051d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051dc:	4619      	mov	r1, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e4:	461a      	mov	r2, r3
 80051e6:	680b      	ldr	r3, [r1, #0]
 80051e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d10c      	bne.n	800520a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d104      	bne.n	8005200 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051f6:	2100      	movs	r1, #0
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f965 	bl	80054c8 <USB_SetDevSpeed>
 80051fe:	e008      	b.n	8005212 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005200:	2101      	movs	r1, #1
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f960 	bl	80054c8 <USB_SetDevSpeed>
 8005208:	e003      	b.n	8005212 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800520a:	2103      	movs	r1, #3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f95b 	bl	80054c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005212:	2110      	movs	r1, #16
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f8f3 	bl	8005400 <USB_FlushTxFifo>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f91f 	bl	8005468 <USB_FlushRxFifo>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523a:	461a      	mov	r2, r3
 800523c:	2300      	movs	r3, #0
 800523e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005246:	461a      	mov	r2, r3
 8005248:	2300      	movs	r3, #0
 800524a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005252:	461a      	mov	r2, r3
 8005254:	2300      	movs	r3, #0
 8005256:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005258:	2300      	movs	r3, #0
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	e043      	b.n	80052e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005274:	d118      	bne.n	80052a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005288:	461a      	mov	r2, r3
 800528a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	e013      	b.n	80052ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529e:	461a      	mov	r2, r3
 80052a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	e008      	b.n	80052ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b4:	461a      	mov	r2, r3
 80052b6:	2300      	movs	r3, #0
 80052b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c6:	461a      	mov	r2, r3
 80052c8:	2300      	movs	r3, #0
 80052ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d8:	461a      	mov	r2, r3
 80052da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	3301      	adds	r3, #1
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d3b7      	bcc.n	800525e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ee:	2300      	movs	r3, #0
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	e043      	b.n	800537c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005306:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800530a:	d118      	bne.n	800533e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10a      	bne.n	8005328 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531e:	461a      	mov	r2, r3
 8005320:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	e013      	b.n	8005350 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005334:	461a      	mov	r2, r3
 8005336:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	e008      	b.n	8005350 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534a:	461a      	mov	r2, r3
 800534c:	2300      	movs	r3, #0
 800534e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535c:	461a      	mov	r2, r3
 800535e:	2300      	movs	r3, #0
 8005360:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536e:	461a      	mov	r2, r3
 8005370:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005374:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	3301      	adds	r3, #1
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	429a      	cmp	r2, r3
 8005382:	d3b7      	bcc.n	80052f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005396:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80053a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f043 0210 	orr.w	r2, r3, #16
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699a      	ldr	r2, [r3, #24]
 80053bc:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <USB_DevInit+0x2c4>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	f043 0208 	orr.w	r2, r3, #8
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d107      	bne.n	80053ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053e4:	f043 0304 	orr.w	r3, r3, #4
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053f8:	b004      	add	sp, #16
 80053fa:	4770      	bx	lr
 80053fc:	803c3800 	.word	0x803c3800

08005400 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3301      	adds	r3, #1
 8005412:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4a13      	ldr	r2, [pc, #76]	; (8005464 <USB_FlushTxFifo+0x64>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d901      	bls.n	8005420 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e01b      	b.n	8005458 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	daf2      	bge.n	800540e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	019b      	lsls	r3, r3, #6
 8005430:	f043 0220 	orr.w	r2, r3, #32
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3301      	adds	r3, #1
 800543c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a08      	ldr	r2, [pc, #32]	; (8005464 <USB_FlushTxFifo+0x64>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d901      	bls.n	800544a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e006      	b.n	8005458 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0320 	and.w	r3, r3, #32
 8005452:	2b20      	cmp	r3, #32
 8005454:	d0f0      	beq.n	8005438 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	00030d40 	.word	0x00030d40

08005468 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3301      	adds	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4a11      	ldr	r2, [pc, #68]	; (80054c4 <USB_FlushRxFifo+0x5c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e018      	b.n	80054b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	daf2      	bge.n	8005474 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2210      	movs	r2, #16
 8005496:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3301      	adds	r3, #1
 800549c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4a08      	ldr	r2, [pc, #32]	; (80054c4 <USB_FlushRxFifo+0x5c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d901      	bls.n	80054aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e006      	b.n	80054b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0310 	and.w	r3, r3, #16
 80054b2:	2b10      	cmp	r3, #16
 80054b4:	d0f0      	beq.n	8005498 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	00030d40 	.word	0x00030d40

080054c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	78fb      	ldrb	r3, [r7, #3]
 80054e2:	68f9      	ldr	r1, [r7, #12]
 80054e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054e8:	4313      	orrs	r3, r2
 80054ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b087      	sub	sp, #28
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 0306 	and.w	r3, r3, #6
 8005512:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d102      	bne.n	8005520 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800551a:	2300      	movs	r3, #0
 800551c:	75fb      	strb	r3, [r7, #23]
 800551e:	e00a      	b.n	8005536 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b02      	cmp	r3, #2
 8005524:	d002      	beq.n	800552c <USB_GetDevSpeed+0x32>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b06      	cmp	r3, #6
 800552a:	d102      	bne.n	8005532 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800552c:	2302      	movs	r3, #2
 800552e:	75fb      	strb	r3, [r7, #23]
 8005530:	e001      	b.n	8005536 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005532:	230f      	movs	r3, #15
 8005534:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005536:	7dfb      	ldrb	r3, [r7, #23]
}
 8005538:	4618      	mov	r0, r3
 800553a:	371c      	adds	r7, #28
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	785b      	ldrb	r3, [r3, #1]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d13a      	bne.n	80055d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005566:	69da      	ldr	r2, [r3, #28]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	f003 030f 	and.w	r3, r3, #15
 8005570:	2101      	movs	r1, #1
 8005572:	fa01 f303 	lsl.w	r3, r1, r3
 8005576:	b29b      	uxth	r3, r3
 8005578:	68f9      	ldr	r1, [r7, #12]
 800557a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800557e:	4313      	orrs	r3, r2
 8005580:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d155      	bne.n	8005644 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	791b      	ldrb	r3, [r3, #4]
 80055b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	059b      	lsls	r3, r3, #22
 80055ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055bc:	4313      	orrs	r3, r2
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	e036      	b.n	8005644 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055dc:	69da      	ldr	r2, [r3, #28]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	2101      	movs	r1, #1
 80055e8:	fa01 f303 	lsl.w	r3, r1, r3
 80055ec:	041b      	lsls	r3, r3, #16
 80055ee:	68f9      	ldr	r1, [r7, #12]
 80055f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055f4:	4313      	orrs	r3, r2
 80055f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d11a      	bne.n	8005644 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	791b      	ldrb	r3, [r3, #4]
 8005628:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800562a:	430b      	orrs	r3, r1
 800562c:	4313      	orrs	r3, r2
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	0151      	lsls	r1, r2, #5
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	440a      	add	r2, r1
 8005636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800563a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800563e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005642:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
	...

08005654 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	785b      	ldrb	r3, [r3, #1]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d161      	bne.n	8005734 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005686:	d11f      	bne.n	80056c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	0151      	lsls	r1, r2, #5
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	440a      	add	r2, r1
 800569e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	0151      	lsls	r1, r2, #5
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	440a      	add	r2, r1
 80056be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	f003 030f 	and.w	r3, r3, #15
 80056d8:	2101      	movs	r1, #1
 80056da:	fa01 f303 	lsl.w	r3, r1, r3
 80056de:	b29b      	uxth	r3, r3
 80056e0:	43db      	mvns	r3, r3
 80056e2:	68f9      	ldr	r1, [r7, #12]
 80056e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056e8:	4013      	ands	r3, r2
 80056ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f2:	69da      	ldr	r2, [r3, #28]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	2101      	movs	r1, #1
 80056fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005702:	b29b      	uxth	r3, r3
 8005704:	43db      	mvns	r3, r3
 8005706:	68f9      	ldr	r1, [r7, #12]
 8005708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800570c:	4013      	ands	r3, r2
 800570e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	0159      	lsls	r1, r3, #5
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	440b      	add	r3, r1
 8005726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572a:	4619      	mov	r1, r3
 800572c:	4b35      	ldr	r3, [pc, #212]	; (8005804 <USB_DeactivateEndpoint+0x1b0>)
 800572e:	4013      	ands	r3, r2
 8005730:	600b      	str	r3, [r1, #0]
 8005732:	e060      	b.n	80057f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800574a:	d11f      	bne.n	800578c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	0151      	lsls	r1, r2, #5
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	440a      	add	r2, r1
 8005762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005766:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800576a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	0151      	lsls	r1, r2, #5
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	440a      	add	r2, r1
 8005782:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005786:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800578a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	f003 030f 	and.w	r3, r3, #15
 800579c:	2101      	movs	r1, #1
 800579e:	fa01 f303 	lsl.w	r3, r1, r3
 80057a2:	041b      	lsls	r3, r3, #16
 80057a4:	43db      	mvns	r3, r3
 80057a6:	68f9      	ldr	r1, [r7, #12]
 80057a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057ac:	4013      	ands	r3, r2
 80057ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b6:	69da      	ldr	r2, [r3, #28]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	2101      	movs	r1, #1
 80057c2:	fa01 f303 	lsl.w	r3, r1, r3
 80057c6:	041b      	lsls	r3, r3, #16
 80057c8:	43db      	mvns	r3, r3
 80057ca:	68f9      	ldr	r1, [r7, #12]
 80057cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057d0:	4013      	ands	r3, r2
 80057d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	0159      	lsls	r1, r3, #5
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	440b      	add	r3, r1
 80057ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ee:	4619      	mov	r1, r3
 80057f0:	4b05      	ldr	r3, [pc, #20]	; (8005808 <USB_DeactivateEndpoint+0x1b4>)
 80057f2:	4013      	ands	r3, r2
 80057f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	ec337800 	.word	0xec337800
 8005808:	eff37800 	.word	0xeff37800

0800580c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08a      	sub	sp, #40	; 0x28
 8005810:	af02      	add	r7, sp, #8
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	4613      	mov	r3, r2
 8005818:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	785b      	ldrb	r3, [r3, #1]
 8005828:	2b01      	cmp	r3, #1
 800582a:	f040 815c 	bne.w	8005ae6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d132      	bne.n	800589c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	0151      	lsls	r1, r2, #5
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	440a      	add	r2, r1
 800584c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005850:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005854:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005858:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	440a      	add	r2, r1
 8005870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005874:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005878:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	0151      	lsls	r1, r2, #5
 800588c:	69fa      	ldr	r2, [r7, #28]
 800588e:	440a      	add	r2, r1
 8005890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005894:	0cdb      	lsrs	r3, r3, #19
 8005896:	04db      	lsls	r3, r3, #19
 8005898:	6113      	str	r3, [r2, #16]
 800589a:	e074      	b.n	8005986 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	0151      	lsls	r1, r2, #5
 80058ae:	69fa      	ldr	r2, [r7, #28]
 80058b0:	440a      	add	r2, r1
 80058b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b6:	0cdb      	lsrs	r3, r3, #19
 80058b8:	04db      	lsls	r3, r3, #19
 80058ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	0151      	lsls	r1, r2, #5
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	440a      	add	r2, r1
 80058d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	6999      	ldr	r1, [r3, #24]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	440b      	add	r3, r1
 80058f8:	1e59      	subs	r1, r3, #1
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005902:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005904:	4b9d      	ldr	r3, [pc, #628]	; (8005b7c <USB_EPStartXfer+0x370>)
 8005906:	400b      	ands	r3, r1
 8005908:	69b9      	ldr	r1, [r7, #24]
 800590a:	0148      	lsls	r0, r1, #5
 800590c:	69f9      	ldr	r1, [r7, #28]
 800590e:	4401      	add	r1, r0
 8005910:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005914:	4313      	orrs	r3, r2
 8005916:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005924:	691a      	ldr	r2, [r3, #16]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800592e:	69b9      	ldr	r1, [r7, #24]
 8005930:	0148      	lsls	r0, r1, #5
 8005932:	69f9      	ldr	r1, [r7, #28]
 8005934:	4401      	add	r1, r0
 8005936:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800593a:	4313      	orrs	r3, r2
 800593c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	791b      	ldrb	r3, [r3, #4]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d11f      	bne.n	8005986 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	0151      	lsls	r1, r2, #5
 8005958:	69fa      	ldr	r2, [r7, #28]
 800595a:	440a      	add	r2, r1
 800595c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005960:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005964:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	0151      	lsls	r1, r2, #5
 8005978:	69fa      	ldr	r2, [r7, #28]
 800597a:	440a      	add	r2, r1
 800597c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005980:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005984:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d14b      	bne.n	8005a24 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d009      	beq.n	80059a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a0:	461a      	mov	r2, r3
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	791b      	ldrb	r3, [r3, #4]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d128      	bne.n	8005a02 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d110      	bne.n	80059e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	0151      	lsls	r1, r2, #5
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	440a      	add	r2, r1
 80059d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059de:	6013      	str	r3, [r2, #0]
 80059e0:	e00f      	b.n	8005a02 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	0151      	lsls	r1, r2, #5
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	440a      	add	r2, r1
 80059f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a00:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	0151      	lsls	r1, r2, #5
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	440a      	add	r2, r1
 8005a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	e133      	b.n	8005c8c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	0151      	lsls	r1, r2, #5
 8005a36:	69fa      	ldr	r2, [r7, #28]
 8005a38:	440a      	add	r2, r1
 8005a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a42:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	791b      	ldrb	r3, [r3, #4]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d015      	beq.n	8005a78 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 811b 	beq.w	8005c8c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	2101      	movs	r1, #1
 8005a68:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6c:	69f9      	ldr	r1, [r7, #28]
 8005a6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a72:	4313      	orrs	r3, r2
 8005a74:	634b      	str	r3, [r1, #52]	; 0x34
 8005a76:	e109      	b.n	8005c8c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d110      	bne.n	8005aaa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	0151      	lsls	r1, r2, #5
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	440a      	add	r2, r1
 8005a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	e00f      	b.n	8005aca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	0151      	lsls	r1, r2, #5
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	440a      	add	r2, r1
 8005ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	6919      	ldr	r1, [r3, #16]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	781a      	ldrb	r2, [r3, #0]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	b298      	uxth	r0, r3
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	4603      	mov	r3, r0
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 fade 	bl	80060a0 <USB_WritePacket>
 8005ae4:	e0d2      	b.n	8005c8c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	0151      	lsls	r1, r2, #5
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	440a      	add	r2, r1
 8005afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b00:	0cdb      	lsrs	r3, r3, #19
 8005b02:	04db      	lsls	r3, r3, #19
 8005b04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	0151      	lsls	r1, r2, #5
 8005b18:	69fa      	ldr	r2, [r7, #28]
 8005b1a:	440a      	add	r2, r1
 8005b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d126      	bne.n	8005b80 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b48:	69b9      	ldr	r1, [r7, #24]
 8005b4a:	0148      	lsls	r0, r1, #5
 8005b4c:	69f9      	ldr	r1, [r7, #28]
 8005b4e:	4401      	add	r1, r0
 8005b50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b54:	4313      	orrs	r3, r2
 8005b56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	0151      	lsls	r1, r2, #5
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	440a      	add	r2, r1
 8005b6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b76:	6113      	str	r3, [r2, #16]
 8005b78:	e03a      	b.n	8005bf0 <USB_EPStartXfer+0x3e4>
 8005b7a:	bf00      	nop
 8005b7c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	699a      	ldr	r2, [r3, #24]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	4413      	add	r3, r2
 8005b8a:	1e5a      	subs	r2, r3, #1
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b94:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	8afa      	ldrh	r2, [r7, #22]
 8005b9c:	fb03 f202 	mul.w	r2, r3, r2
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb0:	691a      	ldr	r2, [r3, #16]
 8005bb2:	8afb      	ldrh	r3, [r7, #22]
 8005bb4:	04d9      	lsls	r1, r3, #19
 8005bb6:	4b38      	ldr	r3, [pc, #224]	; (8005c98 <USB_EPStartXfer+0x48c>)
 8005bb8:	400b      	ands	r3, r1
 8005bba:	69b9      	ldr	r1, [r7, #24]
 8005bbc:	0148      	lsls	r0, r1, #5
 8005bbe:	69f9      	ldr	r1, [r7, #28]
 8005bc0:	4401      	add	r1, r0
 8005bc2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	69db      	ldr	r3, [r3, #28]
 8005bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005be0:	69b9      	ldr	r1, [r7, #24]
 8005be2:	0148      	lsls	r0, r1, #5
 8005be4:	69f9      	ldr	r1, [r7, #28]
 8005be6:	4401      	add	r1, r0
 8005be8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bec:	4313      	orrs	r3, r2
 8005bee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005bf0:	79fb      	ldrb	r3, [r7, #7]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d10d      	bne.n	8005c12 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d009      	beq.n	8005c12 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	6919      	ldr	r1, [r3, #16]
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0e:	460a      	mov	r2, r1
 8005c10:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	791b      	ldrb	r3, [r3, #4]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d128      	bne.n	8005c6c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d110      	bne.n	8005c4c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	0151      	lsls	r1, r2, #5
 8005c3c:	69fa      	ldr	r2, [r7, #28]
 8005c3e:	440a      	add	r2, r1
 8005c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	e00f      	b.n	8005c6c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c6a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	0151      	lsls	r1, r2, #5
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	440a      	add	r2, r1
 8005c82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3720      	adds	r7, #32
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	1ff80000 	.word	0x1ff80000

08005c9c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	f040 80ce 	bne.w	8005e5a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d132      	bne.n	8005d2c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ce0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ce4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ce8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	0151      	lsls	r1, r2, #5
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	440a      	add	r2, r1
 8005d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	0151      	lsls	r1, r2, #5
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	440a      	add	r2, r1
 8005d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d24:	0cdb      	lsrs	r3, r3, #19
 8005d26:	04db      	lsls	r3, r3, #19
 8005d28:	6113      	str	r3, [r2, #16]
 8005d2a:	e04e      	b.n	8005dca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d46:	0cdb      	lsrs	r3, r3, #19
 8005d48:	04db      	lsls	r3, r3, #19
 8005d4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d6e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	699a      	ldr	r2, [r3, #24]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d903      	bls.n	8005d84 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005da2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db0:	691a      	ldr	r2, [r3, #16]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dba:	6939      	ldr	r1, [r7, #16]
 8005dbc:	0148      	lsls	r0, r1, #5
 8005dbe:	6979      	ldr	r1, [r7, #20]
 8005dc0:	4401      	add	r1, r0
 8005dc2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d11e      	bne.n	8005e0e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d009      	beq.n	8005dec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de4:	461a      	mov	r2, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	0151      	lsls	r1, r2, #5
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	440a      	add	r2, r1
 8005e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	e097      	b.n	8005f3e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e2c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 8083 	beq.w	8005f3e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	f003 030f 	and.w	r3, r3, #15
 8005e48:	2101      	movs	r1, #1
 8005e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4e:	6979      	ldr	r1, [r7, #20]
 8005e50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e54:	4313      	orrs	r3, r2
 8005e56:	634b      	str	r3, [r1, #52]	; 0x34
 8005e58:	e071      	b.n	8005f3e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	0151      	lsls	r1, r2, #5
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	440a      	add	r2, r1
 8005e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e74:	0cdb      	lsrs	r3, r3, #19
 8005e76:	04db      	lsls	r3, r3, #19
 8005e78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	0151      	lsls	r1, r2, #5
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	440a      	add	r2, r1
 8005e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e9c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	0151      	lsls	r1, r2, #5
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	440a      	add	r2, r1
 8005ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ed4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eec:	6939      	ldr	r1, [r7, #16]
 8005eee:	0148      	lsls	r0, r1, #5
 8005ef0:	6979      	ldr	r1, [r7, #20]
 8005ef2:	4401      	add	r1, r0
 8005ef4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005efc:	79fb      	ldrb	r3, [r7, #7]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d10d      	bne.n	8005f1e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d009      	beq.n	8005f1e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	6919      	ldr	r1, [r3, #16]
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1a:	460a      	mov	r2, r1
 8005f1c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	0151      	lsls	r1, r2, #5
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	440a      	add	r2, r1
 8005f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	785b      	ldrb	r3, [r3, #1]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d14a      	bne.n	8006000 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f82:	f040 8086 	bne.w	8006092 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	7812      	ldrb	r2, [r2, #0]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fa8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	7812      	ldrb	r2, [r2, #0]
 8005fbe:	0151      	lsls	r1, r2, #5
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	440a      	add	r2, r1
 8005fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fcc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f242 7210 	movw	r2, #10000	; 0x2710
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d902      	bls.n	8005fe4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	75fb      	strb	r3, [r7, #23]
          break;
 8005fe2:	e056      	b.n	8006092 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ffc:	d0e7      	beq.n	8005fce <USB_EPStopXfer+0x82>
 8005ffe:	e048      	b.n	8006092 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006014:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006018:	d13b      	bne.n	8006092 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	7812      	ldrb	r2, [r2, #0]
 800602e:	0151      	lsls	r1, r2, #5
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	440a      	add	r2, r1
 8006034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006038:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800603c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	7812      	ldrb	r2, [r2, #0]
 8006052:	0151      	lsls	r1, r2, #5
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	440a      	add	r2, r1
 8006058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800605c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006060:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	3301      	adds	r3, #1
 8006066:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f242 7210 	movw	r2, #10000	; 0x2710
 800606e:	4293      	cmp	r3, r2
 8006070:	d902      	bls.n	8006078 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	75fb      	strb	r3, [r7, #23]
          break;
 8006076:	e00c      	b.n	8006092 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800608c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006090:	d0e7      	beq.n	8006062 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006092:	7dfb      	ldrb	r3, [r7, #23]
}
 8006094:	4618      	mov	r0, r3
 8006096:	371c      	adds	r7, #28
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b089      	sub	sp, #36	; 0x24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	4611      	mov	r1, r2
 80060ac:	461a      	mov	r2, r3
 80060ae:	460b      	mov	r3, r1
 80060b0:	71fb      	strb	r3, [r7, #7]
 80060b2:	4613      	mov	r3, r2
 80060b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80060be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d123      	bne.n	800610e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80060c6:	88bb      	ldrh	r3, [r7, #4]
 80060c8:	3303      	adds	r3, #3
 80060ca:	089b      	lsrs	r3, r3, #2
 80060cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80060ce:	2300      	movs	r3, #0
 80060d0:	61bb      	str	r3, [r7, #24]
 80060d2:	e018      	b.n	8006106 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80060d4:	79fb      	ldrb	r3, [r7, #7]
 80060d6:	031a      	lsls	r2, r3, #12
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060e0:	461a      	mov	r2, r3
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	3301      	adds	r3, #1
 80060ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	3301      	adds	r3, #1
 80060f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	3301      	adds	r3, #1
 80060f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	3301      	adds	r3, #1
 80060fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	3301      	adds	r3, #1
 8006104:	61bb      	str	r3, [r7, #24]
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	429a      	cmp	r2, r3
 800610c:	d3e2      	bcc.n	80060d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3724      	adds	r7, #36	; 0x24
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800611c:	b480      	push	{r7}
 800611e:	b08b      	sub	sp, #44	; 0x2c
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	4613      	mov	r3, r2
 8006128:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006132:	88fb      	ldrh	r3, [r7, #6]
 8006134:	089b      	lsrs	r3, r3, #2
 8006136:	b29b      	uxth	r3, r3
 8006138:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	f003 0303 	and.w	r3, r3, #3
 8006140:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006142:	2300      	movs	r3, #0
 8006144:	623b      	str	r3, [r7, #32]
 8006146:	e014      	b.n	8006172 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	601a      	str	r2, [r3, #0]
    pDest++;
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	3301      	adds	r3, #1
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	3301      	adds	r3, #1
 800615e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	3301      	adds	r3, #1
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	3301      	adds	r3, #1
 800616a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	3301      	adds	r3, #1
 8006170:	623b      	str	r3, [r7, #32]
 8006172:	6a3a      	ldr	r2, [r7, #32]
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	429a      	cmp	r2, r3
 8006178:	d3e6      	bcc.n	8006148 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800617a:	8bfb      	ldrh	r3, [r7, #30]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d01e      	beq.n	80061be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800618a:	461a      	mov	r2, r3
 800618c:	f107 0310 	add.w	r3, r7, #16
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	b2db      	uxtb	r3, r3
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	fa22 f303 	lsr.w	r3, r2, r3
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	701a      	strb	r2, [r3, #0]
      i++;
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	3301      	adds	r3, #1
 80061aa:	623b      	str	r3, [r7, #32]
      pDest++;
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	3301      	adds	r3, #1
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80061b2:	8bfb      	ldrh	r3, [r7, #30]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80061b8:	8bfb      	ldrh	r3, [r7, #30]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1ea      	bne.n	8006194 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	372c      	adds	r7, #44	; 0x2c
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	785b      	ldrb	r3, [r3, #1]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d12c      	bne.n	8006242 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	db12      	blt.n	8006220 <USB_EPSetStall+0x54>
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00f      	beq.n	8006220 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	0151      	lsls	r1, r2, #5
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	440a      	add	r2, r1
 8006216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800621e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	0151      	lsls	r1, r2, #5
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	440a      	add	r2, r1
 8006236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800623a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	e02b      	b.n	800629a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	db12      	blt.n	800627a <USB_EPSetStall+0xae>
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00f      	beq.n	800627a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	0151      	lsls	r1, r2, #5
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	440a      	add	r2, r1
 8006270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006274:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006278:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	0151      	lsls	r1, r2, #5
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	440a      	add	r2, r1
 8006290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006294:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006298:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	785b      	ldrb	r3, [r3, #1]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d128      	bne.n	8006316 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	0151      	lsls	r1, r2, #5
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	440a      	add	r2, r1
 80062da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	791b      	ldrb	r3, [r3, #4]
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d003      	beq.n	80062f4 <USB_EPClearStall+0x4c>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	791b      	ldrb	r3, [r3, #4]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d138      	bne.n	8006366 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	0151      	lsls	r1, r2, #5
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	440a      	add	r2, r1
 800630a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800630e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006312:	6013      	str	r3, [r2, #0]
 8006314:	e027      	b.n	8006366 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	440a      	add	r2, r1
 800632c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006330:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006334:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	791b      	ldrb	r3, [r3, #4]
 800633a:	2b03      	cmp	r3, #3
 800633c:	d003      	beq.n	8006346 <USB_EPClearStall+0x9e>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	791b      	ldrb	r3, [r3, #4]
 8006342:	2b02      	cmp	r3, #2
 8006344:	d10f      	bne.n	8006366 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	0151      	lsls	r1, r2, #5
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	440a      	add	r2, r1
 800635c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006364:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006392:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006396:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	011b      	lsls	r3, r3, #4
 80063a4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80063a8:	68f9      	ldr	r1, [r7, #12]
 80063aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063ae:	4313      	orrs	r3, r2
 80063b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063da:	f023 0303 	bic.w	r3, r3, #3
 80063de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063ee:	f023 0302 	bic.w	r3, r3, #2
 80063f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006402:	b480      	push	{r7}
 8006404:	b085      	sub	sp, #20
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800641c:	f023 0303 	bic.w	r3, r3, #3
 8006420:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006430:	f043 0302 	orr.w	r3, r3, #2
 8006434:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4013      	ands	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800645c:	68fb      	ldr	r3, [r7, #12]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800646a:	b480      	push	{r7}
 800646c:	b085      	sub	sp, #20
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	4013      	ands	r3, r2
 800648c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	0c1b      	lsrs	r3, r3, #16
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800649e:	b480      	push	{r7}
 80064a0:	b085      	sub	sp, #20
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	4013      	ands	r3, r2
 80064c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	b29b      	uxth	r3, r3
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b085      	sub	sp, #20
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	460b      	mov	r3, r1
 80064dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80064e2:	78fb      	ldrb	r3, [r7, #3]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	4013      	ands	r3, r2
 80064fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006500:	68bb      	ldr	r3, [r7, #8]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800650e:	b480      	push	{r7}
 8006510:	b087      	sub	sp, #28
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	460b      	mov	r3, r1
 8006518:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006530:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006532:	78fb      	ldrb	r3, [r7, #3]
 8006534:	f003 030f 	and.w	r3, r3, #15
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	fa22 f303 	lsr.w	r3, r2, r3
 800653e:	01db      	lsls	r3, r3, #7
 8006540:	b2db      	uxtb	r3, r3
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	4413      	add	r3, r2
 8006550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4013      	ands	r3, r2
 800655a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800655c:	68bb      	ldr	r3, [r7, #8]
}
 800655e:	4618      	mov	r0, r3
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	f003 0301 	and.w	r3, r3, #1
}
 800657a:	4618      	mov	r0, r3
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006586:	b480      	push	{r7}
 8006588:	b085      	sub	sp, #20
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80065a4:	f023 0307 	bic.w	r3, r3, #7
 80065a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	460b      	mov	r3, r1
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	333c      	adds	r3, #60	; 0x3c
 80065e2:	3304      	adds	r3, #4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	4a26      	ldr	r2, [pc, #152]	; (8006684 <USB_EP0_OutStart+0xb8>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d90a      	bls.n	8006606 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006600:	d101      	bne.n	8006606 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	e037      	b.n	8006676 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660c:	461a      	mov	r2, r3
 800660e:	2300      	movs	r3, #0
 8006610:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006620:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006624:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006634:	f043 0318 	orr.w	r3, r3, #24
 8006638:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006648:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800664c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800664e:	7afb      	ldrb	r3, [r7, #11]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d10f      	bne.n	8006674 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665a:	461a      	mov	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800666e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006672:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	371c      	adds	r7, #28
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	4f54300a 	.word	0x4f54300a

08006688 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	3301      	adds	r3, #1
 8006698:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	4a13      	ldr	r2, [pc, #76]	; (80066ec <USB_CoreReset+0x64>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d901      	bls.n	80066a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e01b      	b.n	80066de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	daf2      	bge.n	8006694 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f043 0201 	orr.w	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3301      	adds	r3, #1
 80066c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4a09      	ldr	r2, [pc, #36]	; (80066ec <USB_CoreReset+0x64>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d901      	bls.n	80066d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e006      	b.n	80066de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d0f0      	beq.n	80066be <USB_CoreReset+0x36>

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	00030d40 	.word	0x00030d40

080066f0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80066fc:	2010      	movs	r0, #16
 80066fe:	f002 f929 	bl	8008954 <USBD_static_malloc>
 8006702:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	32b0      	adds	r2, #176	; 0xb0
 8006714:	2100      	movs	r1, #0
 8006716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800671a:	2302      	movs	r3, #2
 800671c:	e048      	b.n	80067b0 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	32b0      	adds	r2, #176	; 0xb0
 8006728:	68f9      	ldr	r1, [r7, #12]
 800672a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	32b0      	adds	r2, #176	; 0xb0
 8006738:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	7c1b      	ldrb	r3, [r3, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10d      	bne.n	8006766 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800674a:	4b1b      	ldr	r3, [pc, #108]	; (80067b8 <USBD_HID_Init+0xc8>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	f003 020f 	and.w	r2, r3, #15
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	4613      	mov	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	440b      	add	r3, r1
 800675e:	3326      	adds	r3, #38	; 0x26
 8006760:	2207      	movs	r2, #7
 8006762:	801a      	strh	r2, [r3, #0]
 8006764:	e00c      	b.n	8006780 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8006766:	4b14      	ldr	r3, [pc, #80]	; (80067b8 <USBD_HID_Init+0xc8>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	f003 020f 	and.w	r2, r3, #15
 800676e:	6879      	ldr	r1, [r7, #4]
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	3326      	adds	r3, #38	; 0x26
 800677c:	220a      	movs	r2, #10
 800677e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006780:	4b0d      	ldr	r3, [pc, #52]	; (80067b8 <USBD_HID_Init+0xc8>)
 8006782:	7819      	ldrb	r1, [r3, #0]
 8006784:	2304      	movs	r3, #4
 8006786:	2203      	movs	r2, #3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 ffd2 	bl	8008732 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800678e:	4b0a      	ldr	r3, [pc, #40]	; (80067b8 <USBD_HID_Init+0xc8>)
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	f003 020f 	and.w	r2, r3, #15
 8006796:	6879      	ldr	r1, [r7, #4]
 8006798:	4613      	mov	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	440b      	add	r3, r1
 80067a2:	3324      	adds	r3, #36	; 0x24
 80067a4:	2201      	movs	r2, #1
 80067a6:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	200000ca 	.word	0x200000ca

080067bc <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	460b      	mov	r3, r1
 80067c6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80067c8:	4b1f      	ldr	r3, [pc, #124]	; (8006848 <USBD_HID_DeInit+0x8c>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	4619      	mov	r1, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f001 ffd5 	bl	800877e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80067d4:	4b1c      	ldr	r3, [pc, #112]	; (8006848 <USBD_HID_DeInit+0x8c>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	f003 020f 	and.w	r2, r3, #15
 80067dc:	6879      	ldr	r1, [r7, #4]
 80067de:	4613      	mov	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	440b      	add	r3, r1
 80067e8:	3324      	adds	r3, #36	; 0x24
 80067ea:	2200      	movs	r2, #0
 80067ec:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80067ee:	4b16      	ldr	r3, [pc, #88]	; (8006848 <USBD_HID_DeInit+0x8c>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	f003 020f 	and.w	r2, r3, #15
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	4613      	mov	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	440b      	add	r3, r1
 8006802:	3326      	adds	r3, #38	; 0x26
 8006804:	2200      	movs	r2, #0
 8006806:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	32b0      	adds	r2, #176	; 0xb0
 8006812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d011      	beq.n	800683e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	32b0      	adds	r2, #176	; 0xb0
 8006824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006828:	4618      	mov	r0, r3
 800682a:	f002 f8a1 	bl	8008970 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	32b0      	adds	r2, #176	; 0xb0
 8006838:	2100      	movs	r1, #0
 800683a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	200000ca 	.word	0x200000ca

0800684c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	32b0      	adds	r2, #176	; 0xb0
 8006860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006864:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006874:	2303      	movs	r3, #3
 8006876:	e0e8      	b.n	8006a4a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006880:	2b00      	cmp	r3, #0
 8006882:	d046      	beq.n	8006912 <USBD_HID_Setup+0xc6>
 8006884:	2b20      	cmp	r3, #32
 8006886:	f040 80d8 	bne.w	8006a3a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	785b      	ldrb	r3, [r3, #1]
 800688e:	3b02      	subs	r3, #2
 8006890:	2b09      	cmp	r3, #9
 8006892:	d836      	bhi.n	8006902 <USBD_HID_Setup+0xb6>
 8006894:	a201      	add	r2, pc, #4	; (adr r2, 800689c <USBD_HID_Setup+0x50>)
 8006896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689a:	bf00      	nop
 800689c:	080068f3 	.word	0x080068f3
 80068a0:	080068d3 	.word	0x080068d3
 80068a4:	08006903 	.word	0x08006903
 80068a8:	08006903 	.word	0x08006903
 80068ac:	08006903 	.word	0x08006903
 80068b0:	08006903 	.word	0x08006903
 80068b4:	08006903 	.word	0x08006903
 80068b8:	08006903 	.word	0x08006903
 80068bc:	080068e1 	.word	0x080068e1
 80068c0:	080068c5 	.word	0x080068c5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	885b      	ldrh	r3, [r3, #2]
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	461a      	mov	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	601a      	str	r2, [r3, #0]
          break;
 80068d0:	e01e      	b.n	8006910 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2201      	movs	r2, #1
 80068d6:	4619      	mov	r1, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 fbd5 	bl	8008088 <USBD_CtlSendData>
          break;
 80068de:	e017      	b.n	8006910 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	885b      	ldrh	r3, [r3, #2]
 80068e4:	0a1b      	lsrs	r3, r3, #8
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	461a      	mov	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	605a      	str	r2, [r3, #4]
          break;
 80068f0:	e00e      	b.n	8006910 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	3304      	adds	r3, #4
 80068f6:	2201      	movs	r2, #1
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 fbc4 	bl	8008088 <USBD_CtlSendData>
          break;
 8006900:	e006      	b.n	8006910 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f001 fb4e 	bl	8007fa6 <USBD_CtlError>
          ret = USBD_FAIL;
 800690a:	2303      	movs	r3, #3
 800690c:	75fb      	strb	r3, [r7, #23]
          break;
 800690e:	bf00      	nop
      }
      break;
 8006910:	e09a      	b.n	8006a48 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	785b      	ldrb	r3, [r3, #1]
 8006916:	2b0b      	cmp	r3, #11
 8006918:	f200 8086 	bhi.w	8006a28 <USBD_HID_Setup+0x1dc>
 800691c:	a201      	add	r2, pc, #4	; (adr r2, 8006924 <USBD_HID_Setup+0xd8>)
 800691e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006922:	bf00      	nop
 8006924:	08006955 	.word	0x08006955
 8006928:	08006a37 	.word	0x08006a37
 800692c:	08006a29 	.word	0x08006a29
 8006930:	08006a29 	.word	0x08006a29
 8006934:	08006a29 	.word	0x08006a29
 8006938:	08006a29 	.word	0x08006a29
 800693c:	0800697f 	.word	0x0800697f
 8006940:	08006a29 	.word	0x08006a29
 8006944:	08006a29 	.word	0x08006a29
 8006948:	08006a29 	.word	0x08006a29
 800694c:	080069d7 	.word	0x080069d7
 8006950:	08006a01 	.word	0x08006a01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b03      	cmp	r3, #3
 800695e:	d107      	bne.n	8006970 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006960:	f107 030a 	add.w	r3, r7, #10
 8006964:	2202      	movs	r2, #2
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f001 fb8d 	bl	8008088 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800696e:	e063      	b.n	8006a38 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 fb17 	bl	8007fa6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006978:	2303      	movs	r3, #3
 800697a:	75fb      	strb	r3, [r7, #23]
          break;
 800697c:	e05c      	b.n	8006a38 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	885b      	ldrh	r3, [r3, #2]
 8006982:	0a1b      	lsrs	r3, r3, #8
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b22      	cmp	r3, #34	; 0x22
 8006988:	d108      	bne.n	800699c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	88db      	ldrh	r3, [r3, #6]
 800698e:	2b4a      	cmp	r3, #74	; 0x4a
 8006990:	bf28      	it	cs
 8006992:	234a      	movcs	r3, #74	; 0x4a
 8006994:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8006996:	4b2f      	ldr	r3, [pc, #188]	; (8006a54 <USBD_HID_Setup+0x208>)
 8006998:	613b      	str	r3, [r7, #16]
 800699a:	e015      	b.n	80069c8 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	885b      	ldrh	r3, [r3, #2]
 80069a0:	0a1b      	lsrs	r3, r3, #8
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	2b21      	cmp	r3, #33	; 0x21
 80069a6:	d108      	bne.n	80069ba <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80069a8:	4b2b      	ldr	r3, [pc, #172]	; (8006a58 <USBD_HID_Setup+0x20c>)
 80069aa:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	88db      	ldrh	r3, [r3, #6]
 80069b0:	2b09      	cmp	r3, #9
 80069b2:	bf28      	it	cs
 80069b4:	2309      	movcs	r3, #9
 80069b6:	82bb      	strh	r3, [r7, #20]
 80069b8:	e006      	b.n	80069c8 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f001 faf2 	bl	8007fa6 <USBD_CtlError>
            ret = USBD_FAIL;
 80069c2:	2303      	movs	r3, #3
 80069c4:	75fb      	strb	r3, [r7, #23]
            break;
 80069c6:	e037      	b.n	8006a38 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80069c8:	8abb      	ldrh	r3, [r7, #20]
 80069ca:	461a      	mov	r2, r3
 80069cc:	6939      	ldr	r1, [r7, #16]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f001 fb5a 	bl	8008088 <USBD_CtlSendData>
          break;
 80069d4:	e030      	b.n	8006a38 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d107      	bne.n	80069f2 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3308      	adds	r3, #8
 80069e6:	2201      	movs	r2, #1
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 fb4c 	bl	8008088 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069f0:	e022      	b.n	8006a38 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 fad6 	bl	8007fa6 <USBD_CtlError>
            ret = USBD_FAIL;
 80069fa:	2303      	movs	r3, #3
 80069fc:	75fb      	strb	r3, [r7, #23]
          break;
 80069fe:	e01b      	b.n	8006a38 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	d106      	bne.n	8006a1a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	885b      	ldrh	r3, [r3, #2]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	461a      	mov	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a18:	e00e      	b.n	8006a38 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 fac2 	bl	8007fa6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a22:	2303      	movs	r3, #3
 8006a24:	75fb      	strb	r3, [r7, #23]
          break;
 8006a26:	e007      	b.n	8006a38 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f001 fabb 	bl	8007fa6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a30:	2303      	movs	r3, #3
 8006a32:	75fb      	strb	r3, [r7, #23]
          break;
 8006a34:	e000      	b.n	8006a38 <USBD_HID_Setup+0x1ec>
          break;
 8006a36:	bf00      	nop
      }
      break;
 8006a38:	e006      	b.n	8006a48 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 fab2 	bl	8007fa6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a42:	2303      	movs	r3, #3
 8006a44:	75fb      	strb	r3, [r7, #23]
      break;
 8006a46:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	20000080 	.word	0x20000080
 8006a58:	20000068 	.word	0x20000068

08006a5c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	32b0      	adds	r2, #176	; 0xb0
 8006a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a78:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e014      	b.n	8006aae <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	d10d      	bne.n	8006aac <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	7b1b      	ldrb	r3, [r3, #12]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d109      	bne.n	8006aac <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8006a9e:	4b06      	ldr	r3, [pc, #24]	; (8006ab8 <USBD_HID_SendReport+0x5c>)
 8006aa0:	7819      	ldrb	r1, [r3, #0]
 8006aa2:	88fb      	ldrh	r3, [r7, #6]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f001 ff11 	bl	80088ce <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	200000ca 	.word	0x200000ca

08006abc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006ac4:	2181      	movs	r1, #129	; 0x81
 8006ac6:	4809      	ldr	r0, [pc, #36]	; (8006aec <USBD_HID_GetFSCfgDesc+0x30>)
 8006ac8:	f000 fc35 	bl	8007336 <USBD_GetEpDesc>
 8006acc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	220a      	movs	r2, #10
 8006ad8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2222      	movs	r2, #34	; 0x22
 8006ade:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006ae0:	4b02      	ldr	r3, [pc, #8]	; (8006aec <USBD_HID_GetFSCfgDesc+0x30>)
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20000044 	.word	0x20000044

08006af0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006af8:	2181      	movs	r1, #129	; 0x81
 8006afa:	4809      	ldr	r0, [pc, #36]	; (8006b20 <USBD_HID_GetHSCfgDesc+0x30>)
 8006afc:	f000 fc1b 	bl	8007336 <USBD_GetEpDesc>
 8006b00:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2207      	movs	r2, #7
 8006b0c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2222      	movs	r2, #34	; 0x22
 8006b12:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006b14:	4b02      	ldr	r3, [pc, #8]	; (8006b20 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000044 	.word	0x20000044

08006b24 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006b2c:	2181      	movs	r1, #129	; 0x81
 8006b2e:	4809      	ldr	r0, [pc, #36]	; (8006b54 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8006b30:	f000 fc01 	bl	8007336 <USBD_GetEpDesc>
 8006b34:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	220a      	movs	r2, #10
 8006b40:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2222      	movs	r2, #34	; 0x22
 8006b46:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006b48:	4b02      	ldr	r3, [pc, #8]	; (8006b54 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	20000044 	.word	0x20000044

08006b58 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	460b      	mov	r3, r1
 8006b62:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	32b0      	adds	r2, #176	; 0xb0
 8006b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b72:	2200      	movs	r2, #0
 8006b74:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	220a      	movs	r2, #10
 8006b90:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006b92:	4b03      	ldr	r3, [pc, #12]	; (8006ba0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	20000074 	.word	0x20000074

08006ba4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e01f      	b.n	8006bfc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	79fa      	ldrb	r2, [r7, #7]
 8006bee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f001 fd37 	bl	8008664 <USBD_LL_Init>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e025      	b.n	8006c68 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	32ae      	adds	r2, #174	; 0xae
 8006c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00f      	beq.n	8006c58 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	32ae      	adds	r2, #174	; 0xae
 8006c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	f107 020e 	add.w	r2, r7, #14
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	4798      	blx	r3
 8006c50:	4602      	mov	r2, r0
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 fd3f 	bl	80086fc <USBD_LL_Start>
 8006c7e:	4603      	mov	r3, r0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c90:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d009      	beq.n	8006ccc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	78fa      	ldrb	r2, [r7, #3]
 8006cc2:	4611      	mov	r1, r2
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	4798      	blx	r3
 8006cc8:	4603      	mov	r3, r0
 8006cca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b084      	sub	sp, #16
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	78fa      	ldrb	r2, [r7, #3]
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b084      	sub	sp, #16
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f001 f908 	bl	8007f32 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006d30:	461a      	mov	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d3e:	f003 031f 	and.w	r3, r3, #31
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d01a      	beq.n	8006d7c <USBD_LL_SetupStage+0x72>
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d822      	bhi.n	8006d90 <USBD_LL_SetupStage+0x86>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d002      	beq.n	8006d54 <USBD_LL_SetupStage+0x4a>
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d00a      	beq.n	8006d68 <USBD_LL_SetupStage+0x5e>
 8006d52:	e01d      	b.n	8006d90 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fb5f 	bl	8007420 <USBD_StdDevReq>
 8006d62:	4603      	mov	r3, r0
 8006d64:	73fb      	strb	r3, [r7, #15]
      break;
 8006d66:	e020      	b.n	8006daa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fbc7 	bl	8007504 <USBD_StdItfReq>
 8006d76:	4603      	mov	r3, r0
 8006d78:	73fb      	strb	r3, [r7, #15]
      break;
 8006d7a:	e016      	b.n	8006daa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fc29 	bl	80075dc <USBD_StdEPReq>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d8e:	e00c      	b.n	8006daa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d96:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f001 fd0c 	bl	80087bc <USBD_LL_StallEP>
 8006da4:	4603      	mov	r3, r0
 8006da6:	73fb      	strb	r3, [r7, #15]
      break;
 8006da8:	bf00      	nop
  }

  return ret;
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	607a      	str	r2, [r7, #4]
 8006dc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006dc6:	7afb      	ldrb	r3, [r7, #11]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d16e      	bne.n	8006eaa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006dd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	f040 8098 	bne.w	8006f10 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d913      	bls.n	8006e14 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	1ad2      	subs	r2, r2, r3
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	68da      	ldr	r2, [r3, #12]
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	4293      	cmp	r3, r2
 8006e04:	bf28      	it	cs
 8006e06:	4613      	movcs	r3, r2
 8006e08:	461a      	mov	r2, r3
 8006e0a:	6879      	ldr	r1, [r7, #4]
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f001 f967 	bl	80080e0 <USBD_CtlContinueRx>
 8006e12:	e07d      	b.n	8006f10 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e1a:	f003 031f 	and.w	r3, r3, #31
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d014      	beq.n	8006e4c <USBD_LL_DataOutStage+0x98>
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d81d      	bhi.n	8006e62 <USBD_LL_DataOutStage+0xae>
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <USBD_LL_DataOutStage+0x7c>
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d003      	beq.n	8006e36 <USBD_LL_DataOutStage+0x82>
 8006e2e:	e018      	b.n	8006e62 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006e30:	2300      	movs	r3, #0
 8006e32:	75bb      	strb	r3, [r7, #22]
            break;
 8006e34:	e018      	b.n	8006e68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	4619      	mov	r1, r3
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 fa5e 	bl	8007302 <USBD_CoreFindIF>
 8006e46:	4603      	mov	r3, r0
 8006e48:	75bb      	strb	r3, [r7, #22]
            break;
 8006e4a:	e00d      	b.n	8006e68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	4619      	mov	r1, r3
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 fa60 	bl	800731c <USBD_CoreFindEP>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	75bb      	strb	r3, [r7, #22]
            break;
 8006e60:	e002      	b.n	8006e68 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	75bb      	strb	r3, [r7, #22]
            break;
 8006e66:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006e68:	7dbb      	ldrb	r3, [r7, #22]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d119      	bne.n	8006ea2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d113      	bne.n	8006ea2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006e7a:	7dba      	ldrb	r2, [r7, #22]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	32ae      	adds	r2, #174	; 0xae
 8006e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00b      	beq.n	8006ea2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006e8a:	7dba      	ldrb	r2, [r7, #22]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006e92:	7dba      	ldrb	r2, [r7, #22]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	32ae      	adds	r2, #174	; 0xae
 8006e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f001 f92d 	bl	8008102 <USBD_CtlSendStatus>
 8006ea8:	e032      	b.n	8006f10 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006eaa:	7afb      	ldrb	r3, [r7, #11]
 8006eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 fa31 	bl	800731c <USBD_CoreFindEP>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ebe:	7dbb      	ldrb	r3, [r7, #22]
 8006ec0:	2bff      	cmp	r3, #255	; 0xff
 8006ec2:	d025      	beq.n	8006f10 <USBD_LL_DataOutStage+0x15c>
 8006ec4:	7dbb      	ldrb	r3, [r7, #22]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d122      	bne.n	8006f10 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d117      	bne.n	8006f06 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006ed6:	7dba      	ldrb	r2, [r7, #22]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	32ae      	adds	r2, #174	; 0xae
 8006edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00f      	beq.n	8006f06 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006ee6:	7dba      	ldrb	r2, [r7, #22]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006eee:	7dba      	ldrb	r2, [r7, #22]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	32ae      	adds	r2, #174	; 0xae
 8006ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	7afa      	ldrb	r2, [r7, #11]
 8006efc:	4611      	mov	r1, r2
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	4798      	blx	r3
 8006f02:	4603      	mov	r3, r0
 8006f04:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d001      	beq.n	8006f10 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006f0c:	7dfb      	ldrb	r3, [r7, #23]
 8006f0e:	e000      	b.n	8006f12 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b086      	sub	sp, #24
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	60f8      	str	r0, [r7, #12]
 8006f22:	460b      	mov	r3, r1
 8006f24:	607a      	str	r2, [r7, #4]
 8006f26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006f28:	7afb      	ldrb	r3, [r7, #11]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d16f      	bne.n	800700e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3314      	adds	r3, #20
 8006f32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d15a      	bne.n	8006ff4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d914      	bls.n	8006f74 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	689a      	ldr	r2, [r3, #8]
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	1ad2      	subs	r2, r2, r3
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f001 f8ac 	bl	80080be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f66:	2300      	movs	r3, #0
 8006f68:	2200      	movs	r2, #0
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f001 fccf 	bl	8008910 <USBD_LL_PrepareReceive>
 8006f72:	e03f      	b.n	8006ff4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	68da      	ldr	r2, [r3, #12]
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d11c      	bne.n	8006fba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d316      	bcc.n	8006fba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	685a      	ldr	r2, [r3, #4]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d20f      	bcs.n	8006fba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f001 f88d 	bl	80080be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fac:	2300      	movs	r3, #0
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f001 fcac 	bl	8008910 <USBD_LL_PrepareReceive>
 8006fb8:	e01c      	b.n	8006ff4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d10f      	bne.n	8006fe6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d009      	beq.n	8006fe6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fe6:	2180      	movs	r1, #128	; 0x80
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f001 fbe7 	bl	80087bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f001 f89a 	bl	8008128 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d03a      	beq.n	8007074 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f7ff fe42 	bl	8006c88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800700c:	e032      	b.n	8007074 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800700e:	7afb      	ldrb	r3, [r7, #11]
 8007010:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007014:	b2db      	uxtb	r3, r3
 8007016:	4619      	mov	r1, r3
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 f97f 	bl	800731c <USBD_CoreFindEP>
 800701e:	4603      	mov	r3, r0
 8007020:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007022:	7dfb      	ldrb	r3, [r7, #23]
 8007024:	2bff      	cmp	r3, #255	; 0xff
 8007026:	d025      	beq.n	8007074 <USBD_LL_DataInStage+0x15a>
 8007028:	7dfb      	ldrb	r3, [r7, #23]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d122      	bne.n	8007074 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b03      	cmp	r3, #3
 8007038:	d11c      	bne.n	8007074 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800703a:	7dfa      	ldrb	r2, [r7, #23]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	32ae      	adds	r2, #174	; 0xae
 8007040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d014      	beq.n	8007074 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800704a:	7dfa      	ldrb	r2, [r7, #23]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007052:	7dfa      	ldrb	r2, [r7, #23]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	32ae      	adds	r2, #174	; 0xae
 8007058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	7afa      	ldrb	r2, [r7, #11]
 8007060:	4611      	mov	r1, r2
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	4798      	blx	r3
 8007066:	4603      	mov	r3, r0
 8007068:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800706a:	7dbb      	ldrb	r3, [r7, #22]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007070:	7dbb      	ldrb	r3, [r7, #22]
 8007072:	e000      	b.n	8007076 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d014      	beq.n	80070e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00e      	beq.n	80070e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	6852      	ldr	r2, [r2, #4]
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	4611      	mov	r1, r2
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	4798      	blx	r3
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80070e0:	2303      	movs	r3, #3
 80070e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070e4:	2340      	movs	r3, #64	; 0x40
 80070e6:	2200      	movs	r2, #0
 80070e8:	2100      	movs	r1, #0
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 fb21 	bl	8008732 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2240      	movs	r2, #64	; 0x40
 80070fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007100:	2340      	movs	r3, #64	; 0x40
 8007102:	2200      	movs	r2, #0
 8007104:	2180      	movs	r1, #128	; 0x80
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f001 fb13 	bl	8008732 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2240      	movs	r2, #64	; 0x40
 8007116:	621a      	str	r2, [r3, #32]

  return ret;
 8007118:	7bfb      	ldrb	r3, [r7, #15]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	460b      	mov	r3, r1
 800712c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	78fa      	ldrb	r2, [r7, #3]
 8007132:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007150:	b2da      	uxtb	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2204      	movs	r2, #4
 800715c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b04      	cmp	r3, #4
 8007180:	d106      	bne.n	8007190 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007188:	b2da      	uxtb	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b082      	sub	sp, #8
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d110      	bne.n	80071d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00b      	beq.n	80071d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ce:	69db      	ldr	r3, [r3, #28]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b082      	sub	sp, #8
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
 80071e6:	460b      	mov	r3, r1
 80071e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	32ae      	adds	r2, #174	; 0xae
 80071f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e01c      	b.n	800723a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b03      	cmp	r3, #3
 800720a:	d115      	bne.n	8007238 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	32ae      	adds	r2, #174	; 0xae
 8007216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00b      	beq.n	8007238 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	32ae      	adds	r2, #174	; 0xae
 800722a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	78fa      	ldrb	r2, [r7, #3]
 8007232:	4611      	mov	r1, r2
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b082      	sub	sp, #8
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	460b      	mov	r3, r1
 800724c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	32ae      	adds	r2, #174	; 0xae
 8007258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007260:	2303      	movs	r3, #3
 8007262:	e01c      	b.n	800729e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b03      	cmp	r3, #3
 800726e:	d115      	bne.n	800729c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	32ae      	adds	r2, #174	; 0xae
 800727a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00b      	beq.n	800729c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	32ae      	adds	r2, #174	; 0xae
 800728e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	78fa      	ldrb	r2, [r7, #3]
 8007296:	4611      	mov	r1, r2
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80072c4:	2300      	movs	r3, #0
 80072c6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00e      	beq.n	80072f8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	6852      	ldr	r2, [r2, #4]
 80072e6:	b2d2      	uxtb	r2, r2
 80072e8:	4611      	mov	r1, r2
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	4798      	blx	r3
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80072f4:	2303      	movs	r3, #3
 80072f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	460b      	mov	r3, r1
 800730c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800730e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007310:	4618      	mov	r0, r3
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	460b      	mov	r3, r1
 8007326:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007328:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800732a:	4618      	mov	r0, r3
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b086      	sub	sp, #24
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	460b      	mov	r3, r1
 8007340:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	885b      	ldrh	r3, [r3, #2]
 8007352:	b29a      	uxth	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	b29b      	uxth	r3, r3
 800735a:	429a      	cmp	r2, r3
 800735c:	d920      	bls.n	80073a0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	b29b      	uxth	r3, r3
 8007364:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007366:	e013      	b.n	8007390 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007368:	f107 030a 	add.w	r3, r7, #10
 800736c:	4619      	mov	r1, r3
 800736e:	6978      	ldr	r0, [r7, #20]
 8007370:	f000 f81b 	bl	80073aa <USBD_GetNextDesc>
 8007374:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	785b      	ldrb	r3, [r3, #1]
 800737a:	2b05      	cmp	r3, #5
 800737c:	d108      	bne.n	8007390 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	789b      	ldrb	r3, [r3, #2]
 8007386:	78fa      	ldrb	r2, [r7, #3]
 8007388:	429a      	cmp	r2, r3
 800738a:	d008      	beq.n	800739e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800738c:	2300      	movs	r3, #0
 800738e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	885b      	ldrh	r3, [r3, #2]
 8007394:	b29a      	uxth	r2, r3
 8007396:	897b      	ldrh	r3, [r7, #10]
 8007398:	429a      	cmp	r2, r3
 800739a:	d8e5      	bhi.n	8007368 <USBD_GetEpDesc+0x32>
 800739c:	e000      	b.n	80073a0 <USBD_GetEpDesc+0x6a>
          break;
 800739e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80073a0:	693b      	ldr	r3, [r7, #16]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b085      	sub	sp, #20
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	881a      	ldrh	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	4413      	add	r3, r2
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4413      	add	r3, r2
 80073d4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80073d6:	68fb      	ldr	r3, [r7, #12]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	3301      	adds	r3, #1
 80073fa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007402:	8a3b      	ldrh	r3, [r7, #16]
 8007404:	021b      	lsls	r3, r3, #8
 8007406:	b21a      	sxth	r2, r3
 8007408:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800740c:	4313      	orrs	r3, r2
 800740e:	b21b      	sxth	r3, r3
 8007410:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007412:	89fb      	ldrh	r3, [r7, #14]
}
 8007414:	4618      	mov	r0, r3
 8007416:	371c      	adds	r7, #28
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800742a:	2300      	movs	r3, #0
 800742c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007436:	2b40      	cmp	r3, #64	; 0x40
 8007438:	d005      	beq.n	8007446 <USBD_StdDevReq+0x26>
 800743a:	2b40      	cmp	r3, #64	; 0x40
 800743c:	d857      	bhi.n	80074ee <USBD_StdDevReq+0xce>
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00f      	beq.n	8007462 <USBD_StdDevReq+0x42>
 8007442:	2b20      	cmp	r3, #32
 8007444:	d153      	bne.n	80074ee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	32ae      	adds	r2, #174	; 0xae
 8007450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	4798      	blx	r3
 800745c:	4603      	mov	r3, r0
 800745e:	73fb      	strb	r3, [r7, #15]
      break;
 8007460:	e04a      	b.n	80074f8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	785b      	ldrb	r3, [r3, #1]
 8007466:	2b09      	cmp	r3, #9
 8007468:	d83b      	bhi.n	80074e2 <USBD_StdDevReq+0xc2>
 800746a:	a201      	add	r2, pc, #4	; (adr r2, 8007470 <USBD_StdDevReq+0x50>)
 800746c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007470:	080074c5 	.word	0x080074c5
 8007474:	080074d9 	.word	0x080074d9
 8007478:	080074e3 	.word	0x080074e3
 800747c:	080074cf 	.word	0x080074cf
 8007480:	080074e3 	.word	0x080074e3
 8007484:	080074a3 	.word	0x080074a3
 8007488:	08007499 	.word	0x08007499
 800748c:	080074e3 	.word	0x080074e3
 8007490:	080074bb 	.word	0x080074bb
 8007494:	080074ad 	.word	0x080074ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fa3c 	bl	8007918 <USBD_GetDescriptor>
          break;
 80074a0:	e024      	b.n	80074ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fba1 	bl	8007bec <USBD_SetAddress>
          break;
 80074aa:	e01f      	b.n	80074ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fbe0 	bl	8007c74 <USBD_SetConfig>
 80074b4:	4603      	mov	r3, r0
 80074b6:	73fb      	strb	r3, [r7, #15]
          break;
 80074b8:	e018      	b.n	80074ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fc83 	bl	8007dc8 <USBD_GetConfig>
          break;
 80074c2:	e013      	b.n	80074ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fcb4 	bl	8007e34 <USBD_GetStatus>
          break;
 80074cc:	e00e      	b.n	80074ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fce3 	bl	8007e9c <USBD_SetFeature>
          break;
 80074d6:	e009      	b.n	80074ec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fd07 	bl	8007eee <USBD_ClrFeature>
          break;
 80074e0:	e004      	b.n	80074ec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fd5e 	bl	8007fa6 <USBD_CtlError>
          break;
 80074ea:	bf00      	nop
      }
      break;
 80074ec:	e004      	b.n	80074f8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fd58 	bl	8007fa6 <USBD_CtlError>
      break;
 80074f6:	bf00      	nop
  }

  return ret;
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop

08007504 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800751a:	2b40      	cmp	r3, #64	; 0x40
 800751c:	d005      	beq.n	800752a <USBD_StdItfReq+0x26>
 800751e:	2b40      	cmp	r3, #64	; 0x40
 8007520:	d852      	bhi.n	80075c8 <USBD_StdItfReq+0xc4>
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <USBD_StdItfReq+0x26>
 8007526:	2b20      	cmp	r3, #32
 8007528:	d14e      	bne.n	80075c8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007530:	b2db      	uxtb	r3, r3
 8007532:	3b01      	subs	r3, #1
 8007534:	2b02      	cmp	r3, #2
 8007536:	d840      	bhi.n	80075ba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	889b      	ldrh	r3, [r3, #4]
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b01      	cmp	r3, #1
 8007540:	d836      	bhi.n	80075b0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	889b      	ldrh	r3, [r3, #4]
 8007546:	b2db      	uxtb	r3, r3
 8007548:	4619      	mov	r1, r3
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff fed9 	bl	8007302 <USBD_CoreFindIF>
 8007550:	4603      	mov	r3, r0
 8007552:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007554:	7bbb      	ldrb	r3, [r7, #14]
 8007556:	2bff      	cmp	r3, #255	; 0xff
 8007558:	d01d      	beq.n	8007596 <USBD_StdItfReq+0x92>
 800755a:	7bbb      	ldrb	r3, [r7, #14]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d11a      	bne.n	8007596 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007560:	7bba      	ldrb	r2, [r7, #14]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	32ae      	adds	r2, #174	; 0xae
 8007566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00f      	beq.n	8007590 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007570:	7bba      	ldrb	r2, [r7, #14]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007578:	7bba      	ldrb	r2, [r7, #14]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	32ae      	adds	r2, #174	; 0xae
 800757e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	4798      	blx	r3
 800758a:	4603      	mov	r3, r0
 800758c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800758e:	e004      	b.n	800759a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007590:	2303      	movs	r3, #3
 8007592:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007594:	e001      	b.n	800759a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007596:	2303      	movs	r3, #3
 8007598:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	88db      	ldrh	r3, [r3, #6]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d110      	bne.n	80075c4 <USBD_StdItfReq+0xc0>
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10d      	bne.n	80075c4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fdaa 	bl	8008102 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075ae:	e009      	b.n	80075c4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fcf7 	bl	8007fa6 <USBD_CtlError>
          break;
 80075b8:	e004      	b.n	80075c4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fcf2 	bl	8007fa6 <USBD_CtlError>
          break;
 80075c2:	e000      	b.n	80075c6 <USBD_StdItfReq+0xc2>
          break;
 80075c4:	bf00      	nop
      }
      break;
 80075c6:	e004      	b.n	80075d2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fceb 	bl	8007fa6 <USBD_CtlError>
      break;
 80075d0:	bf00      	nop
  }

  return ret;
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	889b      	ldrh	r3, [r3, #4]
 80075ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075f8:	2b40      	cmp	r3, #64	; 0x40
 80075fa:	d007      	beq.n	800760c <USBD_StdEPReq+0x30>
 80075fc:	2b40      	cmp	r3, #64	; 0x40
 80075fe:	f200 817f 	bhi.w	8007900 <USBD_StdEPReq+0x324>
 8007602:	2b00      	cmp	r3, #0
 8007604:	d02a      	beq.n	800765c <USBD_StdEPReq+0x80>
 8007606:	2b20      	cmp	r3, #32
 8007608:	f040 817a 	bne.w	8007900 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800760c:	7bbb      	ldrb	r3, [r7, #14]
 800760e:	4619      	mov	r1, r3
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff fe83 	bl	800731c <USBD_CoreFindEP>
 8007616:	4603      	mov	r3, r0
 8007618:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800761a:	7b7b      	ldrb	r3, [r7, #13]
 800761c:	2bff      	cmp	r3, #255	; 0xff
 800761e:	f000 8174 	beq.w	800790a <USBD_StdEPReq+0x32e>
 8007622:	7b7b      	ldrb	r3, [r7, #13]
 8007624:	2b00      	cmp	r3, #0
 8007626:	f040 8170 	bne.w	800790a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800762a:	7b7a      	ldrb	r2, [r7, #13]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007632:	7b7a      	ldrb	r2, [r7, #13]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	32ae      	adds	r2, #174	; 0xae
 8007638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 8163 	beq.w	800790a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007644:	7b7a      	ldrb	r2, [r7, #13]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	32ae      	adds	r2, #174	; 0xae
 800764a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	4798      	blx	r3
 8007656:	4603      	mov	r3, r0
 8007658:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800765a:	e156      	b.n	800790a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	785b      	ldrb	r3, [r3, #1]
 8007660:	2b03      	cmp	r3, #3
 8007662:	d008      	beq.n	8007676 <USBD_StdEPReq+0x9a>
 8007664:	2b03      	cmp	r3, #3
 8007666:	f300 8145 	bgt.w	80078f4 <USBD_StdEPReq+0x318>
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 809b 	beq.w	80077a6 <USBD_StdEPReq+0x1ca>
 8007670:	2b01      	cmp	r3, #1
 8007672:	d03c      	beq.n	80076ee <USBD_StdEPReq+0x112>
 8007674:	e13e      	b.n	80078f4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b02      	cmp	r3, #2
 8007680:	d002      	beq.n	8007688 <USBD_StdEPReq+0xac>
 8007682:	2b03      	cmp	r3, #3
 8007684:	d016      	beq.n	80076b4 <USBD_StdEPReq+0xd8>
 8007686:	e02c      	b.n	80076e2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00d      	beq.n	80076aa <USBD_StdEPReq+0xce>
 800768e:	7bbb      	ldrb	r3, [r7, #14]
 8007690:	2b80      	cmp	r3, #128	; 0x80
 8007692:	d00a      	beq.n	80076aa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007694:	7bbb      	ldrb	r3, [r7, #14]
 8007696:	4619      	mov	r1, r3
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f001 f88f 	bl	80087bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800769e:	2180      	movs	r1, #128	; 0x80
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f001 f88b 	bl	80087bc <USBD_LL_StallEP>
 80076a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076a8:	e020      	b.n	80076ec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fc7a 	bl	8007fa6 <USBD_CtlError>
              break;
 80076b2:	e01b      	b.n	80076ec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	885b      	ldrh	r3, [r3, #2]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10e      	bne.n	80076da <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00b      	beq.n	80076da <USBD_StdEPReq+0xfe>
 80076c2:	7bbb      	ldrb	r3, [r7, #14]
 80076c4:	2b80      	cmp	r3, #128	; 0x80
 80076c6:	d008      	beq.n	80076da <USBD_StdEPReq+0xfe>
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	88db      	ldrh	r3, [r3, #6]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d104      	bne.n	80076da <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 f871 	bl	80087bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fd11 	bl	8008102 <USBD_CtlSendStatus>

              break;
 80076e0:	e004      	b.n	80076ec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fc5e 	bl	8007fa6 <USBD_CtlError>
              break;
 80076ea:	bf00      	nop
          }
          break;
 80076ec:	e107      	b.n	80078fe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d002      	beq.n	8007700 <USBD_StdEPReq+0x124>
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d016      	beq.n	800772c <USBD_StdEPReq+0x150>
 80076fe:	e04b      	b.n	8007798 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007700:	7bbb      	ldrb	r3, [r7, #14]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00d      	beq.n	8007722 <USBD_StdEPReq+0x146>
 8007706:	7bbb      	ldrb	r3, [r7, #14]
 8007708:	2b80      	cmp	r3, #128	; 0x80
 800770a:	d00a      	beq.n	8007722 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800770c:	7bbb      	ldrb	r3, [r7, #14]
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 f853 	bl	80087bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007716:	2180      	movs	r1, #128	; 0x80
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f001 f84f 	bl	80087bc <USBD_LL_StallEP>
 800771e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007720:	e040      	b.n	80077a4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fc3e 	bl	8007fa6 <USBD_CtlError>
              break;
 800772a:	e03b      	b.n	80077a4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	885b      	ldrh	r3, [r3, #2]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d136      	bne.n	80077a2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007734:	7bbb      	ldrb	r3, [r7, #14]
 8007736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800773a:	2b00      	cmp	r3, #0
 800773c:	d004      	beq.n	8007748 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800773e:	7bbb      	ldrb	r3, [r7, #14]
 8007740:	4619      	mov	r1, r3
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f001 f859 	bl	80087fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fcda 	bl	8008102 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800774e:	7bbb      	ldrb	r3, [r7, #14]
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7ff fde2 	bl	800731c <USBD_CoreFindEP>
 8007758:	4603      	mov	r3, r0
 800775a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800775c:	7b7b      	ldrb	r3, [r7, #13]
 800775e:	2bff      	cmp	r3, #255	; 0xff
 8007760:	d01f      	beq.n	80077a2 <USBD_StdEPReq+0x1c6>
 8007762:	7b7b      	ldrb	r3, [r7, #13]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d11c      	bne.n	80077a2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007768:	7b7a      	ldrb	r2, [r7, #13]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007770:	7b7a      	ldrb	r2, [r7, #13]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	32ae      	adds	r2, #174	; 0xae
 8007776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d010      	beq.n	80077a2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007780:	7b7a      	ldrb	r2, [r7, #13]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	32ae      	adds	r2, #174	; 0xae
 8007786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	4798      	blx	r3
 8007792:	4603      	mov	r3, r0
 8007794:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007796:	e004      	b.n	80077a2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fc03 	bl	8007fa6 <USBD_CtlError>
              break;
 80077a0:	e000      	b.n	80077a4 <USBD_StdEPReq+0x1c8>
              break;
 80077a2:	bf00      	nop
          }
          break;
 80077a4:	e0ab      	b.n	80078fe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d002      	beq.n	80077b8 <USBD_StdEPReq+0x1dc>
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d032      	beq.n	800781c <USBD_StdEPReq+0x240>
 80077b6:	e097      	b.n	80078e8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077b8:	7bbb      	ldrb	r3, [r7, #14]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d007      	beq.n	80077ce <USBD_StdEPReq+0x1f2>
 80077be:	7bbb      	ldrb	r3, [r7, #14]
 80077c0:	2b80      	cmp	r3, #128	; 0x80
 80077c2:	d004      	beq.n	80077ce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fbed 	bl	8007fa6 <USBD_CtlError>
                break;
 80077cc:	e091      	b.n	80078f2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	da0b      	bge.n	80077ee <USBD_StdEPReq+0x212>
 80077d6:	7bbb      	ldrb	r3, [r7, #14]
 80077d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077dc:	4613      	mov	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	3310      	adds	r3, #16
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	4413      	add	r3, r2
 80077ea:	3304      	adds	r3, #4
 80077ec:	e00b      	b.n	8007806 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077ee:	7bbb      	ldrb	r3, [r7, #14]
 80077f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077f4:	4613      	mov	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	4413      	add	r3, r2
 8007804:	3304      	adds	r3, #4
 8007806:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2200      	movs	r2, #0
 800780c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2202      	movs	r2, #2
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fc37 	bl	8008088 <USBD_CtlSendData>
              break;
 800781a:	e06a      	b.n	80078f2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800781c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007820:	2b00      	cmp	r3, #0
 8007822:	da11      	bge.n	8007848 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007824:	7bbb      	ldrb	r3, [r7, #14]
 8007826:	f003 020f 	and.w	r2, r3, #15
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	4613      	mov	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	440b      	add	r3, r1
 8007836:	3324      	adds	r3, #36	; 0x24
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d117      	bne.n	800786e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fbb0 	bl	8007fa6 <USBD_CtlError>
                  break;
 8007846:	e054      	b.n	80078f2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	f003 020f 	and.w	r2, r3, #15
 800784e:	6879      	ldr	r1, [r7, #4]
 8007850:	4613      	mov	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	440b      	add	r3, r1
 800785a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d104      	bne.n	800786e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fb9d 	bl	8007fa6 <USBD_CtlError>
                  break;
 800786c:	e041      	b.n	80078f2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800786e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007872:	2b00      	cmp	r3, #0
 8007874:	da0b      	bge.n	800788e <USBD_StdEPReq+0x2b2>
 8007876:	7bbb      	ldrb	r3, [r7, #14]
 8007878:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	3310      	adds	r3, #16
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	4413      	add	r3, r2
 800788a:	3304      	adds	r3, #4
 800788c:	e00b      	b.n	80078a6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800788e:	7bbb      	ldrb	r3, [r7, #14]
 8007890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007894:	4613      	mov	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	4413      	add	r3, r2
 80078a4:	3304      	adds	r3, #4
 80078a6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <USBD_StdEPReq+0x2d8>
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	2b80      	cmp	r3, #128	; 0x80
 80078b2:	d103      	bne.n	80078bc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2200      	movs	r2, #0
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	e00e      	b.n	80078da <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 ffb9 	bl	8008838 <USBD_LL_IsStallEP>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2201      	movs	r2, #1
 80078d0:	601a      	str	r2, [r3, #0]
 80078d2:	e002      	b.n	80078da <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2200      	movs	r2, #0
 80078d8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2202      	movs	r2, #2
 80078de:	4619      	mov	r1, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fbd1 	bl	8008088 <USBD_CtlSendData>
              break;
 80078e6:	e004      	b.n	80078f2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fb5b 	bl	8007fa6 <USBD_CtlError>
              break;
 80078f0:	bf00      	nop
          }
          break;
 80078f2:	e004      	b.n	80078fe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fb55 	bl	8007fa6 <USBD_CtlError>
          break;
 80078fc:	bf00      	nop
      }
      break;
 80078fe:	e005      	b.n	800790c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fb4f 	bl	8007fa6 <USBD_CtlError>
      break;
 8007908:	e000      	b.n	800790c <USBD_StdEPReq+0x330>
      break;
 800790a:	bf00      	nop
  }

  return ret;
 800790c:	7bfb      	ldrb	r3, [r7, #15]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	885b      	ldrh	r3, [r3, #2]
 8007932:	0a1b      	lsrs	r3, r3, #8
 8007934:	b29b      	uxth	r3, r3
 8007936:	3b01      	subs	r3, #1
 8007938:	2b06      	cmp	r3, #6
 800793a:	f200 8128 	bhi.w	8007b8e <USBD_GetDescriptor+0x276>
 800793e:	a201      	add	r2, pc, #4	; (adr r2, 8007944 <USBD_GetDescriptor+0x2c>)
 8007940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007944:	08007961 	.word	0x08007961
 8007948:	08007979 	.word	0x08007979
 800794c:	080079b9 	.word	0x080079b9
 8007950:	08007b8f 	.word	0x08007b8f
 8007954:	08007b8f 	.word	0x08007b8f
 8007958:	08007b2f 	.word	0x08007b2f
 800795c:	08007b5b 	.word	0x08007b5b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	7c12      	ldrb	r2, [r2, #16]
 800796c:	f107 0108 	add.w	r1, r7, #8
 8007970:	4610      	mov	r0, r2
 8007972:	4798      	blx	r3
 8007974:	60f8      	str	r0, [r7, #12]
      break;
 8007976:	e112      	b.n	8007b9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	7c1b      	ldrb	r3, [r3, #16]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10d      	bne.n	800799c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007988:	f107 0208 	add.w	r2, r7, #8
 800798c:	4610      	mov	r0, r2
 800798e:	4798      	blx	r3
 8007990:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	3301      	adds	r3, #1
 8007996:	2202      	movs	r2, #2
 8007998:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800799a:	e100      	b.n	8007b9e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a4:	f107 0208 	add.w	r2, r7, #8
 80079a8:	4610      	mov	r0, r2
 80079aa:	4798      	blx	r3
 80079ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	3301      	adds	r3, #1
 80079b2:	2202      	movs	r2, #2
 80079b4:	701a      	strb	r2, [r3, #0]
      break;
 80079b6:	e0f2      	b.n	8007b9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	885b      	ldrh	r3, [r3, #2]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b05      	cmp	r3, #5
 80079c0:	f200 80ac 	bhi.w	8007b1c <USBD_GetDescriptor+0x204>
 80079c4:	a201      	add	r2, pc, #4	; (adr r2, 80079cc <USBD_GetDescriptor+0xb4>)
 80079c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ca:	bf00      	nop
 80079cc:	080079e5 	.word	0x080079e5
 80079d0:	08007a19 	.word	0x08007a19
 80079d4:	08007a4d 	.word	0x08007a4d
 80079d8:	08007a81 	.word	0x08007a81
 80079dc:	08007ab5 	.word	0x08007ab5
 80079e0:	08007ae9 	.word	0x08007ae9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00b      	beq.n	8007a08 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	7c12      	ldrb	r2, [r2, #16]
 80079fc:	f107 0108 	add.w	r1, r7, #8
 8007a00:	4610      	mov	r0, r2
 8007a02:	4798      	blx	r3
 8007a04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a06:	e091      	b.n	8007b2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 facb 	bl	8007fa6 <USBD_CtlError>
            err++;
 8007a10:	7afb      	ldrb	r3, [r7, #11]
 8007a12:	3301      	adds	r3, #1
 8007a14:	72fb      	strb	r3, [r7, #11]
          break;
 8007a16:	e089      	b.n	8007b2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00b      	beq.n	8007a3c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	7c12      	ldrb	r2, [r2, #16]
 8007a30:	f107 0108 	add.w	r1, r7, #8
 8007a34:	4610      	mov	r0, r2
 8007a36:	4798      	blx	r3
 8007a38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a3a:	e077      	b.n	8007b2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fab1 	bl	8007fa6 <USBD_CtlError>
            err++;
 8007a44:	7afb      	ldrb	r3, [r7, #11]
 8007a46:	3301      	adds	r3, #1
 8007a48:	72fb      	strb	r3, [r7, #11]
          break;
 8007a4a:	e06f      	b.n	8007b2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00b      	beq.n	8007a70 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	7c12      	ldrb	r2, [r2, #16]
 8007a64:	f107 0108 	add.w	r1, r7, #8
 8007a68:	4610      	mov	r0, r2
 8007a6a:	4798      	blx	r3
 8007a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a6e:	e05d      	b.n	8007b2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fa97 	bl	8007fa6 <USBD_CtlError>
            err++;
 8007a78:	7afb      	ldrb	r3, [r7, #11]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a7e:	e055      	b.n	8007b2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00b      	beq.n	8007aa4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	7c12      	ldrb	r2, [r2, #16]
 8007a98:	f107 0108 	add.w	r1, r7, #8
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4798      	blx	r3
 8007aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aa2:	e043      	b.n	8007b2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fa7d 	bl	8007fa6 <USBD_CtlError>
            err++;
 8007aac:	7afb      	ldrb	r3, [r7, #11]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ab2:	e03b      	b.n	8007b2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00b      	beq.n	8007ad8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ac6:	695b      	ldr	r3, [r3, #20]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	7c12      	ldrb	r2, [r2, #16]
 8007acc:	f107 0108 	add.w	r1, r7, #8
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4798      	blx	r3
 8007ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ad6:	e029      	b.n	8007b2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fa63 	bl	8007fa6 <USBD_CtlError>
            err++;
 8007ae0:	7afb      	ldrb	r3, [r7, #11]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ae6:	e021      	b.n	8007b2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00b      	beq.n	8007b0c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	7c12      	ldrb	r2, [r2, #16]
 8007b00:	f107 0108 	add.w	r1, r7, #8
 8007b04:	4610      	mov	r0, r2
 8007b06:	4798      	blx	r3
 8007b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b0a:	e00f      	b.n	8007b2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fa49 	bl	8007fa6 <USBD_CtlError>
            err++;
 8007b14:	7afb      	ldrb	r3, [r7, #11]
 8007b16:	3301      	adds	r3, #1
 8007b18:	72fb      	strb	r3, [r7, #11]
          break;
 8007b1a:	e007      	b.n	8007b2c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fa41 	bl	8007fa6 <USBD_CtlError>
          err++;
 8007b24:	7afb      	ldrb	r3, [r7, #11]
 8007b26:	3301      	adds	r3, #1
 8007b28:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007b2a:	bf00      	nop
      }
      break;
 8007b2c:	e037      	b.n	8007b9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	7c1b      	ldrb	r3, [r3, #16]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d109      	bne.n	8007b4a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b3e:	f107 0208 	add.w	r2, r7, #8
 8007b42:	4610      	mov	r0, r2
 8007b44:	4798      	blx	r3
 8007b46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b48:	e029      	b.n	8007b9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fa2a 	bl	8007fa6 <USBD_CtlError>
        err++;
 8007b52:	7afb      	ldrb	r3, [r7, #11]
 8007b54:	3301      	adds	r3, #1
 8007b56:	72fb      	strb	r3, [r7, #11]
      break;
 8007b58:	e021      	b.n	8007b9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	7c1b      	ldrb	r3, [r3, #16]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10d      	bne.n	8007b7e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6a:	f107 0208 	add.w	r2, r7, #8
 8007b6e:	4610      	mov	r0, r2
 8007b70:	4798      	blx	r3
 8007b72:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	3301      	adds	r3, #1
 8007b78:	2207      	movs	r2, #7
 8007b7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b7c:	e00f      	b.n	8007b9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b7e:	6839      	ldr	r1, [r7, #0]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fa10 	bl	8007fa6 <USBD_CtlError>
        err++;
 8007b86:	7afb      	ldrb	r3, [r7, #11]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	72fb      	strb	r3, [r7, #11]
      break;
 8007b8c:	e007      	b.n	8007b9e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fa08 	bl	8007fa6 <USBD_CtlError>
      err++;
 8007b96:	7afb      	ldrb	r3, [r7, #11]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	72fb      	strb	r3, [r7, #11]
      break;
 8007b9c:	bf00      	nop
  }

  if (err != 0U)
 8007b9e:	7afb      	ldrb	r3, [r7, #11]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d11e      	bne.n	8007be2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	88db      	ldrh	r3, [r3, #6]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d016      	beq.n	8007bda <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007bac:	893b      	ldrh	r3, [r7, #8]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00e      	beq.n	8007bd0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	88da      	ldrh	r2, [r3, #6]
 8007bb6:	893b      	ldrh	r3, [r7, #8]
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	bf28      	it	cs
 8007bbc:	4613      	movcs	r3, r2
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007bc2:	893b      	ldrh	r3, [r7, #8]
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	68f9      	ldr	r1, [r7, #12]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fa5d 	bl	8008088 <USBD_CtlSendData>
 8007bce:	e009      	b.n	8007be4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f9e7 	bl	8007fa6 <USBD_CtlError>
 8007bd8:	e004      	b.n	8007be4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fa91 	bl	8008102 <USBD_CtlSendStatus>
 8007be0:	e000      	b.n	8007be4 <USBD_GetDescriptor+0x2cc>
    return;
 8007be2:	bf00      	nop
  }
}
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop

08007bec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	889b      	ldrh	r3, [r3, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d131      	bne.n	8007c62 <USBD_SetAddress+0x76>
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	88db      	ldrh	r3, [r3, #6]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d12d      	bne.n	8007c62 <USBD_SetAddress+0x76>
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	885b      	ldrh	r3, [r3, #2]
 8007c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8007c0c:	d829      	bhi.n	8007c62 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	885b      	ldrh	r3, [r3, #2]
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d104      	bne.n	8007c30 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f9bc 	bl	8007fa6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c2e:	e01d      	b.n	8007c6c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	7bfa      	ldrb	r2, [r7, #15]
 8007c34:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fe27 	bl	8008890 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fa5d 	bl	8008102 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d004      	beq.n	8007c58 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2202      	movs	r2, #2
 8007c52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c56:	e009      	b.n	8007c6c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c60:	e004      	b.n	8007c6c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f99e 	bl	8007fa6 <USBD_CtlError>
  }
}
 8007c6a:	bf00      	nop
 8007c6c:	bf00      	nop
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	885b      	ldrh	r3, [r3, #2]
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	4b4e      	ldr	r3, [pc, #312]	; (8007dc4 <USBD_SetConfig+0x150>)
 8007c8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c8c:	4b4d      	ldr	r3, [pc, #308]	; (8007dc4 <USBD_SetConfig+0x150>)
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d905      	bls.n	8007ca0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f985 	bl	8007fa6 <USBD_CtlError>
    return USBD_FAIL;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e08c      	b.n	8007dba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d002      	beq.n	8007cb2 <USBD_SetConfig+0x3e>
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	d029      	beq.n	8007d04 <USBD_SetConfig+0x90>
 8007cb0:	e075      	b.n	8007d9e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007cb2:	4b44      	ldr	r3, [pc, #272]	; (8007dc4 <USBD_SetConfig+0x150>)
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d020      	beq.n	8007cfc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007cba:	4b42      	ldr	r3, [pc, #264]	; (8007dc4 <USBD_SetConfig+0x150>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cc4:	4b3f      	ldr	r3, [pc, #252]	; (8007dc4 <USBD_SetConfig+0x150>)
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7fe ffe7 	bl	8006c9e <USBD_SetClassConfig>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d008      	beq.n	8007cec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f962 	bl	8007fa6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007cea:	e065      	b.n	8007db8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fa08 	bl	8008102 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2203      	movs	r2, #3
 8007cf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007cfa:	e05d      	b.n	8007db8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fa00 	bl	8008102 <USBD_CtlSendStatus>
      break;
 8007d02:	e059      	b.n	8007db8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d04:	4b2f      	ldr	r3, [pc, #188]	; (8007dc4 <USBD_SetConfig+0x150>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d112      	bne.n	8007d32 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007d14:	4b2b      	ldr	r3, [pc, #172]	; (8007dc4 <USBD_SetConfig+0x150>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d1e:	4b29      	ldr	r3, [pc, #164]	; (8007dc4 <USBD_SetConfig+0x150>)
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7fe ffd6 	bl	8006cd6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f9e9 	bl	8008102 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d30:	e042      	b.n	8007db8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007d32:	4b24      	ldr	r3, [pc, #144]	; (8007dc4 <USBD_SetConfig+0x150>)
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	461a      	mov	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d02a      	beq.n	8007d96 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	4619      	mov	r1, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7fe ffc4 	bl	8006cd6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d4e:	4b1d      	ldr	r3, [pc, #116]	; (8007dc4 <USBD_SetConfig+0x150>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	461a      	mov	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d58:	4b1a      	ldr	r3, [pc, #104]	; (8007dc4 <USBD_SetConfig+0x150>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7fe ff9d 	bl	8006c9e <USBD_SetClassConfig>
 8007d64:	4603      	mov	r3, r0
 8007d66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00f      	beq.n	8007d8e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f918 	bl	8007fa6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7fe ffa9 	bl	8006cd6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2202      	movs	r2, #2
 8007d88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d8c:	e014      	b.n	8007db8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f9b7 	bl	8008102 <USBD_CtlSendStatus>
      break;
 8007d94:	e010      	b.n	8007db8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f9b3 	bl	8008102 <USBD_CtlSendStatus>
      break;
 8007d9c:	e00c      	b.n	8007db8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f900 	bl	8007fa6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007da6:	4b07      	ldr	r3, [pc, #28]	; (8007dc4 <USBD_SetConfig+0x150>)
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	4619      	mov	r1, r3
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f7fe ff92 	bl	8006cd6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007db2:	2303      	movs	r3, #3
 8007db4:	73fb      	strb	r3, [r7, #15]
      break;
 8007db6:	bf00      	nop
  }

  return ret;
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	200001f8 	.word	0x200001f8

08007dc8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	88db      	ldrh	r3, [r3, #6]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d004      	beq.n	8007de4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f8e2 	bl	8007fa6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007de2:	e023      	b.n	8007e2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	dc02      	bgt.n	8007df6 <USBD_GetConfig+0x2e>
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	dc03      	bgt.n	8007dfc <USBD_GetConfig+0x34>
 8007df4:	e015      	b.n	8007e22 <USBD_GetConfig+0x5a>
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	d00b      	beq.n	8007e12 <USBD_GetConfig+0x4a>
 8007dfa:	e012      	b.n	8007e22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3308      	adds	r3, #8
 8007e06:	2201      	movs	r2, #1
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f93c 	bl	8008088 <USBD_CtlSendData>
        break;
 8007e10:	e00c      	b.n	8007e2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3304      	adds	r3, #4
 8007e16:	2201      	movs	r2, #1
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f934 	bl	8008088 <USBD_CtlSendData>
        break;
 8007e20:	e004      	b.n	8007e2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f8be 	bl	8007fa6 <USBD_CtlError>
        break;
 8007e2a:	bf00      	nop
}
 8007e2c:	bf00      	nop
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	3b01      	subs	r3, #1
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d81e      	bhi.n	8007e8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	88db      	ldrh	r3, [r3, #6]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d004      	beq.n	8007e5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f8a5 	bl	8007fa6 <USBD_CtlError>
        break;
 8007e5c:	e01a      	b.n	8007e94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d005      	beq.n	8007e7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	f043 0202 	orr.w	r2, r3, #2
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	330c      	adds	r3, #12
 8007e7e:	2202      	movs	r2, #2
 8007e80:	4619      	mov	r1, r3
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f900 	bl	8008088 <USBD_CtlSendData>
      break;
 8007e88:	e004      	b.n	8007e94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e8a:	6839      	ldr	r1, [r7, #0]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f88a 	bl	8007fa6 <USBD_CtlError>
      break;
 8007e92:	bf00      	nop
  }
}
 8007e94:	bf00      	nop
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	885b      	ldrh	r3, [r3, #2]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d107      	bne.n	8007ebe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f923 	bl	8008102 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007ebc:	e013      	b.n	8007ee6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	885b      	ldrh	r3, [r3, #2]
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d10b      	bne.n	8007ede <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	889b      	ldrh	r3, [r3, #4]
 8007eca:	0a1b      	lsrs	r3, r3, #8
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	b2da      	uxtb	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f913 	bl	8008102 <USBD_CtlSendStatus>
}
 8007edc:	e003      	b.n	8007ee6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f860 	bl	8007fa6 <USBD_CtlError>
}
 8007ee6:	bf00      	nop
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	3b01      	subs	r3, #1
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d80b      	bhi.n	8007f1e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	885b      	ldrh	r3, [r3, #2]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d10c      	bne.n	8007f28 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f8f3 	bl	8008102 <USBD_CtlSendStatus>
      }
      break;
 8007f1c:	e004      	b.n	8007f28 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f840 	bl	8007fa6 <USBD_CtlError>
      break;
 8007f26:	e000      	b.n	8007f2a <USBD_ClrFeature+0x3c>
      break;
 8007f28:	bf00      	nop
  }
}
 8007f2a:	bf00      	nop
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b084      	sub	sp, #16
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	781a      	ldrb	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	781a      	ldrb	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f7ff fa41 	bl	80073e4 <SWAPBYTE>
 8007f62:	4603      	mov	r3, r0
 8007f64:	461a      	mov	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	3301      	adds	r3, #1
 8007f74:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f7ff fa34 	bl	80073e4 <SWAPBYTE>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	461a      	mov	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	3301      	adds	r3, #1
 8007f88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f7ff fa27 	bl	80073e4 <SWAPBYTE>
 8007f96:	4603      	mov	r3, r0
 8007f98:	461a      	mov	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	80da      	strh	r2, [r3, #6]
}
 8007f9e:	bf00      	nop
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b082      	sub	sp, #8
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fb0:	2180      	movs	r1, #128	; 0x80
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fc02 	bl	80087bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007fb8:	2100      	movs	r1, #0
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fbfe 	bl	80087bc <USBD_LL_StallEP>
}
 8007fc0:	bf00      	nop
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d036      	beq.n	800804c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007fe2:	6938      	ldr	r0, [r7, #16]
 8007fe4:	f000 f836 	bl	8008054 <USBD_GetLen>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	3301      	adds	r3, #1
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	005b      	lsls	r3, r3, #1
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	7812      	ldrb	r2, [r2, #0]
 8008000:	701a      	strb	r2, [r3, #0]
  idx++;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	3301      	adds	r3, #1
 8008006:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008008:	7dfb      	ldrb	r3, [r7, #23]
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	4413      	add	r3, r2
 800800e:	2203      	movs	r2, #3
 8008010:	701a      	strb	r2, [r3, #0]
  idx++;
 8008012:	7dfb      	ldrb	r3, [r7, #23]
 8008014:	3301      	adds	r3, #1
 8008016:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008018:	e013      	b.n	8008042 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800801a:	7dfb      	ldrb	r3, [r7, #23]
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	4413      	add	r3, r2
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	7812      	ldrb	r2, [r2, #0]
 8008024:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	3301      	adds	r3, #1
 800802a:	613b      	str	r3, [r7, #16]
    idx++;
 800802c:	7dfb      	ldrb	r3, [r7, #23]
 800802e:	3301      	adds	r3, #1
 8008030:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008032:	7dfb      	ldrb	r3, [r7, #23]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	4413      	add	r3, r2
 8008038:	2200      	movs	r2, #0
 800803a:	701a      	strb	r2, [r3, #0]
    idx++;
 800803c:	7dfb      	ldrb	r3, [r7, #23]
 800803e:	3301      	adds	r3, #1
 8008040:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1e7      	bne.n	800801a <USBD_GetString+0x52>
 800804a:	e000      	b.n	800804e <USBD_GetString+0x86>
    return;
 800804c:	bf00      	nop
  }
}
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008064:	e005      	b.n	8008072 <USBD_GetLen+0x1e>
  {
    len++;
 8008066:	7bfb      	ldrb	r3, [r7, #15]
 8008068:	3301      	adds	r3, #1
 800806a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	3301      	adds	r3, #1
 8008070:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1f5      	bne.n	8008066 <USBD_GetLen+0x12>
  }

  return len;
 800807a:	7bfb      	ldrb	r3, [r7, #15]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2202      	movs	r2, #2
 8008098:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	2100      	movs	r1, #0
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 fc0d 	bl	80088ce <USBD_LL_Transmit>

  return USBD_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b084      	sub	sp, #16
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	60f8      	str	r0, [r7, #12]
 80080c6:	60b9      	str	r1, [r7, #8]
 80080c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	2100      	movs	r1, #0
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 fbfc 	bl	80088ce <USBD_LL_Transmit>

  return USBD_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	2100      	movs	r1, #0
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f000 fc0c 	bl	8008910 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b082      	sub	sp, #8
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2204      	movs	r2, #4
 800810e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008112:	2300      	movs	r3, #0
 8008114:	2200      	movs	r2, #0
 8008116:	2100      	movs	r1, #0
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fbd8 	bl	80088ce <USBD_LL_Transmit>

  return USBD_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2205      	movs	r2, #5
 8008134:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008138:	2300      	movs	r3, #0
 800813a:	2200      	movs	r2, #0
 800813c:	2100      	movs	r1, #0
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fbe6 	bl	8008910 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008154:	2200      	movs	r2, #0
 8008156:	490e      	ldr	r1, [pc, #56]	; (8008190 <MX_USB_DEVICE_Init+0x40>)
 8008158:	480e      	ldr	r0, [pc, #56]	; (8008194 <MX_USB_DEVICE_Init+0x44>)
 800815a:	f7fe fd23 	bl	8006ba4 <USBD_Init>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d001      	beq.n	8008168 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008164:	f7f9 fa18 	bl	8001598 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008168:	490b      	ldr	r1, [pc, #44]	; (8008198 <MX_USB_DEVICE_Init+0x48>)
 800816a:	480a      	ldr	r0, [pc, #40]	; (8008194 <MX_USB_DEVICE_Init+0x44>)
 800816c:	f7fe fd4a 	bl	8006c04 <USBD_RegisterClass>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008176:	f7f9 fa0f 	bl	8001598 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800817a:	4806      	ldr	r0, [pc, #24]	; (8008194 <MX_USB_DEVICE_Init+0x44>)
 800817c:	f7fe fd78 	bl	8006c70 <USBD_Start>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008186:	f7f9 fa07 	bl	8001598 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800818a:	bf00      	nop
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	200000cc 	.word	0x200000cc
 8008194:	200001fc 	.word	0x200001fc
 8008198:	2000000c 	.word	0x2000000c

0800819c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	4603      	mov	r3, r0
 80081a4:	6039      	str	r1, [r7, #0]
 80081a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	2212      	movs	r2, #18
 80081ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081ae:	4b03      	ldr	r3, [pc, #12]	; (80081bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	200000e8 	.word	0x200000e8

080081c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	4603      	mov	r3, r0
 80081c8:	6039      	str	r1, [r7, #0]
 80081ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	2204      	movs	r2, #4
 80081d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80081d2:	4b03      	ldr	r3, [pc, #12]	; (80081e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	200000fc 	.word	0x200000fc

080081e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	4603      	mov	r3, r0
 80081ec:	6039      	str	r1, [r7, #0]
 80081ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081f0:	79fb      	ldrb	r3, [r7, #7]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d105      	bne.n	8008202 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	4907      	ldr	r1, [pc, #28]	; (8008218 <USBD_FS_ProductStrDescriptor+0x34>)
 80081fa:	4808      	ldr	r0, [pc, #32]	; (800821c <USBD_FS_ProductStrDescriptor+0x38>)
 80081fc:	f7ff fee4 	bl	8007fc8 <USBD_GetString>
 8008200:	e004      	b.n	800820c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	4904      	ldr	r1, [pc, #16]	; (8008218 <USBD_FS_ProductStrDescriptor+0x34>)
 8008206:	4805      	ldr	r0, [pc, #20]	; (800821c <USBD_FS_ProductStrDescriptor+0x38>)
 8008208:	f7ff fede 	bl	8007fc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800820c:	4b02      	ldr	r3, [pc, #8]	; (8008218 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800820e:	4618      	mov	r0, r3
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	200004d8 	.word	0x200004d8
 800821c:	08008a4c 	.word	0x08008a4c

08008220 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	4603      	mov	r3, r0
 8008228:	6039      	str	r1, [r7, #0]
 800822a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	4904      	ldr	r1, [pc, #16]	; (8008240 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008230:	4804      	ldr	r0, [pc, #16]	; (8008244 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008232:	f7ff fec9 	bl	8007fc8 <USBD_GetString>
  return USBD_StrDesc;
 8008236:	4b02      	ldr	r3, [pc, #8]	; (8008240 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008238:	4618      	mov	r0, r3
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	200004d8 	.word	0x200004d8
 8008244:	08008a60 	.word	0x08008a60

08008248 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	4603      	mov	r3, r0
 8008250:	6039      	str	r1, [r7, #0]
 8008252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	221a      	movs	r2, #26
 8008258:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800825a:	f000 f843 	bl	80082e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800825e:	4b02      	ldr	r3, [pc, #8]	; (8008268 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008260:	4618      	mov	r0, r3
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	20000100 	.word	0x20000100

0800826c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	4603      	mov	r3, r0
 8008274:	6039      	str	r1, [r7, #0]
 8008276:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008278:	79fb      	ldrb	r3, [r7, #7]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d105      	bne.n	800828a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	4907      	ldr	r1, [pc, #28]	; (80082a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008282:	4808      	ldr	r0, [pc, #32]	; (80082a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008284:	f7ff fea0 	bl	8007fc8 <USBD_GetString>
 8008288:	e004      	b.n	8008294 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	4904      	ldr	r1, [pc, #16]	; (80082a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800828e:	4805      	ldr	r0, [pc, #20]	; (80082a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008290:	f7ff fe9a 	bl	8007fc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008294:	4b02      	ldr	r3, [pc, #8]	; (80082a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008296:	4618      	mov	r0, r3
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	200004d8 	.word	0x200004d8
 80082a4:	08008a74 	.word	0x08008a74

080082a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	6039      	str	r1, [r7, #0]
 80082b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082b4:	79fb      	ldrb	r3, [r7, #7]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d105      	bne.n	80082c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	4907      	ldr	r1, [pc, #28]	; (80082dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082be:	4808      	ldr	r0, [pc, #32]	; (80082e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082c0:	f7ff fe82 	bl	8007fc8 <USBD_GetString>
 80082c4:	e004      	b.n	80082d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	4904      	ldr	r1, [pc, #16]	; (80082dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082ca:	4805      	ldr	r0, [pc, #20]	; (80082e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082cc:	f7ff fe7c 	bl	8007fc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082d0:	4b02      	ldr	r3, [pc, #8]	; (80082dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	200004d8 	.word	0x200004d8
 80082e0:	08008a80 	.word	0x08008a80

080082e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80082ea:	4b0f      	ldr	r3, [pc, #60]	; (8008328 <Get_SerialNum+0x44>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80082f0:	4b0e      	ldr	r3, [pc, #56]	; (800832c <Get_SerialNum+0x48>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80082f6:	4b0e      	ldr	r3, [pc, #56]	; (8008330 <Get_SerialNum+0x4c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4413      	add	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d009      	beq.n	800831e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800830a:	2208      	movs	r2, #8
 800830c:	4909      	ldr	r1, [pc, #36]	; (8008334 <Get_SerialNum+0x50>)
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f000 f814 	bl	800833c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008314:	2204      	movs	r2, #4
 8008316:	4908      	ldr	r1, [pc, #32]	; (8008338 <Get_SerialNum+0x54>)
 8008318:	68b8      	ldr	r0, [r7, #8]
 800831a:	f000 f80f 	bl	800833c <IntToUnicode>
  }
}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	1fff7a10 	.word	0x1fff7a10
 800832c:	1fff7a14 	.word	0x1fff7a14
 8008330:	1fff7a18 	.word	0x1fff7a18
 8008334:	20000102 	.word	0x20000102
 8008338:	20000112 	.word	0x20000112

0800833c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	4613      	mov	r3, r2
 8008348:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800834a:	2300      	movs	r3, #0
 800834c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800834e:	2300      	movs	r3, #0
 8008350:	75fb      	strb	r3, [r7, #23]
 8008352:	e027      	b.n	80083a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	0f1b      	lsrs	r3, r3, #28
 8008358:	2b09      	cmp	r3, #9
 800835a:	d80b      	bhi.n	8008374 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	0f1b      	lsrs	r3, r3, #28
 8008360:	b2da      	uxtb	r2, r3
 8008362:	7dfb      	ldrb	r3, [r7, #23]
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	4619      	mov	r1, r3
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	440b      	add	r3, r1
 800836c:	3230      	adds	r2, #48	; 0x30
 800836e:	b2d2      	uxtb	r2, r2
 8008370:	701a      	strb	r2, [r3, #0]
 8008372:	e00a      	b.n	800838a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	0f1b      	lsrs	r3, r3, #28
 8008378:	b2da      	uxtb	r2, r3
 800837a:	7dfb      	ldrb	r3, [r7, #23]
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	4619      	mov	r1, r3
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	440b      	add	r3, r1
 8008384:	3237      	adds	r2, #55	; 0x37
 8008386:	b2d2      	uxtb	r2, r2
 8008388:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	011b      	lsls	r3, r3, #4
 800838e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008390:	7dfb      	ldrb	r3, [r7, #23]
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	3301      	adds	r3, #1
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	4413      	add	r3, r2
 800839a:	2200      	movs	r2, #0
 800839c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800839e:	7dfb      	ldrb	r3, [r7, #23]
 80083a0:	3301      	adds	r3, #1
 80083a2:	75fb      	strb	r3, [r7, #23]
 80083a4:	7dfa      	ldrb	r2, [r7, #23]
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d3d3      	bcc.n	8008354 <IntToUnicode+0x18>
  }
}
 80083ac:	bf00      	nop
 80083ae:	bf00      	nop
 80083b0:	371c      	adds	r7, #28
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
	...

080083bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b08a      	sub	sp, #40	; 0x28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083c4:	f107 0314 	add.w	r3, r7, #20
 80083c8:	2200      	movs	r2, #0
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	605a      	str	r2, [r3, #4]
 80083ce:	609a      	str	r2, [r3, #8]
 80083d0:	60da      	str	r2, [r3, #12]
 80083d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083dc:	d147      	bne.n	800846e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083de:	2300      	movs	r3, #0
 80083e0:	613b      	str	r3, [r7, #16]
 80083e2:	4b25      	ldr	r3, [pc, #148]	; (8008478 <HAL_PCD_MspInit+0xbc>)
 80083e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e6:	4a24      	ldr	r2, [pc, #144]	; (8008478 <HAL_PCD_MspInit+0xbc>)
 80083e8:	f043 0301 	orr.w	r3, r3, #1
 80083ec:	6313      	str	r3, [r2, #48]	; 0x30
 80083ee:	4b22      	ldr	r3, [pc, #136]	; (8008478 <HAL_PCD_MspInit+0xbc>)
 80083f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	613b      	str	r3, [r7, #16]
 80083f8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80083fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008400:	2300      	movs	r3, #0
 8008402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008404:	2300      	movs	r3, #0
 8008406:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008408:	f107 0314 	add.w	r3, r7, #20
 800840c:	4619      	mov	r1, r3
 800840e:	481b      	ldr	r0, [pc, #108]	; (800847c <HAL_PCD_MspInit+0xc0>)
 8008410:	f7f9 fb8e 	bl	8001b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008414:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800841a:	2302      	movs	r3, #2
 800841c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800841e:	2300      	movs	r3, #0
 8008420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008422:	2300      	movs	r3, #0
 8008424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008426:	230a      	movs	r3, #10
 8008428:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800842a:	f107 0314 	add.w	r3, r7, #20
 800842e:	4619      	mov	r1, r3
 8008430:	4812      	ldr	r0, [pc, #72]	; (800847c <HAL_PCD_MspInit+0xc0>)
 8008432:	f7f9 fb7d 	bl	8001b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008436:	4b10      	ldr	r3, [pc, #64]	; (8008478 <HAL_PCD_MspInit+0xbc>)
 8008438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843a:	4a0f      	ldr	r2, [pc, #60]	; (8008478 <HAL_PCD_MspInit+0xbc>)
 800843c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008440:	6353      	str	r3, [r2, #52]	; 0x34
 8008442:	2300      	movs	r3, #0
 8008444:	60fb      	str	r3, [r7, #12]
 8008446:	4b0c      	ldr	r3, [pc, #48]	; (8008478 <HAL_PCD_MspInit+0xbc>)
 8008448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800844a:	4a0b      	ldr	r2, [pc, #44]	; (8008478 <HAL_PCD_MspInit+0xbc>)
 800844c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008450:	6453      	str	r3, [r2, #68]	; 0x44
 8008452:	4b09      	ldr	r3, [pc, #36]	; (8008478 <HAL_PCD_MspInit+0xbc>)
 8008454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800845a:	60fb      	str	r3, [r7, #12]
 800845c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800845e:	2200      	movs	r2, #0
 8008460:	2100      	movs	r1, #0
 8008462:	2043      	movs	r0, #67	; 0x43
 8008464:	f7f9 fb2d 	bl	8001ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008468:	2043      	movs	r0, #67	; 0x43
 800846a:	f7f9 fb46 	bl	8001afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800846e:	bf00      	nop
 8008470:	3728      	adds	r7, #40	; 0x28
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	40023800 	.word	0x40023800
 800847c:	40020000 	.word	0x40020000

08008480 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008494:	4619      	mov	r1, r3
 8008496:	4610      	mov	r0, r2
 8008498:	f7fe fc37 	bl	8006d0a <USBD_LL_SetupStage>
}
 800849c:	bf00      	nop
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	460b      	mov	r3, r1
 80084ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80084b6:	78fa      	ldrb	r2, [r7, #3]
 80084b8:	6879      	ldr	r1, [r7, #4]
 80084ba:	4613      	mov	r3, r2
 80084bc:	00db      	lsls	r3, r3, #3
 80084be:	4413      	add	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	440b      	add	r3, r1
 80084c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	78fb      	ldrb	r3, [r7, #3]
 80084cc:	4619      	mov	r1, r3
 80084ce:	f7fe fc71 	bl	8006db4 <USBD_LL_DataOutStage>
}
 80084d2:	bf00      	nop
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b082      	sub	sp, #8
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	460b      	mov	r3, r1
 80084e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80084ec:	78fa      	ldrb	r2, [r7, #3]
 80084ee:	6879      	ldr	r1, [r7, #4]
 80084f0:	4613      	mov	r3, r2
 80084f2:	00db      	lsls	r3, r3, #3
 80084f4:	4413      	add	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	440b      	add	r3, r1
 80084fa:	334c      	adds	r3, #76	; 0x4c
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	78fb      	ldrb	r3, [r7, #3]
 8008500:	4619      	mov	r1, r3
 8008502:	f7fe fd0a 	bl	8006f1a <USBD_LL_DataInStage>
}
 8008506:	bf00      	nop
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800851c:	4618      	mov	r0, r3
 800851e:	f7fe fe3e 	bl	800719e <USBD_LL_SOF>
}
 8008522:	bf00      	nop
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008532:	2301      	movs	r3, #1
 8008534:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d102      	bne.n	8008544 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800853e:	2300      	movs	r3, #0
 8008540:	73fb      	strb	r3, [r7, #15]
 8008542:	e008      	b.n	8008556 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	2b02      	cmp	r3, #2
 800854a:	d102      	bne.n	8008552 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800854c:	2301      	movs	r3, #1
 800854e:	73fb      	strb	r3, [r7, #15]
 8008550:	e001      	b.n	8008556 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008552:	f7f9 f821 	bl	8001598 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800855c:	7bfa      	ldrb	r2, [r7, #15]
 800855e:	4611      	mov	r1, r2
 8008560:	4618      	mov	r0, r3
 8008562:	f7fe fdde 	bl	8007122 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800856c:	4618      	mov	r0, r3
 800856e:	f7fe fd86 	bl	800707e <USBD_LL_Reset>
}
 8008572:	bf00      	nop
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
	...

0800857c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800858a:	4618      	mov	r0, r3
 800858c:	f7fe fdd9 	bl	8007142 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	6812      	ldr	r2, [r2, #0]
 800859e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085a2:	f043 0301 	orr.w	r3, r3, #1
 80085a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a1b      	ldr	r3, [r3, #32]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d005      	beq.n	80085bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085b0:	4b04      	ldr	r3, [pc, #16]	; (80085c4 <HAL_PCD_SuspendCallback+0x48>)
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	4a03      	ldr	r2, [pc, #12]	; (80085c4 <HAL_PCD_SuspendCallback+0x48>)
 80085b6:	f043 0306 	orr.w	r3, r3, #6
 80085ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80085bc:	bf00      	nop
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	e000ed00 	.word	0xe000ed00

080085c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fe fdc9 	bl	800716e <USBD_LL_Resume>
}
 80085dc:	bf00      	nop
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	460b      	mov	r3, r1
 80085ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085f6:	78fa      	ldrb	r2, [r7, #3]
 80085f8:	4611      	mov	r1, r2
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fe fe21 	bl	8007242 <USBD_LL_IsoOUTIncomplete>
}
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800861a:	78fa      	ldrb	r2, [r7, #3]
 800861c:	4611      	mov	r1, r2
 800861e:	4618      	mov	r0, r3
 8008620:	f7fe fddd 	bl	80071de <USBD_LL_IsoINIncomplete>
}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe fe33 	bl	80072a6 <USBD_LL_DevConnected>
}
 8008640:	bf00      	nop
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008656:	4618      	mov	r0, r3
 8008658:	f7fe fe30 	bl	80072bc <USBD_LL_DevDisconnected>
}
 800865c:	bf00      	nop
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d13c      	bne.n	80086ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008674:	4a20      	ldr	r2, [pc, #128]	; (80086f8 <USBD_LL_Init+0x94>)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a1e      	ldr	r2, [pc, #120]	; (80086f8 <USBD_LL_Init+0x94>)
 8008680:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008684:	4b1c      	ldr	r3, [pc, #112]	; (80086f8 <USBD_LL_Init+0x94>)
 8008686:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800868a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800868c:	4b1a      	ldr	r3, [pc, #104]	; (80086f8 <USBD_LL_Init+0x94>)
 800868e:	2204      	movs	r2, #4
 8008690:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008692:	4b19      	ldr	r3, [pc, #100]	; (80086f8 <USBD_LL_Init+0x94>)
 8008694:	2202      	movs	r2, #2
 8008696:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008698:	4b17      	ldr	r3, [pc, #92]	; (80086f8 <USBD_LL_Init+0x94>)
 800869a:	2200      	movs	r2, #0
 800869c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800869e:	4b16      	ldr	r3, [pc, #88]	; (80086f8 <USBD_LL_Init+0x94>)
 80086a0:	2202      	movs	r2, #2
 80086a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80086a4:	4b14      	ldr	r3, [pc, #80]	; (80086f8 <USBD_LL_Init+0x94>)
 80086a6:	2200      	movs	r2, #0
 80086a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80086aa:	4b13      	ldr	r3, [pc, #76]	; (80086f8 <USBD_LL_Init+0x94>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80086b0:	4b11      	ldr	r3, [pc, #68]	; (80086f8 <USBD_LL_Init+0x94>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80086b6:	4b10      	ldr	r3, [pc, #64]	; (80086f8 <USBD_LL_Init+0x94>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80086bc:	4b0e      	ldr	r3, [pc, #56]	; (80086f8 <USBD_LL_Init+0x94>)
 80086be:	2200      	movs	r2, #0
 80086c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80086c2:	480d      	ldr	r0, [pc, #52]	; (80086f8 <USBD_LL_Init+0x94>)
 80086c4:	f7fa f8ba 	bl	800283c <HAL_PCD_Init>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80086ce:	f7f8 ff63 	bl	8001598 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80086d2:	2180      	movs	r1, #128	; 0x80
 80086d4:	4808      	ldr	r0, [pc, #32]	; (80086f8 <USBD_LL_Init+0x94>)
 80086d6:	f7fb fafa 	bl	8003cce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80086da:	2240      	movs	r2, #64	; 0x40
 80086dc:	2100      	movs	r1, #0
 80086de:	4806      	ldr	r0, [pc, #24]	; (80086f8 <USBD_LL_Init+0x94>)
 80086e0:	f7fb faae 	bl	8003c40 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80086e4:	2280      	movs	r2, #128	; 0x80
 80086e6:	2101      	movs	r1, #1
 80086e8:	4803      	ldr	r0, [pc, #12]	; (80086f8 <USBD_LL_Init+0x94>)
 80086ea:	f7fb faa9 	bl	8003c40 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	200006d8 	.word	0x200006d8

080086fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008712:	4618      	mov	r0, r3
 8008714:	f7fa f9af 	bl	8002a76 <HAL_PCD_Start>
 8008718:	4603      	mov	r3, r0
 800871a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800871c:	7bfb      	ldrb	r3, [r7, #15]
 800871e:	4618      	mov	r0, r3
 8008720:	f000 f930 	bl	8008984 <USBD_Get_USB_Status>
 8008724:	4603      	mov	r3, r0
 8008726:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008728:	7bbb      	ldrb	r3, [r7, #14]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b084      	sub	sp, #16
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	4608      	mov	r0, r1
 800873c:	4611      	mov	r1, r2
 800873e:	461a      	mov	r2, r3
 8008740:	4603      	mov	r3, r0
 8008742:	70fb      	strb	r3, [r7, #3]
 8008744:	460b      	mov	r3, r1
 8008746:	70bb      	strb	r3, [r7, #2]
 8008748:	4613      	mov	r3, r2
 800874a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800875a:	78bb      	ldrb	r3, [r7, #2]
 800875c:	883a      	ldrh	r2, [r7, #0]
 800875e:	78f9      	ldrb	r1, [r7, #3]
 8008760:	f7fa fe80 	bl	8003464 <HAL_PCD_EP_Open>
 8008764:	4603      	mov	r3, r0
 8008766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	4618      	mov	r0, r3
 800876c:	f000 f90a 	bl	8008984 <USBD_Get_USB_Status>
 8008770:	4603      	mov	r3, r0
 8008772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008774:	7bbb      	ldrb	r3, [r7, #14]
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b084      	sub	sp, #16
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	460b      	mov	r3, r1
 8008788:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008798:	78fa      	ldrb	r2, [r7, #3]
 800879a:	4611      	mov	r1, r2
 800879c:	4618      	mov	r0, r3
 800879e:	f7fa fec9 	bl	8003534 <HAL_PCD_EP_Close>
 80087a2:	4603      	mov	r3, r0
 80087a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 f8eb 	bl	8008984 <USBD_Get_USB_Status>
 80087ae:	4603      	mov	r3, r0
 80087b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	460b      	mov	r3, r1
 80087c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087d6:	78fa      	ldrb	r2, [r7, #3]
 80087d8:	4611      	mov	r1, r2
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fa ff89 	bl	80036f2 <HAL_PCD_EP_SetStall>
 80087e0:	4603      	mov	r3, r0
 80087e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 f8cc 	bl	8008984 <USBD_Get_USB_Status>
 80087ec:	4603      	mov	r3, r0
 80087ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b084      	sub	sp, #16
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	460b      	mov	r3, r1
 8008804:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008814:	78fa      	ldrb	r2, [r7, #3]
 8008816:	4611      	mov	r1, r2
 8008818:	4618      	mov	r0, r3
 800881a:	f7fa ffce 	bl	80037ba <HAL_PCD_EP_ClrStall>
 800881e:	4603      	mov	r3, r0
 8008820:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008822:	7bfb      	ldrb	r3, [r7, #15]
 8008824:	4618      	mov	r0, r3
 8008826:	f000 f8ad 	bl	8008984 <USBD_Get_USB_Status>
 800882a:	4603      	mov	r3, r0
 800882c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800882e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	460b      	mov	r3, r1
 8008842:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800884a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800884c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008850:	2b00      	cmp	r3, #0
 8008852:	da0b      	bge.n	800886c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008854:	78fb      	ldrb	r3, [r7, #3]
 8008856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800885a:	68f9      	ldr	r1, [r7, #12]
 800885c:	4613      	mov	r3, r2
 800885e:	00db      	lsls	r3, r3, #3
 8008860:	4413      	add	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	440b      	add	r3, r1
 8008866:	333e      	adds	r3, #62	; 0x3e
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	e00b      	b.n	8008884 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800886c:	78fb      	ldrb	r3, [r7, #3]
 800886e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008872:	68f9      	ldr	r1, [r7, #12]
 8008874:	4613      	mov	r3, r2
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	4413      	add	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	440b      	add	r3, r1
 800887e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008882:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088aa:	78fa      	ldrb	r2, [r7, #3]
 80088ac:	4611      	mov	r1, r2
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fa fdb3 	bl	800341a <HAL_PCD_SetAddress>
 80088b4:	4603      	mov	r3, r0
 80088b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 f862 	bl	8008984 <USBD_Get_USB_Status>
 80088c0:	4603      	mov	r3, r0
 80088c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b086      	sub	sp, #24
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	60f8      	str	r0, [r7, #12]
 80088d6:	607a      	str	r2, [r7, #4]
 80088d8:	603b      	str	r3, [r7, #0]
 80088da:	460b      	mov	r3, r1
 80088dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80088ec:	7af9      	ldrb	r1, [r7, #11]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	f7fa feb4 	bl	800365e <HAL_PCD_EP_Transmit>
 80088f6:	4603      	mov	r3, r0
 80088f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 f841 	bl	8008984 <USBD_Get_USB_Status>
 8008902:	4603      	mov	r3, r0
 8008904:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008906:	7dbb      	ldrb	r3, [r7, #22]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3718      	adds	r7, #24
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	607a      	str	r2, [r7, #4]
 800891a:	603b      	str	r3, [r7, #0]
 800891c:	460b      	mov	r3, r1
 800891e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008920:	2300      	movs	r3, #0
 8008922:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008924:	2300      	movs	r3, #0
 8008926:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800892e:	7af9      	ldrb	r1, [r7, #11]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	f7fa fe48 	bl	80035c8 <HAL_PCD_EP_Receive>
 8008938:	4603      	mov	r3, r0
 800893a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800893c:	7dfb      	ldrb	r3, [r7, #23]
 800893e:	4618      	mov	r0, r3
 8008940:	f000 f820 	bl	8008984 <USBD_Get_USB_Status>
 8008944:	4603      	mov	r3, r0
 8008946:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008948:	7dbb      	ldrb	r3, [r7, #22]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3718      	adds	r7, #24
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
	...

08008954 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800895c:	4b03      	ldr	r3, [pc, #12]	; (800896c <USBD_static_malloc+0x18>)
}
 800895e:	4618      	mov	r0, r3
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	20000be4 	.word	0x20000be4

08008970 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]

}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	4603      	mov	r3, r0
 800898c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008992:	79fb      	ldrb	r3, [r7, #7]
 8008994:	2b03      	cmp	r3, #3
 8008996:	d817      	bhi.n	80089c8 <USBD_Get_USB_Status+0x44>
 8008998:	a201      	add	r2, pc, #4	; (adr r2, 80089a0 <USBD_Get_USB_Status+0x1c>)
 800899a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899e:	bf00      	nop
 80089a0:	080089b1 	.word	0x080089b1
 80089a4:	080089b7 	.word	0x080089b7
 80089a8:	080089bd 	.word	0x080089bd
 80089ac:	080089c3 	.word	0x080089c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	73fb      	strb	r3, [r7, #15]
    break;
 80089b4:	e00b      	b.n	80089ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80089b6:	2303      	movs	r3, #3
 80089b8:	73fb      	strb	r3, [r7, #15]
    break;
 80089ba:	e008      	b.n	80089ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80089bc:	2301      	movs	r3, #1
 80089be:	73fb      	strb	r3, [r7, #15]
    break;
 80089c0:	e005      	b.n	80089ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80089c2:	2303      	movs	r3, #3
 80089c4:	73fb      	strb	r3, [r7, #15]
    break;
 80089c6:	e002      	b.n	80089ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80089c8:	2303      	movs	r3, #3
 80089ca:	73fb      	strb	r3, [r7, #15]
    break;
 80089cc:	bf00      	nop
  }
  return usb_status;
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <__libc_init_array>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	4d0d      	ldr	r5, [pc, #52]	; (8008a14 <__libc_init_array+0x38>)
 80089e0:	4c0d      	ldr	r4, [pc, #52]	; (8008a18 <__libc_init_array+0x3c>)
 80089e2:	1b64      	subs	r4, r4, r5
 80089e4:	10a4      	asrs	r4, r4, #2
 80089e6:	2600      	movs	r6, #0
 80089e8:	42a6      	cmp	r6, r4
 80089ea:	d109      	bne.n	8008a00 <__libc_init_array+0x24>
 80089ec:	4d0b      	ldr	r5, [pc, #44]	; (8008a1c <__libc_init_array+0x40>)
 80089ee:	4c0c      	ldr	r4, [pc, #48]	; (8008a20 <__libc_init_array+0x44>)
 80089f0:	f000 f820 	bl	8008a34 <_init>
 80089f4:	1b64      	subs	r4, r4, r5
 80089f6:	10a4      	asrs	r4, r4, #2
 80089f8:	2600      	movs	r6, #0
 80089fa:	42a6      	cmp	r6, r4
 80089fc:	d105      	bne.n	8008a0a <__libc_init_array+0x2e>
 80089fe:	bd70      	pop	{r4, r5, r6, pc}
 8008a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a04:	4798      	blx	r3
 8008a06:	3601      	adds	r6, #1
 8008a08:	e7ee      	b.n	80089e8 <__libc_init_array+0xc>
 8008a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a0e:	4798      	blx	r3
 8008a10:	3601      	adds	r6, #1
 8008a12:	e7f2      	b.n	80089fa <__libc_init_array+0x1e>
 8008a14:	08008aa8 	.word	0x08008aa8
 8008a18:	08008aa8 	.word	0x08008aa8
 8008a1c:	08008aa8 	.word	0x08008aa8
 8008a20:	08008aac 	.word	0x08008aac

08008a24 <memset>:
 8008a24:	4402      	add	r2, r0
 8008a26:	4603      	mov	r3, r0
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d100      	bne.n	8008a2e <memset+0xa>
 8008a2c:	4770      	bx	lr
 8008a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a32:	e7f9      	b.n	8008a28 <memset+0x4>

08008a34 <_init>:
 8008a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a36:	bf00      	nop
 8008a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3a:	bc08      	pop	{r3}
 8008a3c:	469e      	mov	lr, r3
 8008a3e:	4770      	bx	lr

08008a40 <_fini>:
 8008a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a42:	bf00      	nop
 8008a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a46:	bc08      	pop	{r3}
 8008a48:	469e      	mov	lr, r3
 8008a4a:	4770      	bx	lr
